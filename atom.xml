<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keis Note</title>
  
  <subtitle>Java developer&#39;s blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://m.iskei.cn/"/>
  <updated>2018-05-18T07:15:20.498Z</updated>
  <id>http://m.iskei.cn/</id>
  
  <author>
    <name>Kee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web前端开发常用代码整理</title>
    <link href="http://m.iskei.cn/blog/4808.html"/>
    <id>http://m.iskei.cn/blog/4808.html</id>
    <published>2018-04-08T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.498Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0171.jpg" alt="image"><br>web前端开发常用代码整理<br><a id="more"></a></p><h2 id="IE条件注释"><a href="#IE条件注释" class="headerlink" title="IE条件注释"></a>IE条件注释</h2><p><strong>条件注释简介</strong></p><ol><li>IE中的条件注释（Conditional comments）对IE的版本和IE非IE有优秀的区分能力，是WEB设计中常用的hack方法。<br>条件注释只能用于IE5以上，IE10以上不支持。</li><li>如果你安装了多个IE，条件注释将会以最高版本的IE为标准。</li><li>条件注释的基本结构和HTML的注释(&lt;!– –&gt;)是一样的。因此IE以外的浏览器将会把它们看作是普通的注释而完全忽略它们。</li><li>IE将会根据if条件来判断是否如解析普通的页面内容一样解析条件注释里的内容。</li></ol><p><strong>条件注释使用方法示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!–-[<span class="keyword">if</span> IE <span class="number">5</span>]&gt;仅IE5<span class="number">.5</span>可见&lt;![endif]–-&gt;</span><br><span class="line">&lt;!–-[<span class="keyword">if</span> gt IE <span class="number">5.5</span>]&gt;仅IE <span class="number">5.5</span>以上可见&lt;![endif]–-&gt;</span><br><span class="line">&lt;!–-[<span class="keyword">if</span> lt IE <span class="number">5.5</span>]&gt;仅IE <span class="number">5.5</span>以下可见&lt;![endif]–-&gt;</span><br><span class="line">&lt;!–-[<span class="keyword">if</span> gte IE <span class="number">5.5</span>]&gt;IE <span class="number">5.5</span>及以上可见&lt;![endif]–-&gt;</span><br><span class="line">&lt;!–-[<span class="keyword">if</span> lte IE <span class="number">5.5</span>]&gt;IE <span class="number">5.5</span>及以下可见&lt;![endif]–-&gt;</span><br><span class="line">&lt;!–-[<span class="keyword">if</span> !IE <span class="number">5.5</span>]&gt;非IE <span class="number">5.5</span>的IE可见&lt;![endif]–-&gt;</span><br></pre></td></tr></table></figure><h2 id="html代码用js动态加载进页面"><a href="#html代码用js动态加载进页面" class="headerlink" title="html代码用js动态加载进页面"></a>html代码用js动态加载进页面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/html"</span> id=<span class="string">"T-pcList"</span>&gt;</span><br><span class="line"> <span class="comment">//这里面是你要放的html代码，例如放一个div的内容</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>把上面的js动态加入到页面中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> s=$(<span class="string">"#T-pcList"</span>).html();<span class="comment">//获得js的html内容</span></span><br><span class="line">$(<span class="string">".picScroll-left .bd"</span>).html(s);<span class="comment">//把s的内容放到class为bd内</span></span><br><span class="line">thisstyle();<span class="comment">//执行某个函数</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="js判断用户访问的是PC还是mobile"><a href="#js判断用户访问的是PC还是mobile" class="headerlink" title="js判断用户访问的是PC还是mobile"></a>js判断用户访问的是PC还是mobile</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> browser=&#123; </span><br><span class="line">    versions:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> u = navigator.userAgent, app = navigator.appVersion;</span><br><span class="line">        <span class="keyword">var</span> sUserAgent = navigator.userAgent;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        trident: u.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span>,</span><br><span class="line">        presto: u.indexOf(<span class="string">'Presto'</span>) &gt; <span class="number">-1</span>, </span><br><span class="line">        isChrome: u.indexOf(<span class="string">"chrome"</span>) &gt; <span class="number">-1</span>, </span><br><span class="line">        isSafari: !u.indexOf(<span class="string">"chrome"</span>) &gt; <span class="number">-1</span> &amp;&amp; (<span class="regexp">/webkit|khtml/</span>).test(u),</span><br><span class="line">        isSafari3: !u.indexOf(<span class="string">"chrome"</span>) &gt; <span class="number">-1</span> &amp;&amp; (<span class="regexp">/webkit|khtml/</span>).test(u) &amp;&amp; u.indexOf(<span class="string">'webkit/5'</span>) != <span class="number">-1</span>,</span><br><span class="line">        webKit: u.indexOf(<span class="string">'AppleWebKit'</span>) &gt; <span class="number">-1</span>, </span><br><span class="line">        gecko: u.indexOf(<span class="string">'Gecko'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'KHTML'</span>) == <span class="number">-1</span>,</span><br><span class="line">        mobile: !!u.match(<span class="regexp">/AppleWebKit.*Mobile.*/</span>), </span><br><span class="line">        ios: !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), </span><br><span class="line">        android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>,</span><br><span class="line">        iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>, </span><br><span class="line">        iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>,</span><br><span class="line">        iWinPhone: u.indexOf(<span class="string">'Windows Phone'</span>) &gt; <span class="number">-1</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(browser.versions.mobile || browser.versions.iWinPhone)&#123;</span><br><span class="line">    <span class="built_in">window</span>.location = <span class="string">"http:/www.baidu.com/m/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js如何判断用户是否是用微信浏览器"><a href="#js如何判断用户是否是用微信浏览器" class="headerlink" title="js如何判断用户是否是用微信浏览器"></a>js如何判断用户是否是用微信浏览器</h2><p>根据关键字 MicroMessenger 来判断是否是微信内置的浏览器。判断函数如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWeiXin</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> ua = <span class="built_in">window</span>.navigator.userAgent.toLowerCase(); </span><br><span class="line">    <span class="keyword">if</span>(ua.match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">'micromessenger'</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS-Jquery获取各种屏幕的宽度和高度"><a href="#JS-Jquery获取各种屏幕的宽度和高度" class="headerlink" title="JS,Jquery获取各种屏幕的宽度和高度"></a>JS,Jquery获取各种屏幕的宽度和高度</h2><p><strong>Javascript:</strong><br>文档可视区域宽： document.documentElement.clientWidth<br>文档可视区域高： document.documentElement.clientHeight</p><p>网页可见区域宽： document.body.clientWidth<br>网页可见区域高： document.body.clientHeight<br>网页可见区域宽： document.body.offsetWidth (包括边线的宽)<br>网页可见区域高： document.body.offsetHeight (包括边线的高)<br>网页正文全文宽： document.body.scrollWidth<br>网页正文全文高： document.body.scrollHeight<br>网页被卷去的高： document.body.scrollTop<br>网页被卷去的左： document.body.scrollLeft<br>网页正文部分上： window.screenTop<br>网页正文部分左： window.screenLeft<br>屏幕分辨率的高： window.screen.height<br>屏幕分辨率的宽： window.screen.width<br>屏幕可用工作区高度： window.screen.availHeight<br>屏幕可用工作区宽度： window.screen.availWidth</p><p><strong>JQuery:</strong></p><p>$(document).ready(function(){<br>alert($(window).height()); //浏览器当前窗口可视区域高度<br>alert($(document).height()); //浏览器当前窗口文档的高度<br>alert($(document.body).height());//浏览器当前窗口文档body的高度<br>alert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin</p><p>alert($(window).width()); //浏览器当前窗口可视区域宽度<br>alert($(document).width());//浏览器当前窗口文档对象宽度<br>alert($(document.body).width());//浏览器当前窗口文档body的宽度<br>alert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin</p><p>})</p><h2 id="jquery对文本框只读状态与可读状态的相互转化"><a href="#jquery对文本框只读状态与可读状态的相互转化" class="headerlink" title="jquery对文本框只读状态与可读状态的相互转化"></a>jquery对文本框只读状态与可读状态的相互转化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).removeAttr(<span class="string">'Readonly'</span>);</span><br><span class="line">$(<span class="string">'input'</span>).attr(<span class="string">'Readonly'</span>,<span class="string">'true'</span>);</span><br></pre></td></tr></table></figure><h2 id="js-jquery实现密码框输入聚焦，失焦问题"><a href="#js-jquery实现密码框输入聚焦，失焦问题" class="headerlink" title="js/jquery实现密码框输入聚焦，失焦问题"></a>js/jquery实现密码框输入聚焦，失焦问题</h2><p><strong>js实现方法：</strong><br>html代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">"i_input"</span> type=<span class="string">"text"</span> value=<span class="string">'会员卡号/手机号'</span>  /&gt;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oIpt = <span class="built_in">document</span>.getElementById(<span class="string">"i_input"</span>);</span><br><span class="line"> <span class="keyword">if</span>(oIpt.value == <span class="string">"会员卡号/手机号"</span>)&#123;</span><br><span class="line"> oIpt.style.color = <span class="string">"#888"</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> oIpt.style.color = <span class="string">"#000"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> oIpt.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.value == <span class="string">"会员卡号/手机号"</span>)&#123;</span><br><span class="line">  <span class="keyword">this</span>.value=<span class="string">""</span>;</span><br><span class="line">  <span class="keyword">this</span>.style.color = <span class="string">"#000"</span>;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">"password"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.style.color = <span class="string">"#000"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> oIpt.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.value == <span class="string">""</span>)&#123;</span><br><span class="line">  <span class="keyword">this</span>.value=<span class="string">"会员卡号/手机号"</span>;</span><br><span class="line">  <span class="keyword">this</span>.style.color = <span class="string">"#888"</span>;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">"text"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jquery实现方法:</strong><br>html代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span>  <span class="class"><span class="keyword">class</span></span>=<span class="string">"oldpsw"</span> id=<span class="string">"showPwd"</span> value=<span class="string">"请输入您的注册密码"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"password"</span> name=<span class="string">"psw"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"oldpsw"</span> id=<span class="string">"password"</span> value=<span class="string">""</span> style=<span class="string">"display:none;"</span>/&gt;</span><br></pre></td></tr></table></figure><p>jquery代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#showPwd"</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text_value=$(<span class="keyword">this</span>).val();</span><br><span class="line">    <span class="keyword">if</span> (text_value ==<span class="string">'请输入您的注册密码'</span>) &#123;</span><br><span class="line">    $(<span class="string">"#showPwd"</span>).hide();</span><br><span class="line">    $(<span class="string">"#password"</span>).show().focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#password"</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text_value = $(<span class="keyword">this</span>).val();</span><br><span class="line">    <span class="keyword">if</span> (text_value == <span class="string">""</span>) &#123;</span><br><span class="line">        $(<span class="string">"#showPwd"</span>).show();</span><br><span class="line">        $(<span class="string">"#password"</span>).hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculateDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> weeks = [<span class="string">"日"</span>,<span class="string">"一"</span>,<span class="string">"二"</span>,<span class="string">"三"</span>,<span class="string">"四"</span>,<span class="string">"五"</span>,<span class="string">"六"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> date.getFullYear()+<span class="string">"年"</span>+(date.getMonth()+<span class="number">1</span>)+<span class="string">"月"</span>+</span><br><span class="line"></span><br><span class="line">      date.getDate()+<span class="string">"日 星期"</span>+weeks[date.getDay()];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#dateSpan"</span>).html(calculateDate());</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="时间倒计时（固定倒计时的结束时间）"><a href="#时间倒计时（固定倒计时的结束时间）" class="headerlink" title="时间倒计时（固定倒计时的结束时间）"></a>时间倒计时（固定倒计时的结束时间）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> endtime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Jan 18, 2015 23:50:00"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> nowtime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nowtime &gt;= endtime) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"_lefttime"</span>).innerHTML = <span class="string">"倒计时间结束"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> leftsecond = <span class="built_in">parseInt</span>((endtime.getTime() - nowtime.getTime()) / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftsecond &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        leftsecond = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __d = <span class="built_in">parseInt</span>(leftsecond / <span class="number">3600</span> / <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    __h = <span class="built_in">parseInt</span>((leftsecond / <span class="number">3600</span>) % <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">    __m = <span class="built_in">parseInt</span>((leftsecond / <span class="number">60</span>) % <span class="number">60</span>); </span><br><span class="line"></span><br><span class="line">    __s = <span class="built_in">parseInt</span>(leftsecond % <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"_lefttime"</span>).innerHTML = __d + <span class="string">"天"</span> + __h + <span class="string">"小时"</span> + __m + <span class="string">"分"</span> + __s + <span class="string">"秒"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">countdown();</span><br><span class="line"></span><br><span class="line">setInterval(countdown, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="10秒倒计时跳转"><a href="#10秒倒计时跳转" class="headerlink" title="10秒倒计时跳转"></a>10秒倒计时跳转</h2><p>html代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"showtimes"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设定倒数秒数  </span></span><br><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//显示倒数秒数  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"></span><br><span class="line">    t -= <span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'showtimes'</span>).innerHTML= t;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;  </span><br><span class="line"></span><br><span class="line">        location.href=<span class="string">'error404.asp'</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//每秒执行一次,showTime()  </span></span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="string">"showTime()"</span>,<span class="number">1000</span>);  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//执行showTime()  </span></span><br><span class="line">showTime();</span><br></pre></td></tr></table></figure><h2 id="判断浏览器的简单有效方法"><a href="#判断浏览器的简单有效方法" class="headerlink" title="判断浏览器的简单有效方法"></a>判断浏览器的简单有效方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInternet</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">if</span>(navigator.userAgent.indexOf(<span class="string">"MSIE"</span>)&gt;<span class="number">0</span>) &#123;    </span><br><span class="line">      <span class="keyword">return</span> <span class="string">"MSIE"</span>;       <span class="comment">//IE浏览器  </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isFirefox=navigator.userAgent.indexOf(<span class="string">"Firefox"</span>)&gt;<span class="number">0</span>)&#123;    </span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Firefox"</span>;     <span class="comment">//Firefox浏览器  </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isSafari=navigator.userAgent.indexOf(<span class="string">"Safari"</span>)&gt;<span class="number">0</span>) &#123;    </span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Safari"</span>;      <span class="comment">//Safan浏览器  </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isCamino=navigator.userAgent.indexOf(<span class="string">"Camino"</span>)&gt;<span class="number">0</span>)&#123;    </span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Camino"</span>;   <span class="comment">//Camino浏览器  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(isMozilla=navigator.userAgent.indexOf(<span class="string">"Gecko/"</span>)&gt;<span class="number">0</span>)&#123;    </span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Gecko"</span>;    <span class="comment">//Gecko浏览器  </span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="每隔0-1s改变图片的路径"><a href="#每隔0-1s改变图片的路径" class="headerlink" title="每隔0.1s改变图片的路径"></a>每隔0.1s改变图片的路径</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"tt"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">chagesimagesrc</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"tt"</span>).childNodes[<span class="number">0</span>].src=<span class="string">"images/"</span>+t+<span class="string">".jpg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                    chagesimagesrc(t);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;)(i+<span class="number">1</span>),i*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="点击某个div区域之外，隐藏该div"><a href="#点击某个div区域之外，隐藏该div" class="headerlink" title="点击某个div区域之外，隐藏该div"></a>点击某个div区域之外，隐藏该div</h2><p>一般写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = $(e.target);</span><br><span class="line">    <span class="keyword">if</span>(target.closest(<span class="string">".city_box,#city_select a.selected"</span>).length == <span class="number">0</span>)&#123;</span><br><span class="line">    $(<span class="string">".city_box"</span>).hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更全的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _con = $(<span class="string">' 目标区域 '</span>);   <span class="comment">// 设置目标区域</span></span><br><span class="line">  <span class="keyword">if</span>(!_con.is(e.target) &amp;&amp; _con.has(e.target).length === <span class="number">0</span>)&#123; <span class="comment">// Mark 1</span></span><br><span class="line">    some code...   <span class="comment">// 功能代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* Mark 1 的原理：</span></span><br><span class="line"><span class="comment">判断点击事件发生在区域外的条件是：</span></span><br><span class="line"><span class="comment">1. 点击事件的对象不是目标区域本身</span></span><br><span class="line"><span class="comment">2. 事件对象同时也不是目标区域的子元素</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="js获取某年某月的哪些天是周六和周日"><a href="#js获取某年某月的哪些天是周六和周日" class="headerlink" title="js获取某年某月的哪些天是周六和周日"></a>js获取某年某月的哪些天是周六和周日</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"text"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params">y,m</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tempTime = <span class="keyword">new</span> <span class="built_in">Date</span>(y,m,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> saturday = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> sunday = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=tempTime.getDate();i++)&#123;</span><br><span class="line">        time.setFullYear(y,m<span class="number">-1</span>,i);</span><br><span class="line">        <span class="keyword">var</span> day = time.getDay();</span><br><span class="line">        <span class="keyword">if</span>(day == <span class="number">6</span>)&#123;</span><br><span class="line">            saturday.push(i);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(day == <span class="number">0</span>)&#123;</span><br><span class="line">            sunday.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> text = y+<span class="string">"年"</span>+m+<span class="string">"月份"</span>+<span class="string">"&lt;br /&gt;"</span></span><br><span class="line">                +<span class="string">"周六："</span>+saturday.toString()+<span class="string">"&lt;br /&gt;"</span></span><br><span class="line">                +<span class="string">"周日："</span>+sunday.toString();</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).innerHTML = text;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">time(<span class="number">2014</span>,<span class="number">7</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何在手机上禁止浏览器的网页滚动"><a href="#如何在手机上禁止浏览器的网页滚动" class="headerlink" title="如何在手机上禁止浏览器的网页滚动"></a>如何在手机上禁止浏览器的网页滚动</h2><p>方法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ontouchmove=<span class="string">"event.preventDefault()"</span> &gt;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    event.preventDefault();</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="改变type-file默认样式，”浏览”等字体"><a href="#改变type-file默认样式，”浏览”等字体" class="headerlink" title="改变type=file默认样式，”浏览”等字体"></a>改变type=file默认样式，”浏览”等字体</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"browsefile"</span> style=<span class="string">"visibility:hidden"</span> onchange=<span class="string">"filepath.value=this.value"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"button"</span> id=<span class="string">"filebutton"</span> value=<span class="string">""</span> onclick=<span class="string">"browsefile.click()"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"textfield"</span> id=<span class="string">"filepath"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="js判断变量是否未定义的代码"><a href="#js判断变量是否未定义的代码" class="headerlink" title="js判断变量是否未定义的代码"></a>js判断变量是否未定义的代码</h2><p>一般如果变量通过var声明，但是并未初始化的时候，变量的值为undefined，而未定义的变量则需要通过 “typeof 变量”的形式来判断，否则会发生错误。<br>实际应用：<br>variable有的页面我们不定义,但有的页面定义了，就可以需要这样的判断方法，没有定义的就不执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"undefined"</span> != <span class="keyword">typeof</span> variable)&#123; </span><br><span class="line">    <span class="keyword">if</span>(variable==<span class="string">"abc"</span>)&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'成功'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="针对IE6，7的hack，该怎么写"><a href="#针对IE6，7的hack，该怎么写" class="headerlink" title="针对IE6，7的hack，该怎么写"></a>针对IE6，7的hack，该怎么写</h2><p>你可能会这么回答：使用<code>“&gt;”，“_”，“*”</code>等各种各样的符号来写hack。是的，这样做没错，但是需要记住每个符号分别被哪些浏览器识别，并且如果写的太乱将造成代码 阅读起来十分困难。学习CSS必须抱有一种质疑精神，有没有一种hack方法可以不写这些乱七八糟的符号，并且代码易维护易读呢？我们可以看看好搜首页是怎么做的：在页面顶端有这样一句话：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>/&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">7</span> ]&gt;<span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"ie6"</span>&gt;</span><span class="tag">&lt;<span class="name">![endif]--</span>&gt;</span></span></span><br><span class="line">&lt;!--[if IE 7 ]&gt;&lt;html class="ie7"&gt;&lt;![endif]--&gt;</span><br><span class="line">&lt;!--[if IE 8 ]&gt;&lt;html class="ie8"&gt;&lt;![endif]--&gt;</span><br><span class="line">&lt;!--[if IE 9 ]&gt;&lt;html class="ie9"&gt;&lt;![endif]--&gt;</span><br><span class="line">&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;&lt;html class="w3c"&gt;&lt;!--&lt;![endif]--&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>在页面的CSS中，会看到这样的规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.ie7 #hd_usernav:before, .ie8 #hd_usernav:before &#123;</span><br><span class="line">    display: none</span><br><span class="line">&#125;</span><br><span class="line">.ie6 .skin_no #hd_nav li, .ie7 .skin_no #hd_nav li, .ie8 .skin_no #hd_nav li &#123;</span><br><span class="line">    border-right-color: #c5c5c5</span><br><span class="line">&#125;</span><br><span class="line">.ie6 .skin_no #hd_nav a, .ie7 .skin_no #hd_nav a, .ie8 .skin_no #hd_nav a &#123;</span><br><span class="line">    color: #c5c5c5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="行内级元素可以设置宽高吗？有哪些？"><a href="#行内级元素可以设置宽高吗？有哪些？" class="headerlink" title="行内级元素可以设置宽高吗？有哪些？"></a>行内级元素可以设置宽高吗？有哪些？</h2><p>在面试时，当被问到行内级元素可否设置宽高时，根据我们的经验往往会回答不能。但是这样往往着了面试官的道，因为有一些特殊的行内元素，比如<code>img，input，select</code>等等，是可以被设置宽高的。一个内容不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为<code>置换元素</code>。比如img是一个置换元素，当不对它设置宽高时，它会按照本身的宽高进行显示。所以这个问题的正确答案应该是<code>置换元素可以，非置换元素不可以</code>。</p><h2 id="js动态创建css样式添加到head内"><a href="#js动态创建css样式添加到head内" class="headerlink" title="js动态创建css样式添加到head内"></a>js动态创建css样式添加到head内</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCSS</span>(<span class="params">cssText</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">    style.type = <span class="string">'text/css'</span>; </span><br><span class="line">    <span class="keyword">if</span>(style.styleSheet)&#123; <span class="comment">//IE</span></span><br><span class="line">        <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123; </span><br><span class="line">                <span class="comment">//防止IE中stylesheet数量超过限制而发生错误</span></span><br><span class="line">                style.styleSheet.cssText = cssText;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前styleSheet还不能用，则放到异步中则行</span></span><br><span class="line">        <span class="keyword">if</span>(style.styleSheet.disabled)&#123;</span><br><span class="line">            setTimeout(func,<span class="number">10</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            func();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; <span class="comment">//w3c</span></span><br><span class="line">        <span class="comment">//w3c浏览器中只要创建文本节点插入到style元素中就行了</span></span><br><span class="line">        <span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(cssText);</span><br><span class="line">        style.appendChild(textNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把创建的style元素插入到head中</span></span><br><span class="line">    head.appendChild(style);     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">addCSS(<span class="string">'#demo&#123; height: 30px; background:#f00;&#125;'</span>);</span><br></pre></td></tr></table></figure><p>在IE8以及其低版本浏览器下，IE独有属性styleSheet.cssText。所以一般的兼容简单写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">style.type = <span class="string">"text/css"</span>;</span><br><span class="line"><span class="keyword">if</span> (style.styleSheet) &#123; <span class="comment">//IE</span></span><br><span class="line">    style.styleSheet.cssText = <span class="string">'/*..css content here..*/'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//w3c</span></span><br><span class="line">    style.innerHTML = <span class="string">'/*..css content here..*/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(style);</span><br></pre></td></tr></table></figure><h2 id="form表单提交时设置编码格式"><a href="#form表单提交时设置编码格式" class="headerlink" title="form表单提交时设置编码格式"></a>form表单提交时设置编码格式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form name=<span class="string">"form"</span> method=<span class="string">"post"</span> action=<span class="string">"XXXX"</span> accept-charset=<span class="string">"utf-8"</span>  onsubmit=<span class="string">"document.charset='utf-8';"</span>&gt;  </span><br><span class="line"> <span class="comment">//内容</span></span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="js-加入收藏代码"><a href="#js-加入收藏代码" class="headerlink" title="js 加入收藏代码"></a>js 加入收藏代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFavorite</span>(<span class="params">title, url</span>) </span>&#123;</span><br><span class="line">     url = <span class="built_in">encodeURI</span>(url);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.external.addFavorite(url, title);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.sidebar.addPanel(title, url, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            alert(<span class="string">"加入收藏失败,Ctrl+D进行添加"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    addFavorite(<span class="built_in">document</span>.title,<span class="built_in">window</span>.location);</span><br></pre></td></tr></table></figure><p>打印方法：（整个页面 window.print()）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Printpart</span>(<span class="params">id_str</span>)//<span class="title">id</span>-<span class="title">str</span> 内容中的<span class="title">id</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(id_str);</span><br><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'IFRAME'</span>);</span><br><span class="line"><span class="keyword">var</span> doc = <span class="literal">null</span>;</span><br><span class="line">iframe.setAttribute(<span class="string">'style'</span>, <span class="string">'position:absolute;width:0px;height:0px;left:-500px;top:-500px;'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">doc = iframe.contentWindow.document;</span><br><span class="line">doc.write(<span class="string">'&lt;div&gt;'</span> + el.innerHTML + <span class="string">'&lt;/div&gt;'</span>);</span><br><span class="line">doc.close();</span><br><span class="line">iframe.contentWindow.focus();</span><br><span class="line">iframe.contentWindow.print();</span><br><span class="line"><span class="keyword">if</span> (navigator.userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考地址：<br><a href="http://www.cnblogs.com/yeminglong/archive/2012/12/03/2799957.html" target="_blank" rel="noopener">http://www.cnblogs.com/yeming…</a><br><a href="http://www.cnblogs.com/jikey/archive/2011/06/22/2087683.html" target="_blank" rel="noopener">http://www.cnblogs.com/jikey/…</a></p><h2 id="js强制手机页面横屏显示"><a href="#js强制手机页面横屏显示" class="headerlink" title="js强制手机页面横屏显示"></a>js强制手机页面横屏显示</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$( <span class="built_in">window</span> ).on( <span class="string">"orientationchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> event </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.orientation==<span class="string">'portrait'</span>) &#123;</span><br><span class="line">        $(<span class="string">'body'</span>).css(<span class="string">'transform'</span>, <span class="string">'rotate(90deg)'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">'body'</span>).css(<span class="string">'transform'</span>, <span class="string">'rotate(0deg)'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">$( <span class="built_in">window</span> ).orientationchange();</span><br></pre></td></tr></table></figure><h2 id="jquery获得select中option的索引"><a href="#jquery获得select中option的索引" class="headerlink" title="jquery获得select中option的索引"></a>jquery获得select中option的索引</h2><p>html代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="class"><span class="keyword">class</span></span>=<span class="string">"select-green"</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">"0"</span>&gt;高级客户经理&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">    &lt;option value="1"&gt;中级客户经理&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br></pre></td></tr></table></figure><p>jquery代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".select-green"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _indx = $(<span class="keyword">this</span>).get(<span class="number">0</span>).selectedIndex;</span><br><span class="line">    $(<span class="string">".selectall .selectCon"</span>).hide();</span><br><span class="line">    $(<span class="string">".selectall .selectCon"</span>).eq(_indx).fadeIn();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注：其中(this).get(0)与(this)[0]等价</p></blockquote><h2 id="获取上传文件的大小"><a href="#获取上传文件的大小" class="headerlink" title="获取上传文件的大小"></a>获取上传文件的大小</h2><p>html代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"filePath"</span> onchange=<span class="string">"getFileSize(this)"</span>/&gt;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//兼容IE9低版本获取文件的大小</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileSize</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> filesize;</span><br><span class="line">    <span class="keyword">if</span>(obj.files)&#123;</span><br><span class="line">        filesize = obj.files[<span class="number">0</span>].size;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> path,fso; </span><br><span class="line">            path = <span class="built_in">document</span>.getElementById(<span class="string">'filePath'</span>).value;</span><br><span class="line">            fso = <span class="keyword">new</span> ActiveXObject(<span class="string">"Scripting.FileSystemObject"</span>); </span><br><span class="line">            filesize = fso.GetFile(path).size; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="comment">//在IE9及低版本浏览器，如果不容许ActiveX控件与页面交互，点击了否，就无法获取size</span></span><br><span class="line">            <span class="built_in">console</span>.log(e.message); <span class="comment">//Automation 服务器不能创建对象</span></span><br><span class="line">            filesize = <span class="string">'error'</span>; <span class="comment">//无法获取</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filesize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="限制上传文件的类型"><a href="#限制上传文件的类型" class="headerlink" title="限制上传文件的类型"></a>限制上传文件的类型</h2><p>如果是高版本浏览器，一般在HTML代码中写就能实现，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span> name=<span class="string">"filePath"</span> accept=<span class="string">".jpg,.jpeg,.doc,.docxs,.pdf"</span>&gt;</span><br></pre></td></tr></table></figure><p>如果限制上传文件为图片类型，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"file"</span> value=<span class="string">"上传"</span> accept=<span class="string">"image/*"</span>/&gt;</span><br></pre></td></tr></table></figure><p>但是在其它低版本浏览器就不管用了，需要js来判断。</p><p>html代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span> id=<span class="string">"filePath"</span> onchange=<span class="string">"limitTypes()"</span>/&gt;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 通过扩展名，检验文件格式。</span></span><br><span class="line"><span class="comment"> *@parma filePath&#123;string&#125; 文件路径</span></span><br><span class="line"><span class="comment"> *@parma acceptFormat&#123;Array&#125; 允许的文件类型</span></span><br><span class="line"><span class="comment"> *@result 返回值&#123;Boolen&#125;：true or false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFormat</span>(<span class="params">filePath,acceptFormat</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> resultBool= <span class="literal">false</span>,</span><br><span class="line">        ex = filePath.substring(filePath.lastIndexOf(<span class="string">'.'</span>) + <span class="number">1</span>);</span><br><span class="line">        ex = ex.toLowerCase();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; acceptFormat.length; i++)&#123;</span><br><span class="line">    　　<span class="keyword">if</span>(acceptFormat[i] == ex)&#123;</span><br><span class="line">            resultBool = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    　　&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultBool;</span><br><span class="line">&#125;;</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">limitTypes</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">document</span>.getElementById(<span class="string">'filePath'</span>);</span><br><span class="line">    <span class="keyword">var</span> path = obj.value;</span><br><span class="line">    <span class="keyword">var</span> result = checkFormat(path,[<span class="string">'bmp'</span>,<span class="string">'jpg'</span>,<span class="string">'jpeg'</span>,<span class="string">'png'</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        alert(<span class="string">'上传类型错误，请重新上传'</span>);</span><br><span class="line">        obj.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机产生lowwer-upper之间的随机数"><a href="#随机产生lowwer-upper之间的随机数" class="headerlink" title="随机产生lowwer - upper之间的随机数"></a>随机产生lowwer - upper之间的随机数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFrom</span>(<span class="params">lower, upper</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> sum = upper - lower + <span class="number">1</span>; <span class="comment">//总数-第一个数+1</span></span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * sum + lower);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="保留后端传递到前端页面的空格"><a href="#保留后端传递到前端页面的空格" class="headerlink" title="保留后端传递到前端页面的空格"></a>保留后端传递到前端页面的空格</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objt = &#123;</span><br><span class="line">        name:<span class="string">' aaaa    这是一个空格多的标签   这是一个空格多的标签'</span></span><br><span class="line">    &#125;</span><br><span class="line">    objt.name = objt.name.replace(<span class="regexp">/\s/g</span>,<span class="string">'&amp;nbsp;'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(objt.name);</span><br></pre></td></tr></table></figure><p>用firebug查看结果：<br><img src="https://segmentfault.com/img/bVRL0V?w=633&amp;h=19" alt="图片描述"></p><h2 id="为什么Image对象的src属性要写在onload事件后面？"><a href="#为什么Image对象的src属性要写在onload事件后面？" class="headerlink" title="为什么Image对象的src属性要写在onload事件后面？"></a>为什么Image对象的src属性要写在onload事件后面？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image=<span class="keyword">new</span> Image();</span><br><span class="line">imgae.onload = funtion;</span><br><span class="line">imgae.src = <span class="string">'url'</span></span><br></pre></td></tr></table></figure><p>js内部是按顺序逐行执行的，可以认为是同步的<br>给imgae赋值src时，去加载图片这个过程是异步的，这个异步过程完成后，如果有onload，则执行onload</p><p>如果先赋值src，那么这个异步过程可能在你赋值onload之前就完成了（比如图片缓存，或者是js由于某些原因被阻塞了），那么onload就不会执行<br>反之，js同步执行确定onload赋值完成后才会赋值src,可以保证这个异步过程在onload赋值完成后才开始进行，也就保证了onload一定会被执行到</p><h2 id="跨浏览器添加事件"><a href="#跨浏览器添加事件" class="headerlink" title="跨浏览器添加事件"></a>跨浏览器添加事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨浏览器添加事件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">obj,type,fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line">            obj.addEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123;<span class="comment">//IE</span></span><br><span class="line">            obj.attchEvent(<span class="string">'on'</span>+type,fn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="跨浏览器移除事件"><a href="#跨浏览器移除事件" class="headerlink" title="跨浏览器移除事件"></a>跨浏览器移除事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨浏览器移除事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">obj,type,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.removeEventListener)&#123;</span><br><span class="line">        obj.removeEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.detachEvent)&#123;<span class="comment">//兼容IE</span></span><br><span class="line">        obj.detachEvent(<span class="string">'on'</span>+type,fn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨浏览器阻止默认行为"><a href="#跨浏览器阻止默认行为" class="headerlink" title="跨浏览器阻止默认行为"></a>跨浏览器阻止默认行为</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨浏览器阻止默认行为</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">preDef</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">if</span>(e.preventDefault)&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e.returnValue =<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="跨浏览器获取目标对象"><a href="#跨浏览器获取目标对象" class="headerlink" title="跨浏览器获取目标对象"></a>跨浏览器获取目标对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨浏览器获取目标对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTarget</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ev.target)&#123;<span class="comment">//w3c</span></span><br><span class="line">        <span class="keyword">return</span> ev.target;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.event.srcElement)&#123;<span class="comment">//IE</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.event.srcElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨浏览器获取滚动条位置"><a href="#跨浏览器获取滚动条位置" class="headerlink" title="跨浏览器获取滚动条位置"></a>跨浏览器获取滚动条位置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨浏览器获取滚动条位置，sp == scroll position</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getSP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            top: <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop,</span><br><span class="line">            left : <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="跨浏览器获取可视窗口大小"><a href="#跨浏览器获取可视窗口大小" class="headerlink" title="跨浏览器获取可视窗口大小"></a>跨浏览器获取可视窗口大小</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨浏览器获取可视窗口大小</span></span><br><span class="line">          <span class="function"><span class="keyword">function</span>  <span class="title">getWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.innerWidth !=<span class="string">'undefined'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>&#123;</span><br><span class="line">                    width : <span class="built_in">window</span>.innerWidth,</span><br><span class="line">                    height : <span class="built_in">window</span>.innerHeight</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    width : <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">                    height : <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="js-对象冒充"><a href="#js-对象冒充" class="headerlink" title="js 对象冒充"></a>js 对象冒充</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type = <span class="string">'text/javascript'</span>&gt;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name , age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"name : "</span>+ <span class="keyword">this</span>.name + <span class="string">" age: "</span>+<span class="keyword">this</span>.age ;</span><br><span class="line">        &#125; ;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>() ;<span class="comment">//可以简化为Object()</span></span><br><span class="line">    Person.call(o , <span class="string">"zhangsan"</span> , <span class="number">20</span>) ;</span><br><span class="line">    <span class="built_in">console</span>.log(o.say() );<span class="comment">//name : zhangsan age: 20 </span></span><br><span class="line"> </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="js-异步加载和同步加载"><a href="#js-异步加载和同步加载" class="headerlink" title="js 异步加载和同步加载"></a>js 异步加载和同步加载</h2><p>异步加载也叫非阻塞模式加载，浏览器在下载js的同时，同时还会执行后续的页面处理。<br>在script标签内，用js创建一个script元素并插入到document中，这种就是异步加载js文件了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);    </span><br><span class="line">    s.type = <span class="string">'text/javascript'</span>;     </span><br><span class="line">    s.async = <span class="literal">true</span>;    </span><br><span class="line">    s.src = <span class="string">'http://yourdomain.com/script.js'</span>;    </span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];    </span><br><span class="line">     x.parentNode.insertBefore(s, x); </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong>同步加载</strong></p><p>平常默认用的都是同步加载。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://yourdomain.com/script.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>同步模式又称阻塞模式，会阻止流览器的后续处理。停止了后续的文件的解析，执行，如图像的渲染。浏览器之所以会采用同步模式，是因为加载的js文件中有对dom的操作，重定向，输出document等默认行为，所以同步才是最安全的。</p><p>通常会把要加载的js放到body结束标签之前，使得js可在页面最后加载，尽量减少阻塞页面的渲染。这样可以先让页面显示出来。</p><p>同步加载流程是瀑布模型，异步加载流程是并发模型。</p><h2 id="js获取屏幕坐标"><a href="#js获取屏幕坐标" class="headerlink" title="js获取屏幕坐标"></a>js获取屏幕坐标</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=gb2312"</span> /&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=EmulateIE7"</span>/&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"auther"</span> content=<span class="string">"fq"</span> /&gt;</span><br><span class="line">    &lt;title&gt;获取鼠标坐标&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mousePosition</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ev.pageX || ev.pageY)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">x</span>:ev.pageX, <span class="attr">y</span>:ev.pageY&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            x:ev.clientX + <span class="built_in">document</span>.body.scrollLeft - <span class="built_in">document</span>.body.clientLeft,</span><br><span class="line">            y:ev.clientY + <span class="built_in">document</span>.body.scrollTop - <span class="built_in">document</span>.body.clientTop</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mouseMove</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> mousePos = mousePosition(ev);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'xxx'</span>).value = mousePos.x;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'yyy'</span>).value = mousePos.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.onmousemove = mouseMove;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">X:&lt;input id="xxx" type="text" /</span>&gt; Y:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"yyy"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>注释：<br>1.<code>documentElement</code> 属性可返回文档的根节点。<br>2.<code>scrollTop()</code> 为滚动条向下移动的距离<br>3.<code>document.documentElement.scrollTop</code> 指的是滚动条的垂直坐标<br>4.<code>document.documentElement.clientHeight</code> 指的是浏览器可见区域高度</p><p>DTD已声明的情况下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br></pre></td></tr></table></figure><p>如果在页面中添加这行标记的话</p><h3 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.clientWidth ==&gt; BODY对象宽度</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight ==&gt; BODY对象高度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth ==&gt; 可见区域宽度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; 可见区域高度</span><br></pre></td></tr></table></figure><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.scrollHeight ==&gt; 浏览器所有内容高度</span><br><span class="line"><span class="built_in">document</span>.body.scrollHeight ==&gt; 浏览器所有内容高度</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop ==&gt; 浏览器滚动部分高度</span><br><span class="line"><span class="built_in">document</span>.body.scrollTop ==&gt;始终为<span class="number">0</span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt;浏览器可视部分高度</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight ==&gt; 浏览器所有内容高度</span><br></pre></td></tr></table></figure><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.scrollHeight ==&gt; 浏览器所有内容高度</span><br><span class="line"><span class="built_in">document</span>.body.scrollHeight ==&gt; 浏览器所有内容高度</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop==&gt; 始终为<span class="number">0</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop==&gt;浏览器滚动部分高度</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight ==&gt; 浏览器可视部分高度</span><br><span class="line"><span class="built_in">document</span>.body.clientHeight ==&gt; 浏览器所有内容高度</span><br></pre></td></tr></table></figure><p>浏览器所有内容高度即浏览器整个框架的高度，包括滚动条卷去部分+可视部分+底部隐藏部分的高度总和</p><p>浏览器滚动部分高度即滚动条卷去部分高度即可视顶端距离整个对象顶端的高度。</p><p>综上</p><p>1、document.documentElement.scrollTop和document.body.scrollTop始终有一个为0，所以可以用这两个的和来求scrollTop</p><p>2、scrollHeight、clientHeight 在DTD已声明的情况下用documentElement，未声明的情况下用body</p><blockquote><p>clientHeight在IE和FF下，该属性没什么差别，都是指浏览器的可视区域，即除去浏览器的那些工具栏状态栏剩下的页面展示空间的高度。</p></blockquote><h2 id="PageX和clientX"><a href="#PageX和clientX" class="headerlink" title="PageX和clientX"></a>PageX和clientX</h2><p><code>PageX</code>:鼠标在页面上的位置,从页面左上角开始,即是以页面为参考点,不随滑动条移动而变化</p><p><code>clientX</code>:鼠标在页面上可视区域的位置,从浏览器可视区域左上角开始,即是以浏览器滑动条此刻的滑动到的位置为参考点,随滑动条移动 而变化.</p><p>可是悲剧的是,<code>PageX</code>只有<code>FF</code>特有,<code>IE</code>则没有这个，所以在<code>IE</code>下使用这个：</p><p><code>PageY=clientY+scrollTop-clientTop;</code>(只讨论Y轴,X轴同理,下同)</p><p><code>scrollTop</code>代表的是被浏览器滑动条滚过的长度</p><p><code>offsetX</code>:IE特有,鼠标相比较于触发事件的元素的位置,以元素盒子模型的内容区域的左上角为参考点,如果有boder,可能出现负值</p><p>只有<code>clientX和screenX</code> 皆大欢喜是W3C标准.其他的,都纠结了.<br>最给力的是，chrome和safari一条龙通杀!完全支持所有属性<br><img src="https://segmentfault.com/img/bVSrnb?w=569&amp;h=336" alt="图片描述"></p><h2 id="js拖拽效果"><a href="#js拖拽效果" class="headerlink" title="js拖拽效果"></a>js拖拽效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zn-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">    &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        #login&#123;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            border: <span class="number">1</span>px solid black;</span><br><span class="line">            position: relative;</span><br><span class="line">            top:<span class="number">200</span>px;</span><br><span class="line">            left: <span class="number">200</span>px;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"login"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"login"</span>);</span><br><span class="line">    oDiv.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;<span class="comment">//window.event兼容IE,当事件发生时有效</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> diffX = e.clientX - oDiv.offsetLeft;<span class="comment">//获取鼠标点击的位置到所选对象的边框的水平距离</span></span><br><span class="line">        <span class="keyword">var</span> diffY = e.clientY - oDiv.offsetTop;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; <span class="comment">//需设为document对象才能作用于整个文档</span></span><br><span class="line">            <span class="keyword">var</span> e = e||<span class="built_in">window</span>.event;</span><br><span class="line">            oDiv.style.left = e.clientX - diffX + <span class="string">'px'</span>;<span class="comment">//style.left表示所选对象的边框到浏览器左侧距离</span></span><br><span class="line">            oDiv.style.top = e.clientY -diffY + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;<span class="comment">//清除鼠标释放时的对象移动方法</span></span><br><span class="line">            <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt; </span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><code>offsetTop</code> 返回的是数字，而 <code>style.top</code> 返回的是字符串，除了数字外还带有单位：<code>px</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0171.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;web前端开发常用代码整理&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://m.iskei.cn/categories/js/"/>
    
    
      <category term="js" scheme="http://m.iskei.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS特效-tab选项卡列表切换</title>
    <link href="http://m.iskei.cn/blog/59893.html"/>
    <id>http://m.iskei.cn/blog/59893.html</id>
    <published>2018-04-08T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.498Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0170.jpg" alt="image"><br>tab选项卡列表切换<br><a id="more"></a></p><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表切换效果代码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/tab.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"up"</span> <span class="attr">id</span>=<span class="string">"two1"</span> <span class="attr">onmouseover</span>=<span class="string">"setContentTab('two',1,4)"</span>&gt;</span>热点新闻<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span> <span class="attr">id</span>=<span class="string">"con_two_1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[新闻热点]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>点点妙：欢庆“十一”送祝福<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[新闻热点]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>点点妙携手移动端APP 开创棋牌游戏新模<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[新闻热点]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>看棋牌大亨如何颠覆快播江湖<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[新闻热点]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>棋牌行业：解密点点妙合作内幕 分成竟高达<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two2"</span> <span class="attr">onmouseover</span>=<span class="string">"setContentTab('two',2,4)"</span>&gt;</span>合作播报<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con_two_2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[合作播报]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>收银妹代理棋牌游戏 成功晋级游戏女老板2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[合作播报]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>收银妹代理棋牌游戏 成功晋级游戏女老板1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[合作播报]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>IT精英放弃高薪只因想“玩”游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[合作播报]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>“干爹”扶持，乐猴棋牌开疆拓土<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two3"</span> <span class="attr">onmouseover</span>=<span class="string">"setContentTab('two',3,4)"</span>&gt;</span>行业咨询<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con_two_3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[行业咨询]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>收银妹代理棋牌游戏 成功晋级游戏女老板3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[行业咨询]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>紫金阁：代理棋牌游戏如何能稳赚不亏？<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[行业咨询]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>你知道吗？“紫金阁”竟然升级做了“小三”<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[行业咨询]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>都市娱乐赚钱首选 棋牌游戏代理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two4"</span> <span class="attr">onmouseover</span>=<span class="string">"setContentTab('two',4,4)"</span>&gt;</span>运营攻略<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con_two_4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[运营攻略]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>加盟网络棋牌游戏的注意事项<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[运营攻略]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>奇葩：一款可以自动赚钱的棋牌游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[运营攻略]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>代理棋牌游戏 紫金阁支招稳赚不亏<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_menu"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>[运营攻略]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tab_title"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>棋牌行业内幕：什么时候代理棋牌游戏最合适<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2014-09-05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">setContentTab</span>(<span class="params">name, curr, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> menu = <span class="built_in">document</span>.getElementById(name + i);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">"con_"</span> + name + <span class="string">"_"</span> + i);</span></span><br><span class="line"><span class="javascript">        menu.className = i == curr ? <span class="string">"up"</span> : <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i == curr) &#123;</span></span><br><span class="line"><span class="javascript">            cont.style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            cont.style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="tab-css"><a href="#tab-css" class="headerlink" title="tab.css"></a>tab.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS Document */</span></span><br><span class="line"><span class="selector-id">#tab</span> &#123; <span class="attribute">width</span>:<span class="number">412px</span>; <span class="attribute">height</span>:<span class="number">216px</span>; <span class="attribute">position</span>:relative;<span class="attribute">margin</span>:<span class="number">40px</span> auto <span class="number">0</span> auto;&#125;</span><br><span class="line"><span class="comment">/*设置容器高宽等*/</span></span><br><span class="line"><span class="selector-tag">html</span> &gt; <span class="selector-tag">body</span> <span class="selector-id">#tab</span> &#123; <span class="attribute">width</span>:<span class="number">412px</span>;&#125;</span><br><span class="line"><span class="comment">/*兼容IE6:IE6下宽度不够*/</span></span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-tag">div</span> &#123; <span class="attribute">position</span>:absolute; <span class="attribute">top</span>:<span class="number">30px</span>; <span class="attribute">left</span>:<span class="number">0</span>; <span class="attribute">width</span>:<span class="number">412px</span>; <span class="attribute">height</span>:<span class="number">186px</span>;&#125;</span><br><span class="line"><span class="comment">/*设置容器高宽等*/</span></span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-tag">div</span> &#123; <span class="attribute">display</span>:none;&#125;</span><br><span class="line"><span class="comment">/*设置容器默认隐藏:不用ID是因为下面将利用class来控制容器显示,而class优先级低于id选择器*/</span></span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-class">.block</span> &#123; <span class="attribute">display</span>:block;&#125;</span><br><span class="line"><span class="comment">/*选中的容器*/</span></span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-tag">h3</span> &#123; <span class="attribute">float</span>:left; <span class="attribute">width</span>:<span class="number">103px</span>; <span class="attribute">height</span>:<span class="number">30px</span>; <span class="attribute">line-height</span>:<span class="number">30px</span>; <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>; <span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">cursor</span>:pointer; <span class="attribute">background-color</span>:<span class="number">#c5c5c5</span>; <span class="attribute">text-align</span>:center; <span class="attribute">color</span>:<span class="number">#5a5a5a</span>; <span class="attribute">font-family</span>:Microsoft YaHei;<span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="comment">/*默认标题样式*/</span></span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-class">.up</span> &#123; <span class="attribute">background</span>:<span class="number">#0292cf</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="comment">/*选中的标题样式*/</span></span><br><span class="line"><span class="comment">/*修饰列表内容*/</span></span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-tag">ul</span> &#123; <span class="attribute">list-style</span>:none; <span class="attribute">padding</span>:<span class="number">0</span>; <span class="attribute">height</span>:<span class="number">186px</span>; <span class="attribute">margin-top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-tag">li</span> &#123; <span class="attribute">margin-left</span>:<span class="number">10px</span>; <span class="attribute">margin-right</span>:<span class="number">10px</span>; <span class="attribute">border-bottom</span>:<span class="number">1px</span> dotted <span class="number">#c6c6c6</span>; <span class="attribute">height</span>:<span class="number">22px</span>; <span class="attribute">padding-top</span>:<span class="number">23px</span>; <span class="attribute">overflow</span>:hidden; <span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123; <span class="attribute">display</span>:inline; <span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">text-decoration</span>:none; <span class="attribute">text-indent</span>:<span class="number">10px</span>; <span class="attribute">margin-right</span>:<span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-id">#tab</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123; <span class="attribute">display</span>:block; <span class="attribute">float</span>:right; <span class="attribute">margin-right</span>:<span class="number">5px</span>; <span class="attribute">color</span>: <span class="number">#bdacb3</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.tab_title</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>: <span class="number">#5a5a5a</span>; <span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.tab_title</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>:<span class="number">#5a5a5a</span>; <span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.tab_title</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>:<span class="number">#5a5a5a</span>; <span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.tab_title</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>:<span class="number">#5a5a5a</span>; <span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.tab_menu</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>:<span class="number">#6464d5</span>; <span class="attribute">text-decoration</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.tab_menu</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">color</span>:<span class="number">#8888e0</span>; <span class="attribute">text-decoration</span>:underline;&#125;</span><br></pre></td></tr></table></figure><p>参考: <a href="http://www.lanrenzhijia.com/tab" target="_blank" rel="noopener">http://www.lanrenzhijia.com/tab</a></p><p>​          <a href="https://www.cnblogs.com/cheryshi/p/7903918.html" target="_blank" rel="noopener">https://www.cnblogs.com/cheryshi/p/7903918.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0170.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;tab选项卡列表切换&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://m.iskei.cn/categories/js/"/>
    
    
      <category term="js" scheme="http://m.iskei.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Spring定时任务之Quartz</title>
    <link href="http://m.iskei.cn/blog/6441.html"/>
    <id>http://m.iskei.cn/blog/6441.html</id>
    <published>2018-04-06T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.502Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0169.jpg" alt="image"><br>Spring中的定时任务功能，最好的办法当然是使用Quartz来实现。我使用的是Maven来管理项目<br><a id="more"></a></p><h3 id="需要的Jar包"><a href="#需要的Jar包" class="headerlink" title="需要的Jar包"></a>需要的Jar包</h3><p><code>quartz-1.8.5.jar  commons-logging.jar  spring-core-3.0.5.RELEASE.jar  spring-beans-3.0.5.RELEASE.jar  spring-context-3.0.5.RELEASE.jar  spring-context-support-3.0.5.RELEASE.jar  spring-asm-3.0.5.RELEASE.jar  spring-expression-3.0.5.RELEASE.jar  spring.transaction-3.0.5.RELEASE.jar  spring-web-3.0.5.RELEASE.jar</code> </p><h3 id="Maven的pom-xml的配置"><a href="#Maven的pom-xml的配置" class="headerlink" title="Maven的pom.xml的配置"></a>Maven的pom.xml的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>QtzTest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>QtzTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>3.0.5.RELEASE<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.4.v20111024<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>10<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">webApp</span>&gt;</span>  </span><br><span class="line">                        <span class="tag">&lt;<span class="name">contextPath</span>&gt;</span>/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">contextPath</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">webApp</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在Spring中使用Quartz有两种方式实现"><a href="#在Spring中使用Quartz有两种方式实现" class="headerlink" title="在Spring中使用Quartz有两种方式实现"></a>在Spring中使用Quartz有两种方式实现</h3><p>第一种是任务类继承QuartzJobBean</p><p>第二种则是在配置文件里定义任务类和要执行的方法，类和方法仍然是普通类。</p><p>很显然，第二种方式远比第一种方式来的灵活。</p><h4 id="第一种方式的JAVA代码："><a href="#第一种方式的JAVA代码：" class="headerlink" title="第一种方式的JAVA代码："></a>第一种方式的JAVA代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ncs.hj;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringQtz</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;  </span><br><span class="line">        System.out.println();  </span><br><span class="line">        <span class="keyword">long</span> ms = System.currentTimeMillis();  </span><br><span class="line">        System.out.println(<span class="string">"\t\t"</span> + <span class="keyword">new</span> Date(ms));  </span><br><span class="line">        System.out.println(ms);  </span><br><span class="line">        System.out.println(<span class="string">"("</span> + counter++ + <span class="string">")"</span>);  </span><br><span class="line">        String s = (String) context.getMergedJobDataMap().get(<span class="string">"service"</span>);  </span><br><span class="line">        System.out.println(s);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种方式的JAVA代码："><a href="#第二种方式的JAVA代码：" class="headerlink" title="第二种方式的JAVA代码："></a>第二种方式的JAVA代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ncs.hj;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringQtz</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">        <span class="keyword">long</span> ms = System.currentTimeMillis();  </span><br><span class="line">        System.out.println(<span class="string">"\t\t"</span> + <span class="keyword">new</span> Date(ms));  </span><br><span class="line">        System.out.println(<span class="string">"("</span> + counter++ + <span class="string">")"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring的配置文件"><a href="#Spring的配置文件" class="headerlink" title="Spring的配置文件"></a>Spring的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!------------ 配置调度程序quartz ，其中配置JobDetail有两种方式--------------&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!--方式一：使用JobDetailBean，任务类必须实现Job接口 --&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myjob"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.JobDetailBean"</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"exampleJob"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobClass"</span> <span class="attr">value</span>=<span class="string">"com.ncs.hj.SpringQtz"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>   </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDataAsMap"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"service"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>simple is the beat<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span>  </span><br><span class="line">;/property&gt;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!--运行时请将方式一注释掉！ --&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!-- 方式二：使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法--&gt;</span>    </span><br><span class="line">    <span class="comment">&lt;!-- 定义目标bean和bean中的方法 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"SpringQtzJob"</span> <span class="attr">class</span>=<span class="string">"com.ncs.hj.SpringQtz"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"SpringQtzJobMethod"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"SpringQtzJob"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span>&gt;</span>  <span class="comment">&lt;!-- 要执行的方法名称 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>execute<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- ======================== 调度触发器 ======================== --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"CronTriggerBean"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"SpringQtzJobMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0/5 * * * * ?"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- ======================== 调度工厂 ======================== --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"SpringJobSchedulerFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"CronTriggerBean"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关于cronExpression表达式"><a href="#关于cronExpression表达式" class="headerlink" title="关于cronExpression表达式"></a>关于cronExpression表达式</h3><p>一个cron表达式由6或7个时间元素组成。它们之间用空格分隔，依次为：[秒][分] [小时][日] [月][星期] [年]</p><table><thead><tr><th>序号</th><th>说明</th><th>是否必填</th><th>允许填写的值</th><th>允许的符号</th></tr></thead><tbody><tr><td>1</td><td>秒</td><td>是</td><td>0－59</td><td>, - * /</td></tr><tr><td>2</td><td>分</td><td>是</td><td>0－59</td><td>, - * /</td></tr><tr><td>3</td><td>小时</td><td>是</td><td>0－23</td><td>, - * /</td></tr><tr><td>4</td><td>日</td><td>是</td><td>1－31</td><td>, - * ? / L W</td></tr><tr><td>5</td><td>月</td><td>是</td><td>1－12 or JAN-DEC</td><td>, - * /</td></tr><tr><td>6</td><td>星期</td><td>是</td><td>1-7 or SUN-SAT</td><td>, - * ? / L #</td></tr><tr><td>7</td><td>年</td><td>否</td><td>1970-2099</td><td>, - * /</td></tr></tbody></table><blockquote><p>其中每个元素值可以是一个确定值(6)，一个连续区间(9-12)，一个间隔时间(0/5)，一个列表(1，3，5)或通配符。</p></blockquote><p>“-”表示可选值范围，如在“小时”上设置“10-12”，表示10点、11点和12点触发。<br>“，”表示可选的多个值，例如在“星期”上设置“MON，WED，FRI”，表示周一，周三和周五触发。<br>“/”用于递增触发，如在“秒”上面设置“5/15”表示从第5秒开始，每15秒触发一次(5，20，35，50)；在“日”上设置“1/3”表示每月1号开始，每三天触发一次。</p><p><em>表示所有值. 如在“分”上设置“</em>”，表示每分钟触发。<br>“？”字符仅出现在“日”和“星期”两个元素上，表示不指定值。当这两个元素之一被指定了值以后，为了避免冲突，需要将另一个元素的值设为“？”</p><p>“月”和“星期”元素上若使用英文字母是不区分大小写的，即MON与mon相同</p><p>“L” 字符仅出现在“日”和“星期”两个元素上，它是单词“last”的缩写。<br>“L”在“日”元素上出现，表示每个月的最后一天；在“星期”元素上出现，表示每个月最后一个星期六。<br>如果在“L”前有具体的内容，它就具有其他的含义了。例如：“6L”在“日”上出现，表示每月的倒数第６天；“5L”在“星期”上出现，表示每月的最后一个星期四</p><blockquote><p>注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题</p></blockquote><p>W表示离指定日期的最近那个工作日(周一至周五).<br>例如在日字段上设置“15W”，表示离每月15号最近的那个工作日触发。<br>如果15号正好是周六，则找最近的周五(14号)触发；如果15号是周未，则找最近的下周一(16号)触发；如果15号正好在工作日(周一至周五)，则就在该天触发。<br>如果指定格式为“1W”，它则表示每月1号往后最近的工作日触发。<br>如果1号正是周六，则将在3号下周一触发。(注，“W”前只能设置具体的数字，不允许区间“-”).</p><blockquote><p>小提示：“L”和 “W”可以一组合使用。如果在“日”上设置“LW”，则表示在本月的最后一个工作日触发；</p></blockquote><p>常用示例: </p><ul><li><p>0 0 12 <em> </em> ? 每天12点触发</p></li><li><p>0 15 10 ? <em> </em> 每天10点15分触发</p></li><li>0 15 10 <em> </em> ? 每天10点15分触发</li><li>0 15 10 <em> </em> ? * 每天10点15分触发</li><li>0 15 10 <em> </em> ? 2005 2005年每天10点15分触发</li><li>0 <em> 14 </em> * ? 每天14点到14点59分之间，每分钟触发一次</li><li>0 0/5 14 <em> </em> ? 每天14点到14点59分之间，每5分钟触发一次（从14点开始触发）</li><li>0 0/5 14，18 <em> </em> ? 每天14点到14点59分及18点到18点59分，每5分钟触发一次（分别从14点、18点开始触发）</li><li>0 0-5 14 <em> </em> ? 每天14点到14点05分之间，每分钟触发</li><li>0 10，44 14 ? 3 WED 3月份每周三14点10分和14点44分触发</li><li>0 15 10 ? * MON-FRI 周一到周五每天10点15分触发</li><li>0 15 10 15 * ? 每月15号10点15分触发</li><li>0 15 10 L * ? 每月最后一天的10点15分触发</li><li>0 15 10 ? * 6L 每月最后一个周五的10点15分触发</li><li>0 15 10 ? * 6L 2002-2005 从2002年到2005年每月一个周五的10点15分触发</li><li>0 15 10 ? * 6#3 每月第三个周五的10点15分触发</li><li>0 0 12 1/5 * ? 每月1号的12点开始触发，每隔5天触发一次</li></ul><h3 id="web-xml里面配置Spring"><a href="#web-xml里面配置Spring" class="headerlink" title="web.xml里面配置Spring"></a>web.xml里面配置Spring</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee  </span></span></span><br><span class="line"><span class="tag"><span class="string">          http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spring-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="加载任务loadTask-java"><a href="#加载任务loadTask-java" class="headerlink" title="加载任务loadTask.java"></a>加载任务loadTask.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imc.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDataMap;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Scheduler;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.CronTriggerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.JobDetailFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imc.entity.assist.CmsTask;</span><br><span class="line"><span class="keyword">import</span> com.imc.manager.assist.CmsTaskMng;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadTask</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统初始加载任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">List&lt;CmsTask&gt;tasks=taskMng.getList();</span><br><span class="line"><span class="keyword">if</span>(tasks.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tasks.size(); i++) &#123;</span><br><span class="line">CmsTask task=tasks.get(i);</span><br><span class="line"><span class="comment">//任务开启状态 执行任务调度</span></span><br><span class="line"><span class="keyword">if</span>(task.getEnable())&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">JobDetailFactoryBean jobDetailFactoryBean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line"><span class="comment">//设置任务名称</span></span><br><span class="line"><span class="keyword">if</span>(StringUtils.isNotBlank(task.getTaskCode()))&#123;</span><br><span class="line">jobDetailFactoryBean.setName(task.getTaskCode());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">UUID uuid=UUID.randomUUID();</span><br><span class="line">jobDetailFactoryBean.setName(uuid.toString());</span><br><span class="line">task.setTaskCode(uuid.toString());</span><br><span class="line">taskMng.update(task, task.getAttr());</span><br><span class="line">&#125;</span><br><span class="line">jobDetailFactoryBean.setJobClass(getClassByTask(task.getJobClass()));</span><br><span class="line"><span class="comment">//任务需要参数attr属性 </span></span><br><span class="line">jobDetailFactoryBean.setJobDataMap(getJobDataMap(task.getAttr()));</span><br><span class="line">jobDetailFactoryBean.setGroup(Scheduler.DEFAULT_GROUP);</span><br><span class="line">jobDetailFactoryBean.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">CronTriggerFactoryBean cronTriggerFactoryBean=<span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">cronTriggerFactoryBean.setBeanName(<span class="string">"cron_"</span> + i);</span><br><span class="line">cronTriggerFactoryBean.setCronExpression(taskMng.getCronExpressionFromDB(task.getId()));</span><br><span class="line">cronTriggerFactoryBean.setGroup(Scheduler.DEFAULT_GROUP);</span><br><span class="line">cronTriggerFactoryBean.setName(<span class="string">"cron_"</span> + i);</span><br><span class="line">cronTriggerFactoryBean.setDescription(<span class="string">""</span>);</span><br><span class="line">cronTriggerFactoryBean.afterPropertiesSet();</span><br><span class="line"><span class="comment">//调度任务</span></span><br><span class="line">scheduler.scheduleJob(jobDetailFactoryBean.getObject(), cronTriggerFactoryBean.getObject()); </span><br><span class="line">&#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 任务参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> JobDataMap <span class="title">getJobDataMap</span><span class="params">(Map&lt;String,String&gt; params)</span></span>&#123;</span><br><span class="line">JobDataMap jdm=<span class="keyword">new</span> JobDataMap();</span><br><span class="line">Set&lt;String&gt;keySet=params.keySet();</span><br><span class="line">Iterator&lt;String&gt;it=keySet.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">String key=it.next();</span><br><span class="line">jdm.put(key, params.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jdm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> taskClassName 任务执行类名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;?&gt; getClassByTask(String taskClassName) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line"><span class="keyword">return</span> Class.forName(taskClassName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CmsTaskMng taskMng;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户同步任务"><a href="#用户同步任务" class="headerlink" title="用户同步任务"></a>用户同步任务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> imc.c6.api.sysuser.SysUserAPI;</span><br><span class="line"><span class="keyword">import</span> imc.c6.api.sysuser.SysUserRoleAPI;</span><br><span class="line"><span class="keyword">import</span> imc.c6.api.sysuser.dto.SysDept;</span><br><span class="line"><span class="keyword">import</span> imc.c6.api.sysuser.dto.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.imc.common.util.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> com.imc.common.web.springmvc.RealPathResolver;</span><br><span class="line"><span class="keyword">import</span> com.imc.core.entity.CmsGroup;</span><br><span class="line"><span class="keyword">import</span> com.imc.core.entity.CmsUser;</span><br><span class="line"><span class="keyword">import</span> com.imc.core.entity.CmsUserExt;</span><br><span class="line"><span class="keyword">import</span> com.imc.core.manager.CmsUserExtMng;</span><br><span class="line"><span class="keyword">import</span> com.imc.core.manager.CmsUserMng;</span><br><span class="line"><span class="keyword">import</span> com.imc.core.manager.UnifiedUserMng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDayJob</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(UserDayJob.class);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String a =PropertyUtils.getPropertyValue(</span><br><span class="line"><span class="keyword">new</span> File(realPathResolver.get(com.imc.cms.Constants.imc_CONFIG)),<span class="string">"cms.usetype"</span>);</span><br><span class="line">String usetype=propertyUtils.getPropertiesString(<span class="string">"cms.usetype"</span>);</span><br><span class="line"><span class="keyword">if</span> ((usetype.equals(<span class="string">"3"</span>))||(usetype.equals(<span class="string">"2"</span>)))&#123;</span><br><span class="line">manager.getMember();</span><br><span class="line">manager.getAdmin();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CmsUserMng manager;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CmsUserExtMng extManager;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">protected</span> PropertyUtils propertyUtils;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RealPathResolver realPathResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件quartz-task-xml"><a href="#配置文件quartz-task-xml" class="headerlink" title="配置文件quartz-task.xml"></a>配置文件quartz-task.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">default-lazy-init</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"executor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"500"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每日任务(内容相关) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"contentDayJob"</span> <span class="attr">class</span>=<span class="string">"com.imc.task.job.ContentDayJob"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"contentDayJobDetail"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"contentDayJob"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"execute"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"contentDayJobTrigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"contentDayJobDetail"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0 0 0 * * ?"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"siteDayJob"</span> <span class="attr">class</span>=<span class="string">"com.imc.task.job.SiteDayJob"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"siteDayJobDetail"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"siteDayJob"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"execute"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"siteDayJobTrigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"siteDayJobDetail"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0 0 0 * * ?"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用户同步任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDayJob"</span> <span class="attr">class</span>=<span class="string">"com.imc.task.job.UserDayJob"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDayJobDetail"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"userDayJob"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"execute"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDayJobTrigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"userDayJobDetail"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"*/5 * * * * ?"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调度器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"scheduler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span> </span><br><span class="line">       <span class="comment">&lt;!-- 通过applicationContextSchedulerContextKey属性配置spring上下文 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"applicationContextSchedulerContextKey"</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>applicationContext<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"contentDayJobTrigger"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"siteDayJobTrigger"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"userDayJobTrigger"</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"taskExecutor"</span> <span class="attr">ref</span>=<span class="string">"executor"</span> /&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--加载数据库任务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loadTask"</span> <span class="attr">class</span>=<span class="string">"com.imc.task.LoadTask"</span> <span class="attr">init-method</span>=<span class="string">"loadTask"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0169.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;Spring中的定时任务功能，最好的办法当然是使用Quartz来实现。我使用的是Maven来管理项目&lt;br&gt;
    
    </summary>
    
      <category term="Quartz" scheme="http://m.iskei.cn/categories/Quartz/"/>
    
    
      <category term="Quartz" scheme="http://m.iskei.cn/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>aJax使用小结</title>
    <link href="http://m.iskei.cn/blog/7931.html"/>
    <id>http://m.iskei.cn/blog/7931.html</id>
    <published>2018-04-04T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0168.jpg" alt="image"><br>aJax使用小结<br><a id="more"></a></p><h3 id="ajax方法参数"><a href="#ajax方法参数" class="headerlink" title="ajax方法参数"></a>ajax方法参数</h3><ol><li>url:<br>要求为String类型的参数，（默认为当前页地址）发送请求的地址。</li><li><p>type:<br>要求为String类型的参数，请求方式（post或get）默认为get。注意其他http请求方法，例如put和delete也可以使用，但仅部分浏览器支持。</p></li><li><p>timeout:<br>要求为Number类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</p></li><li>async: </li></ol><p>要求为Boolean类型的参数，默认设置为true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</p><ol start="5"><li>cache: </li></ol><p>要求为Boolean类型的参数，默认为true（当dataType为script时，默认为false），设置为false将不会从浏览器缓存中加载请求信息。</p><ol start="6"><li>data: </li></ol><p>要求为Object或String类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get请求中将附加在url后。防止这种自动转换，可以查看　　processData选项。对象必须为key/value格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。如果是数组，JQuery将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。</p><ol start="7"><li>dataType: </li></ol><p>要求为String类型的参数，预期服务器返回的数据类型。如果不指定，JQuery将自动根据http包mime信息返回responseXML或responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回XML文档，可用JQuery处理。<br>html：返回纯文本HTML信息；包含的script标签会在插入DOM时执行。<br>script：返回纯文本JavaScript代码。不会自动缓存结果。除非设置了cache参数。注意在远程请求时（不在同一个域下），所有post请求都将转为get请求。<br>json：返回JSON数据。<br>jsonp：JSONP格式。使用SONP形式调用函数时，例如myurl?callback=?，JQuery将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p><ol start="8"><li>beforeSend：</li></ol><p>要求为Function类型的参数，发送请求前可以修改XMLHttpRequest对象的函数，例如添加自定义HTTP头。在beforeSend中如果返回false可以取消本次ajax请求。XMLHttpRequest对象是惟一的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest)&#123;</span><br><span class="line">             this;   //调用本次ajax请求时传递的options参数</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>complete：</li></ol><p>要求为Function类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串。<br>          function(XMLHttpRequest, textStatus){<br>             this;    //调用本次ajax请求时传递的options参数<br>          }</p><ol start="10"><li>success：要求为Function类型的参数，请求成功后调用的回调函数，有两个参数。</li></ol><p>​         (1)由服务器返回，并根据dataType参数进行处理后的数据。<br>         (2)描述状态的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(data, textStatus)&#123;</span><br><span class="line">        //data可能是xmlDoc、jsonObj、html、text等等</span><br><span class="line">        this;  //调用本次ajax请求时传递的options参数</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>error:</li></ol><p>要求为Function类型的参数，请求失败时被调用的函数。该函数有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。ajax事件函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(XMLHttpRequest, textStatus, errorThrown)&#123;</span><br><span class="line">         //通常情况下textStatus和errorThrown只有其中一个包含信息</span><br><span class="line">         this;   //调用本次ajax请求时传递的options参数</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ol start="12"><li>contentType：</li></ol><p>要求为String类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。</p><ol start="13"><li>dataFilter：</li></ol><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(data, type)&#123;</span><br><span class="line">              //返回处理后的数据</span><br><span class="line">              return data;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><ol start="14"><li>dataFilter：</li></ol><p>要求为Function类型的参数，给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。函数返回的值将由jQuery进一步处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function(data, type)&#123;</span><br><span class="line">               //返回处理后的数据</span><br><span class="line">               return data;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><ol start="15"><li>global：</li></ol><p>要求为Boolean类型的参数，默认为true。表示是否触发全局ajax事件。设置为false将不会触发全局ajax事件，ajaxStart或ajaxStop可用于控制各种ajax事件。</p><ol start="16"><li>ifModified：</li></ol><p>要求为Boolean类型的参数，默认为false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。</p><ol start="17"><li>jsonp：</li></ol><p>要求为String类型的参数，在一个jsonp请求中重写回调函数的名字。该值用来替代在”callback=?”这种GET或POST请求中URL参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。</p><ol start="18"><li>username：</li></ol><p>要求为String类型的参数，用于响应HTTP访问认证请求的用户名。</p><ol start="19"><li>password：</li></ol><p>要求为String类型的参数，用于响应HTTP访问认证请求的密码。</p><ol start="20"><li>processData：</li></ol><p>要求为Boolean类型的参数，默认为true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。</p><ol start="21"><li>scriptCharset：</li></ol><p>要求为String类型的参数，只有当请求时dataType为”jsonp”或者”script”，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</p><h3 id="标准写法"><a href="#标准写法" class="headerlink" title="标准写法"></a>标准写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = $(<span class="keyword">this</span>).attr(<span class="string">'name'</span>);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url : <span class="string">"hello.do"</span>,</span><br><span class="line">type : <span class="string">"POST"</span>,</span><br><span class="line">data : &#123;<span class="string">'search'</span> : name&#125;,</span><br><span class="line">             dataType: json,</span><br><span class="line">success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'success'</span>);</span><br><span class="line">&#125;,<span class="attr">error</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="22"><li>顺便说一下<code>$.each()函数: $.each()函数不同于JQuery对象的each()方法</code>，它是一个全局函数，不操作JQuery对象，而是以一个数组或者对象作为第1个参数，以一个回调函数作为第2个参数。回调函数拥有两个参数：第1个为对象的成员或数组的索引，第2个为对应变量或内容。 </li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://blog.csdn.net/qq_30337695/article/details/51373727" target="_blank" rel="noopener">一些参数用例及解释</a>  </li><li><p><a href="https://blog.csdn.net/qq_36752632/article/details/71216477" target="_blank" rel="noopener">ajax提交到后台数据成功但返回不走success而走的error</a> </p></li><li><p><a href="https://blog.csdn.net/javaee_sunny/article/details/52574763" target="_blank" rel="noopener">ajax不执行success回调而是执行error回调</a></p></li><li><p><a href="http://www.css88.com/jqapi-1.9/jQuery.ajax/" target="_blank" rel="noopener">参考API</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0168.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;aJax使用小结&lt;br&gt;
    
    </summary>
    
      <category term="ajax" scheme="http://m.iskei.cn/categories/ajax/"/>
    
    
      <category term="ajax" scheme="http://m.iskei.cn/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>文件的上传和下载</title>
    <link href="http://m.iskei.cn/blog/64131.html"/>
    <id>http://m.iskei.cn/blog/64131.html</id>
    <published>2018-04-02T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0167.jpg" alt="image"><br>文件的上传和下载<br><a id="more"></a></p><h3 id="文件的上传和下载绝对路径"><a href="#文件的上传和下载绝对路径" class="headerlink" title="文件的上传和下载绝对路径"></a>文件的上传和下载绝对路径</h3><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><p>存的是绝对路径D:\tomct…….</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>: 生成上传文件的文件名，文件名以时间+3位随机数+"_"+文件的原始名称</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> filename 文件的原始名称</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 时间+3位随机数+"_"+文件的原始名称</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> String <span class="title">makeFileName</span><span class="params">(String filename)</span> </span>&#123; <span class="comment">// 2.jpg</span></span><br><span class="line">  <span class="comment">// 为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名</span></span><br><span class="line">  <span class="comment">// return UUID.randomUUID().toString() + "_" + filename;</span></span><br><span class="line">  <span class="comment">// 日期格式化</span></span><br><span class="line">  DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddhhmmssSSS"</span>);</span><br><span class="line">  <span class="comment">// 当前的时间</span></span><br><span class="line">  String name = df.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三位的随机数</span></span><br><span class="line">  Random r = <span class="keyword">new</span> Random();</span><br><span class="line">  <span class="comment">// name=时间+三位的随机数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">   name += r.nextInt(<span class="number">10</span>); <span class="comment">// +=会自动的将int转换为string</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name + <span class="string">"_"</span> + filename;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 为防止一个目录下面出现太多文件，要使用hash算法打散存储</span></span><br><span class="line"><span class="comment">  *  使用"/" 支持linux系统</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> filename 文件名，要根据文件名生成存储目录</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> savePath 文件存储路径  </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 新的存储目录</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">makePath</span><span class="params">(String filename,String savePath)</span></span>&#123;</span><br><span class="line">     <span class="comment">//得到文件名的hashCode的值，得到的就是filename这个字符串对象在内存中的地址</span></span><br><span class="line">     <span class="keyword">int</span> hashcode = filename.hashCode();</span><br><span class="line">     <span class="keyword">int</span> dir1 = hashcode &amp; <span class="number">0xf</span>; <span class="comment">//0--15</span></span><br><span class="line">     <span class="keyword">int</span> dir2 = (hashcode &amp; <span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>; <span class="comment">//0-15</span></span><br><span class="line">     <span class="comment">//构造新的保存目录</span></span><br><span class="line">     String dir = savePath + <span class="string">"/"</span> + dir1 + <span class="string">"/"</span> + dir2+<span class="string">"/"</span>; <span class="comment">//upload\2\3 upload\3\5</span></span><br><span class="line">     <span class="comment">//File既可以代表文件也可以代表目录   </span></span><br><span class="line">     File file = <span class="keyword">new</span> File(dir);</span><br><span class="line">    <span class="comment">//如果目录不存在</span></span><br><span class="line">     <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">      <span class="comment">//创建目录</span></span><br><span class="line">      file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> dir;</span><br><span class="line">       String savePath = <span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">"/WEB-INF/upload"</span>);</span><br><span class="line">      File root = <span class="keyword">new</span> File(savePath);</span><br><span class="line">      <span class="keyword">if</span> (!root.exists()) &#123;</span><br><span class="line">       <span class="comment">//创建临时目录</span></span><br><span class="line">       root.mkdir();</span><br><span class="line">      &#125;</span><br><span class="line">         InputStream is = <span class="keyword">new</span> FileInputStream(file); </span><br><span class="line">         <span class="comment">//得到上传文件的扩展名 .xle</span></span><br><span class="line">         String fileExtName = fileFileName.substring(fileFileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">      </span><br><span class="line">         <span class="comment">//得到文件的真实的保存目录</span></span><br><span class="line">         String realSavePath = makePath(fileFileName, savePath);</span><br><span class="line">         <span class="comment">//修改文件的存储名字,防止文件多了出现重名保存失败</span></span><br><span class="line">        String  storeName = makeFileName(fileFileName);</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//创建一个文件输出流</span></span><br><span class="line">         OutputStream os = <span class="keyword">new</span> FileOutputStream(realSavePath + <span class="string">"/"</span> + storeName);</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">         <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">while</span>(-<span class="number">1</span> != (length = is.read(buffer, <span class="number">0</span>, buffer.length)))</span><br><span class="line">         &#123;</span><br><span class="line">           os.write(buffer);</span><br><span class="line">         &#125;</span><br><span class="line">         os.close();</span><br><span class="line">         is.close();</span><br><span class="line">       </span><br><span class="line">     <span class="comment">//数据库存储的字段和名字 </span></span><br><span class="line">     String  urlAndName = realSavePath +storeName ;</span><br><span class="line">     notice.setAttachment(urlAndName);</span><br><span class="line">     </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      </span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          <span class="keyword">return</span> SUCCESS ; </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">download</span><span class="params">()</span> <span class="keyword">throws</span> ServletException, Exception </span>&#123;</span><br><span class="line">  HttpServletRequest req = ServletActionContext.getRequest();</span><br><span class="line">  Long id = Long.parseLong(req.getParameter(<span class="string">"id"</span>));</span><br><span class="line">  noticeQuery.setId(id);</span><br><span class="line">  System.out.println();</span><br><span class="line">  <span class="comment">// 获取文件的全名和绝对磁盘地址</span></span><br><span class="line">  Notice notice = noticeService.selectByPrimaryKey(noticeQuery.getId());</span><br><span class="line">  <span class="comment">// String urlAndName = kbm.getKbmAdjunct();</span></span><br><span class="line">  String urlAndName = notice.getAttachment();</span><br><span class="line">  <span class="comment">// 处理获取到的上传文件的文件名的路径部分，只保留文件名部分</span></span><br><span class="line">   String url = urlAndName.substring(<span class="number">0</span>, urlAndName.lastIndexOf(<span class="string">"/"</span>));</span><br><span class="line">         String storeName =  urlAndName.substring( urlAndName.lastIndexOf(<span class="string">"/"</span>)+<span class="number">1</span>);</span><br><span class="line">         String realName = storeName.substring(storeName.indexOf(<span class="string">"_"</span>)+<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 上传的文件都是保存在/WEB-INF/upload目录下的子目录当中</span></span><br><span class="line">  File file = <span class="keyword">new</span> File(url + <span class="string">"/"</span> + storeName);</span><br><span class="line">  <span class="comment">// 如果文件不存在</span></span><br><span class="line">  <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">   <span class="comment">// 错误提示</span></span><br><span class="line">      <span class="keyword">this</span>.getServletResponse().setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            <span class="keyword">this</span>.getServletResponse().getWriter().write(<span class="string">"您要下载的资源已被删除！！"</span>);</span><br><span class="line"><span class="comment">//   servletRequest.setAttribute("message", "您要下载的资源已被删除！！");</span></span><br><span class="line"><span class="comment">//   servletRequest.getRequestDispatcher("/message.jsp").forward(</span></span><br><span class="line"><span class="comment">//     servletRequest, servletResponse);</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理文件名</span></span><br><span class="line">  <span class="comment">// String realname = fileStoreName.substring(fileStoreName.indexOf("_")</span></span><br><span class="line">  <span class="comment">// + 1);</span></span><br><span class="line">  <span class="comment">// 设置响应头，控制浏览器下载该文件</span></span><br><span class="line">  servletResponse.setHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment;filename="</span></span><br><span class="line">    + URLEncoder.encode(realName, <span class="string">"UTF-8"</span>));</span><br><span class="line">  <span class="comment">// 读取要下载的文件，保存到文件输入流</span></span><br><span class="line">  FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">  <span class="comment">// 创建输出流</span></span><br><span class="line">  OutputStream out = servletResponse.getOutputStream();</span><br><span class="line">  <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">  <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="comment">// 输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">   out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 关闭文件输入流</span></span><br><span class="line">  in.close();</span><br><span class="line">  <span class="comment">// 关闭输出流</span></span><br><span class="line">  out.close();</span><br><span class="line">  <span class="keyword">return</span> NONE;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传和下载相对路径"><a href="#文件上传和下载相对路径" class="headerlink" title="文件上传和下载相对路径"></a>文件上传和下载相对路径</h3><h4 id="上传-1"><a href="#上传-1" class="headerlink" title="上传"></a>上传</h4><p>存的是相对路径 <code>http://127.0.0.1/tomcat.....</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  String  <span class="title">upload</span>  <span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">File filePath = <span class="keyword">new</span> File(ServletActionContext.getServletContext().getRealPath(<span class="string">"/"</span>));</span><br><span class="line">      String savePath = filePath.getParentFile().getParent()+<span class="string">"/attachment/securitysupervision"</span>;</span><br><span class="line">       File root = <span class="keyword">new</span> File(savePath);</span><br><span class="line">       <span class="keyword">if</span> (!root.exists()) &#123;</span><br><span class="line">        <span class="comment">//创建临时目录</span></span><br><span class="line">        root.mkdirs();</span><br><span class="line">        System.out.println( root.mkdir());</span><br><span class="line">       &#125;</span><br><span class="line">          InputStream is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">          <span class="comment">//得到上传文件的扩展名 .xls</span></span><br><span class="line">          String fileExtName = fileFileName.substring(fileFileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">          <span class="comment">//得到文件的真实的保存目录</span></span><br><span class="line">          String realSavePath = servletRequest.getScheme() + <span class="string">"://"</span>+ servletRequest.getServerName() + <span class="string">":"</span> + servletRequest.getServerPort()+servletRequest.getContextPath()+<span class="string">"/attachment/securitysupervision/"</span>;</span><br><span class="line">          <span class="comment">//String realSavePath = makePath(fileFileName, savePath);</span></span><br><span class="line">          <span class="comment">//修改文件的存储名字,防止文件多了出现重名保存失败</span></span><br><span class="line">         String  storeName = makeFileName(fileFileName);</span><br><span class="line">         </span><br><span class="line">          <span class="comment">//创建一个文件输出流</span></span><br><span class="line">          OutputStream os = <span class="keyword">new</span> FileOutputStream(savePath + <span class="string">"\\"</span> + storeName);</span><br><span class="line">          <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">          <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span>(-<span class="number">1</span> != (length = is.read(buffer, <span class="number">0</span>, buffer.length)))</span><br><span class="line">          &#123;</span><br><span class="line">            os.write(buffer);</span><br><span class="line">          &#125;</span><br><span class="line">          os.close();</span><br><span class="line">          is.close();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//数据库存储的字段和名字 </span></span><br><span class="line">      String  urlAndName = realSavePath +storeName ;</span><br><span class="line">      kbm.setKbmAdjunct(urlAndName);</span><br><span class="line">      </span><br><span class="line">         &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       </span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span>  <span class="string">"error"</span> ; </span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><p>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Kbm kbm = kbmService.selectAddrByKbmId(kbmQuery.getId()) ;</span><br><span class="line">   String urlAndName = kbm.getKbmAdjunct();</span><br><span class="line">  <span class="keyword">if</span> (urlAndName != <span class="keyword">null</span> &amp;&amp; !urlAndName.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">    <span class="comment">// 处理获取到的上传文件的文件名的路径部分，只保留文件名部分</span></span><br><span class="line">    HttpServletRequest request=ServletActionContext.getRequest();</span><br><span class="line">    String basePath=request.getScheme() + <span class="string">"://"</span>+ request.getServerName() + <span class="string">":"</span> + request.getServerPort()+request.getContextPath();</span><br><span class="line">   System.out.println(basePath);</span><br><span class="line">    String url = urlAndName.substring(basePath.length()+<span class="number">1</span>, urlAndName.lastIndexOf(<span class="string">"/"</span>));</span><br><span class="line">   String storeName = urlAndName.substring(urlAndName.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">   String realName = storeName.substring(storeName.indexOf(<span class="string">"_"</span>) + <span class="number">1</span>);</span><br><span class="line">   <span class="comment">// 上传的文件都是保存在/WEB-INF/upload目录下的子目录当中</span></span><br><span class="line">   <span class="comment">//File file = new File(url + "" + storeName);</span></span><br><span class="line">   File filePath = <span class="keyword">new</span> File(ServletActionContext.getServletContext().getRealPath(<span class="string">"/"</span>));</span><br><span class="line">    String savePath = filePath.getParentFile().getParent()+<span class="string">"/attachment/securitysupervision"</span>;</span><br><span class="line">   System.out.println(savePath);</span><br><span class="line">   File file = <span class="keyword">new</span> File(savePath + <span class="string">"/"</span> + storeName);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 如果文件不存在</span></span><br><span class="line">   <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">    <span class="comment">// 错误提示</span></span><br><span class="line">    servletRequest.setAttribute(<span class="string">"message"</span>, <span class="string">"您要下载的资源已被删除！！"</span>);</span><br><span class="line">    servletRequest.getRequestDispatcher(<span class="string">"/message.jsp"</span>).forward(</span><br><span class="line">      servletRequest, servletResponse);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 处理文件名</span></span><br><span class="line">   <span class="comment">// String realname =</span></span><br><span class="line">   <span class="comment">// fileStoreName.substring(fileStoreName.indexOf("_") + 1);</span></span><br><span class="line">   <span class="comment">// 设置响应头，控制浏览器下载该文件</span></span><br><span class="line">   servletResponse.setHeader(</span><br><span class="line">     <span class="string">"content-disposition"</span>,</span><br><span class="line">     <span class="string">"attachment;filename="</span></span><br><span class="line">       + URLEncoder.encode(realName, <span class="string">"UTF-8"</span>));</span><br><span class="line">   <span class="comment">// 读取要下载的文件，保存到文件输入流</span></span><br><span class="line">   FileInputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">   <span class="comment">// 创建输出流</span></span><br><span class="line">   OutputStream out = servletResponse.getOutputStream();</span><br><span class="line">   <span class="keyword">byte</span> buffer[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 循环将输入流中的内容读取到缓冲区当中</span></span><br><span class="line">   <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 输出缓冲区的内容到浏览器，实现文件下载</span></span><br><span class="line">    out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 关闭文件输入流</span></span><br><span class="line">   in.close();</span><br><span class="line">   <span class="comment">// 关闭输出流</span></span><br><span class="line">   out.close();</span><br><span class="line">    <span class="keyword">return</span> NONE;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0167.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;文件的上传和下载&lt;br&gt;
    
    </summary>
    
      <category term="fileUpload" scheme="http://m.iskei.cn/categories/fileUpload/"/>
    
    
      <category term="fileUpload" scheme="http://m.iskei.cn/tags/fileUpload/"/>
    
  </entry>
  
  <entry>
    <title>JDK版本共存切换研究</title>
    <link href="http://m.iskei.cn/blog/20841.html"/>
    <id>http://m.iskei.cn/blog/20841.html</id>
    <published>2018-04-01T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.490Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0166.jpg" alt="image"><br>JDK版本共存切换研究<br><a id="more"></a></p><blockquote><p><strong>场景</strong>：公司项目使用的jdk为1.7，最近不是很忙，找到一个爬虫系统学习。该系统使用到了jdk1.8的特性，所以I need 俩版本，开整！！！</p></blockquote><h4 id="准备两个版本的jdk"><a href="#准备两个版本的jdk" class="headerlink" title="准备两个版本的jdk"></a>准备两个版本的jdk</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdk-7u67-windows-x64.exe</span><br><span class="line">jdk-8u162-windows-x64.exe</span><br></pre></td></tr></table></figure><h4 id="安装jdk路径为："><a href="#安装jdk路径为：" class="headerlink" title="安装jdk路径为："></a>安装jdk路径为：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Java\JDK\JDK1.7\jdk1.7.0_67</span><br><span class="line">D:\Java\JDK\JDK1.8\jdk1.8.0_162</span><br></pre></td></tr></table></figure><blockquote><p><strong>tips</strong>: win7以下电脑推荐使用Rapid Environment Editor修改电脑环境变量。</p></blockquote><p>####设置两个子JAVA_HOME</p><p>一个总，设置两个子JAVA_HOME</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME7 = D:\Java\JDK\JDK1.7\jdk1.7.0_67</span><br><span class="line">JAVA_HOME8 = D:\Java\JDK\JDK1.8\jdk1.8.0_162</span><br></pre></td></tr></table></figure><p>此处JAVA_HOME设置即为你更换jdk版本是所要修改的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME = %JAVA_HOME8%</span><br></pre></td></tr></table></figure><h4 id="设置path"><a href="#设置path" class="headerlink" title="设置path"></a>设置path</h4><p>添加如下内容(注意添加’;’)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><h4 id="添加classpath变量"><a href="#添加classpath变量" class="headerlink" title="添加classpath变量"></a>添加classpath变量</h4><blockquote><p>变量值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure><h4 id="查看版本是否更换成功"><a href="#查看版本是否更换成功" class="headerlink" title="查看版本是否更换成功"></a>查看版本是否更换成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version javac -version</span><br></pre></td></tr></table></figure><blockquote><p>若未成功，请看接下来的6</p></blockquote><h4 id="未成功解决方案"><a href="#未成功解决方案" class="headerlink" title="未成功解决方案"></a>未成功解决方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除C:\Windows\System32目录下的java.exe,javaw.exe，javaws.exe删除即可。 若java -version和javac -version版本不一致 将%JAVA_HOME%\bin加在PATH变量的头，执行java -version和javac -version，版本已然一致。</span><br></pre></td></tr></table></figure><h4 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Runtime Environment</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><code>C:\Windows\System32底下的java.exe，javaw.exe，javaws.exe是JDK7的，版本就是JDK7；是JDK8的，版本就是JDK8。</code></p><p>安装jdk8的时候，安装过程中会在系统变量Path的最前面加上了<code>C:\ProgramData\Oracle\Java\javapath;</code>，这是安装jdk8的时候带出来的，并且在Path的最前面，所以无论修改注册表还是Java控制台都没有用，执行的指令在系统变量中搜寻命令时最先找到的就是<code>C:\ProgramData\Oracle\Java\javapath;，</code>始终是jdk8的。那么，我们需要把Path最前面的<code>C:\ProgramData\Oracle\Java\javapath;</code>删除，这样才能对JAVA_HOME修改来切换需要的jdk环境。</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><p>JDK1.6,JDK1.7,JDK1.8安装共存问题 <a href="https://blog.csdn.net/just_coming_here/article/details/51775909" target="_blank" rel="noopener">https://blog.csdn.net/just_coming_here/article/details/51775909</a></p></li><li><p>JDK7与JDK8环境共存与切换 <a href="https://www.cnblogs.com/iathanasy/p/8507647.html" target="_blank" rel="noopener">https://www.cnblogs.com/iathanasy/p/8507647.html</a></p></li><li><p>JDK7与JDK8共存问题小思 <a href="https://www.cnblogs.com/fxmemory/p/7234848.html" target="_blank" rel="noopener">https://www.cnblogs.com/fxmemory/p/7234848.html</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0166.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;JDK版本共存切换研究&lt;br&gt;
    
    </summary>
    
      <category term="JDK" scheme="http://m.iskei.cn/categories/JDK/"/>
    
    
      <category term="JDK" scheme="http://m.iskei.cn/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>JS防止表单重复提交</title>
    <link href="http://m.iskei.cn/blog/53250.html"/>
    <id>http://m.iskei.cn/blog/53250.html</id>
    <published>2018-03-28T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.498Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0165.jpg" alt="image"><br>JS防止表单重复提交<br><a id="more"></a><br>第一种：</p><p>用flag标识，下面的代码设置checkSubmitFlg标志： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"”javascript”"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> checkSubmitFlg = <span class="literal">false</span>; </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkSubmit</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(checkSubmitFlg ==<span class="literal">true</span>)&#123; <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//当表单被提交过一次后checkSubmitFlg将变为true,根据判断将无法进行提交。 </span></span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="javascript">checkSubmitFlg ==<span class="literal">true</span>; </span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">true</span>; </span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="xml"><span class="tag">&lt; /<span class="attr">script</span> &gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt; <span class="attr">form</span> <span class="attr">name</span>=<span class="string">”form1”</span> <span class="attr">method</span>=<span class="string">”post”</span> <span class="attr">onsubmit</span>=<span class="string">”return</span> <span class="attr">checkSubmit</span>();”&gt;</span> </span></span><br><span class="line"><span class="xml">………..<span class="tag">&lt; /<span class="attr">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>第二种：</p><p>在onsubmit事件中设置，在第一次提交后使提交按钮失效，代码如下： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">”about:blank”</span> <span class="attr">method</span>=<span class="string">”post”</span> <span class="attr">onsubmit</span>=<span class="string">"getElementById(‘submitInput').disabled=true;return true;"</span> <span class="attr">target</span>=<span class="string">”_blank”</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”submit”</span> <span class="attr">id</span>=<span class="string">”submitInput”/</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为程序源码跟WIN2000的注册表有冲突，帖子发出后会出现无效页面，以致于论坛里有很多无恶意的重复帖子，后来想出了一个办法，用JS避免重复提交，下面是部分源码： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">Language</span>=<span class="string">'JavaScript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">formsubmit</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">Today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> NowHour = Today.getHours();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> NowMinute = Today.getMinutes();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> NowSecond = Today.getSeconds();</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mysec = (NowHour * <span class="number">3600</span>) + (NowMinute * <span class="number">60</span>) + NowSecond;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> ((mysec - <span class="built_in">document</span>.formsubmitf.mypretime.value) &gt; <span class="number">600</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">//600只是一个时间值，就是5分钟内禁止重复提交，值随你高兴设 </span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.formsubmitf.mypretime.value = mysec;</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">' 按一次就够了，请勿重复提交！请耐心等待！谢谢合作！'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.forms.formsubmitf.submit();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">BODY</span> <span class="attr">BGCOLOR</span>=<span class="string">"#FFFFFF"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">formsubmitf</span> <span class="attr">id</span>=<span class="string">"the"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"XXX.asp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">'mypretime'</span> <span class="attr">value</span>=<span class="string">'0'</span>&gt;</span></span><br><span class="line">//这句不能少，用隐含变量传递一个时间初值 //这里是你要提交的内容 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"写好了"</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"button1"</span> <span class="attr">class</span>=<span class="string">"4round"</span> <span class="attr">onclick</span>=<span class="string">'formsubmit()'</span>&gt;</span> <span class="tag">&lt;<span class="name">font</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>(请按一次，耐心等待！)<span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重 写"</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"button2"</span> <span class="attr">class</span>=<span class="string">"4round"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用了这个代码，论坛的重复帖子明显减少，不过有个缺点，就是刷新一次，检测就不起作用，好处就是利用JS检测，不需要额外的权限支持，至于效果如何，用不用就随你们了，（最好前端跟后端都加上检测）.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0165.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;JS防止表单重复提交&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://m.iskei.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://m.iskei.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>maven项目操作技巧</title>
    <link href="http://m.iskei.cn/blog/44283.html"/>
    <id>http://m.iskei.cn/blog/44283.html</id>
    <published>2018-03-26T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.522Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0164.jpg" alt="image"><br>maven项目技巧<br><a id="more"></a></p><h2 id="Eclipse导入Maven项目并启动的步骤"><a href="#Eclipse导入Maven项目并启动的步骤" class="headerlink" title="Eclipse导入Maven项目并启动的步骤"></a>Eclipse导入Maven项目并启动的步骤</h2><ol><li><p>空白处右击Import选择General里的Existing Projects into Workspace→Next，Browse找到要导入项目所在，选中要导入的项目点击确定；一定要勾选Copy projects into eorkspace→Finish；</p></li><li><p>导入本地项目之后先进行配置，配置步骤如下：</p><p>(1).导入项目 右击maven→update project →OK；</p><p>(2).项目名→右击→properties</p><p>(3).resource 修改字体 utf-8</p></li></ol><p>​    (4).deployment  assembly  点击  add  添加maven dependencies</p><p>​    (6).java compiler 中 compiler compliance settings 选1.6</p><p>​    (7)找到Project Facets 查看Java是改为1.6；</p><p>​    (8)如果JRE版本不对，应该首先右击Properties选择Workspacec default JRE(jre6)点击OK；</p><ol start="3"><li><p>导入数据库数据步骤如下:</p><p>(1).在localhost创建一个数据库，名字与导入文件一致；</p><p>(2)右击选择运行SQL文件；数据库中导入数据文件，选择好要导入的文件，不勾选“每个运行中运行多重查询”和“SETAUTOCOMMIT=0”；开始即可</p></li><li><p>导入之后将资源文件中关于数据库的配置用户名密码改成需要的即可；</p></li><li><p>建server部署项目启动即可</p></li></ol><h2 id="eclipse-maven项目导出所使用的jar包"><a href="#eclipse-maven项目导出所使用的jar包" class="headerlink" title="eclipse maven项目导出所使用的jar包"></a>eclipse maven项目导出所使用的jar包</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li><p>在eclipse中定位到maven项目的pom.xml文件</p></li><li><p>右击pom.xml文件，选择Run As–》Run Configurations（或者Maven build…）</p></li><li><p>在打开的页面中，Goals输入“dependency:copy-dependencies”，后点击“Run”即可</p></li><li><p>在当前项目的目录的“targed/dependency”下就可以看见。</p></li></ol><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><ol><li><p>或者：在dos环境，进入到pom.xml所在的文件夹。</p><p>输入命令：mvn dependency:copy-dependencies</p><p>也可在当前项目的目录的“targed/dependency”下开间maven项目引用的jar包。<br>eclipse 中maven项目的运行</p></li></ol><h2 id="eclispe-maven项目运行"><a href="#eclispe-maven项目运行" class="headerlink" title="eclispe maven项目运行"></a>eclispe maven项目运行</h2><ol><li>项目构建时，右键pom.xml文件，选择Run As–》Run Configurations（或者Maven build…）</li></ol><p>Golas:中输入项目构建命令，比如compile, run后就开始编译了。</p><ol start="2"><li>开发中代码的运行调试，找到要运行的java代码运行，和普通的Java代码一样运行就可以了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0164.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;maven项目技巧&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://m.iskei.cn/categories/maven/"/>
    
    
      <category term="maven" scheme="http://m.iskei.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 文件上传及下载</title>
    <link href="http://m.iskei.cn/blog/25709.html"/>
    <id>http://m.iskei.cn/blog/25709.html</id>
    <published>2018-03-24T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0163.jpg" alt="image"></p><p>Java 文件上传及下载<br><a id="more"></a></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>　　文件上传操作通常会附加一些限制，如：文件类型、上传文件总大小、每个文件的最大大小等。除此以外，作为一个通用组件还需要考虑更多的问题，如：支持自定义文件保存目录、支持相对路径和绝对路径、支持自定义保存的文件的文件名称、支持上传进度反馈和上传失败清理等。另外，本座也不想重新造车轮，本组件是基于 Commons File Upload 实现，省却了本座大量的工作 ^_^ 下面先从一个具体的使用例子讲起：</p><h4 id="上传请求界面及代码"><a href="#上传请求界面及代码" class="headerlink" title="上传请求界面及代码"></a>上传请求界面及代码</h4><p><img src="http://filesimg.111cn.net/2012/02/24/20120224013306316.jpg" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"checkupload.action"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    First Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstName"</span> <span class="attr">value</span>=<span class="string">"丑"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Last Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lastName"</span> <span class="attr">value</span>=<span class="string">"怪兽"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Birthday: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"1978-11-03"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Gender: 男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>" <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>" <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"true"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Working age: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"workingAge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span>-请选择-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>三年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>五年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span>十年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span>二十年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Interest: 游泳 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;打球 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;下棋 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;打麻将 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">        &amp;nbsp;看书 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"interest"</span> <span class="attr">value</span>=<span class="string">"5"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Photo 1.1: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>" <span class="attr">name</span>=<span class="string">"photo-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Photo 1.2: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>" <span class="attr">name</span>=<span class="string">"photo-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Photo 2.1: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>" <span class="attr">name</span>=<span class="string">"photo-2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"确 定"</span>&gt;</span>&amp;nbsp;&amp;nbsp;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重 置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从上面的 HTML 代码可以看出，表单有 6 个普通域和 3 个文件域，其中前两个文件域的 name 属性相同。</p><h4 id="上传处理代码"><a href="#上传处理代码" class="headerlink" title="上传处理代码"></a>上传处理代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.bruce.util.BeanHelper;</span><br><span class="line"><span class="keyword">import</span> com.bruce.util.Logger;</span><br><span class="line"><span class="keyword">import</span> com.bruce.util.http.FileUploader;</span><br><span class="line"><span class="keyword">import</span> com.bruce.util.http.FileUploader.FileInfo;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.bruce.util.http.FileUploader.*;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckUpload</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 上传路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UPLOAD_PATH        = <span class="string">"upload"</span>;</span><br><span class="line">    <span class="comment">// 可接受的文件类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] ACCEPT_TYPES    = &#123;<span class="string">"txt"</span>, <span class="string">"pdf"</span>, <span class="string">"doc"</span>, <span class="string">".Jpg"</span>, <span class="string">"*.zip"</span>, <span class="string">"*.RAR"</span>&#125;;</span><br><span class="line">    <span class="comment">// 总上传文件大小限制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_SIZE            = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 单个传文件大小限制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_FILE_SIZE        = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 FileUploader 对象</span></span><br><span class="line">        FileUploader fu = <span class="keyword">new</span> FileUploader(UPLOAD_PATH, ACCEPT_TYPES, MAX_SIZE, MAX_FILE_SIZE);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据实际情况设置对象属性（可选）</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        fu.setFileNameGenerator(new FileNameGenerator()</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public String generate(FileItem item, String suffix)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                return String.format("%d_%d", item.hashCode(), item.get().hashCode());</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        fu.setServletProgressListener(new ProgressListener()</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void update(long pBytesRead, long pContentLength, int pItems)</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                System.out.printf("%d: length -&gt; %d, read -&gt; %d.n", pItems, pContentLength, pBytesRead);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行上传并获取操作结果</span></span><br><span class="line">        Result result = fu.upload(getRequest(), getResponse());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查操作结果</span></span><br><span class="line">        <span class="keyword">if</span>(result != FileUploader.Result.SUCCESS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置 request attribute</span></span><br><span class="line">            setRequestAttribute(<span class="string">"error"</span>, fu.getCause());</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">            Logger.exception(fu.getCause(), <span class="string">"upload file fail"</span>, Level.ERROR, <span class="keyword">false</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过非文件表单域创建 Form Bean</span></span><br><span class="line">        Persion persion = BeanHelper.createBean(Persion.class, fu.getParamFields());</span><br><span class="line">        <span class="comment">// 图片保存路径的列表</span></span><br><span class="line">        List&lt;String&gt; photos    = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 轮询文件表单域，填充 photos */</span></span><br><span class="line">        Set&lt;String&gt; keys = fu.getFileFields().keySet();</span><br><span class="line">        <span class="keyword">for</span>(String key : keys)</span><br><span class="line">        &#123;</span><br><span class="line">            FileInfo[] ffs = fu.getFileFields().get(key);</span><br><span class="line">            <span class="keyword">for</span>(FileInfo ff : ffs)</span><br><span class="line">            &#123;</span><br><span class="line">                photos.add(String.format(<span class="string">"(%s) %s%s%s"</span>, key, fu.getSavePath(), File.separator, ff.getSaveFile().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置 Form Bean 的 photos 属性</span></span><br><span class="line">        persion.setPhotos(photos);</span><br><span class="line">        <span class="comment">// 设置 request attribute</span></span><br><span class="line">        setRequestAttribute(<span class="string">"persion"</span>, persion);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Persion</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workingAge;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] interest;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; photos;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String uploadFileName;</span><br><span class="line">    <span class="keyword">private</span> File saveFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　分析下上面的 Java 代码，本例先根据保存目录、文件大小限制和文件类型限制创建一个 FileUploader 对象，然后调用该对象的 upload() 方法执行上传并返回操作结果，如果上传成功则 通过 getParamFields() 方法获取所有非文件表单域内容，并交由 BeanHelper 进行解析创建 Form Bean，再调用 getFileFields() 方法获取所有文件表单域的 FileInfo（FileInfo 包含上传文件的原始名称和被保存文件的 File 对象），最后完成 Form Bean 所有字段的填充并把 Form Bean 设置为 request 属性。</p><h4 id="上传结果界面及代码"><a href="#上传结果界面及代码" class="headerlink" title="上传结果界面及代码"></a>上传结果界面及代码</h4><p><img src="http://filesimg.111cn.net/2012/02/24/20120224013312738.jpg" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>Persion Attributs<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.firstName&#125; $&#123;persion.lastName&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Brithday<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.birthday&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.gender&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Working Age<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;persion.workingAge&#125;"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Interest<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"its"</span> <span class="attr">items</span>=<span class="string">"$&#123;persion.interest&#125;"</span>&gt;</span></span><br><span class="line">                                 <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;its&#125;"</span> /&gt;</span> &amp;nbsp;</span><br><span class="line">                          <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"p"</span> <span class="attr">items</span>=<span class="string">"$&#123;persion.photos&#125;"</span>&gt;</span></span><br><span class="line">                                 <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;p&#125;"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 　　从上面的处理结果可以看出，文件上传组件 FileUploader 正确地处理了表单的所有文件域和非文件域名，并且，整个文件上传操作过程非常简单，无需用户过多参与。下面我们来详细看看组件的主要实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    / 不限制文件上传总大小的 Size Max 常量 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> NO_LIMIT_SIZE_MAX        = -<span class="number">1</span>;</span><br><span class="line">    / 不限制文件上传单个文件大小的 File Size Max 常量 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> NO_LIMIT_FILE_SIZE_MAX    = -<span class="number">1</span>;</span><br><span class="line">    / 默认的写文件阀值 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE_THRESHOLD    = DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD;</span><br><span class="line">    / 默认的文件名生成器 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FileNameGenerator DEFAULT_FILE_NAME_GENERATOR = <span class="keyword">new</span> CommonFileNameGenerator();</span><br><span class="line">    </span><br><span class="line">    / 设置上传文件的保存路径（不包含文件名）</span><br><span class="line">     * </span><br><span class="line">     * 文件路径，可能是绝对路径或相对路径&lt;br&gt;</span><br><span class="line">     *     <span class="number">1</span>) 绝对路径：以根目录符开始（如：<span class="string">'/'</span>、<span class="string">'D:'</span>），是服务器文件系统的路径&lt;br&gt;</span><br><span class="line">     *     <span class="number">2</span>) 相对路径：不以根目录符开始，是相对于 WEB 应用程序 Context 的路径，（如：mydir 是指</span><br><span class="line">     *         <span class="string">'$&#123;WEB-APP-DIR&#125;/mydir'</span>）&lt;br&gt;</span><br><span class="line">     *     <span class="number">3</span>) 规则：上传文件前会检查该路径是否存在，如果不存在则会尝试生成该路径，如果生成失败则</span><br><span class="line">     *         上传失败并返回 &#123;@link Result#INVALID_SAVE_PATH&#125;</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">private</span> String savePath;</span><br><span class="line">    / 文件上传的总文件大小限制 */</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sizeMax                        = NO_LIMIT_SIZE_MAX;</span><br><span class="line">    / 文件上传的单个文件大小限制 */</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> fileSizeMax                    = NO_LIMIT_FILE_SIZE_MAX;</span><br><span class="line">    / 可接受的上传文件类型集合，默认：不限制 */</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; acceptTypes                = <span class="keyword">new</span> LStrSet();</span><br><span class="line">    / 非文件表单域的映射 */</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String[]&gt; paramFields    = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">    / 文件表单域的映射 */</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, FileInfo[]&gt; fileFields    = <span class="keyword">new</span> HashMap&lt;String, FileInfo[]&gt;();</span><br><span class="line">    / 文件名生成器 */</span><br><span class="line">    <span class="keyword">private</span> FileNameGenerator fileNameGenerator    = DEFAULT_FILE_NAME_GENERATOR;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// commons file upload 相关属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> factorySizeThreshold            = DEFAULT_SIZE_THRESHOLD;</span><br><span class="line">    <span class="keyword">private</span> String factoryRepository;</span><br><span class="line">    <span class="keyword">private</span> FileCleaningTracker factoryCleaningTracker;</span><br><span class="line">    <span class="keyword">private</span> String servletHeaderencoding;</span><br><span class="line">    <span class="keyword">private</span> ProgressListener servletProgressListener;</span><br><span class="line">    </span><br><span class="line">    / 文件上传失败的原因（文件上传失败时使用） */</span><br><span class="line">    <span class="keyword">private</span> Throwable cause;</span><br><span class="line">    </span><br><span class="line">    / 执行上传</span><br><span class="line">     * </span><br><span class="line">     * <span class="meta">@param</span> request    : &#123;<span class="meta">@link</span> HttpServletRequest&#125; 对象</span><br><span class="line">     * <span class="meta">@param</span> response    : &#123;<span class="meta">@link</span> HttpServletResponse&#125; 对象</span><br><span class="line">     * </span><br><span class="line">     * @return            : 成功：返回 &#123;@link Result#SUCCESS&#125; ，失败：返回其他结果，</span><br><span class="line">     *                       失败原因通过 &#123;@link FileUploader#getCause()&#125; 获取</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">upload</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        reset();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取上传目录绝对路径</span></span><br><span class="line">        String absolutePath     = getAbsoluteSavePath(request);</span><br><span class="line">        <span class="keyword">if</span>(absolutePath == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cause = <span class="keyword">new</span> FileNotFoundException(String.format(<span class="string">"path '%s' not found or is not directory"</span>, savePath));</span><br><span class="line">            <span class="keyword">return</span> Result.INVALID_SAVE_PATH;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ServletFileUpload sfu    = getFileUploadComponent();</span><br><span class="line">        List&lt;FileItemInfo&gt; fiis    = <span class="keyword">new</span> ArrayList&lt;FileItemInfo&gt;();</span><br><span class="line">        </span><br><span class="line">        List&lt;FileItem&gt; items    = <span class="keyword">null</span>;</span><br><span class="line">        Result result            = Result.SUCCESS;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取文件名生成器</span></span><br><span class="line">        String encoding                    = servletHeaderencoding != <span class="keyword">null</span> ? servletHeaderencoding : request.getCharacterEncoding();</span><br><span class="line">        FileNameGenerator fnGenerator    = fileNameGenerator != <span class="keyword">null</span> ? fileNameGenerator : DEFAULT_FILE_NAME_GENERATOR;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 执行上传操作</span></span><br><span class="line">            items = (List&lt;FileItem&gt;)sfu.parseRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileUploadException e)</span><br><span class="line">        &#123;</span><br><span class="line">            cause = e;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FileSizeLimitExceededException)        result = Result.FILE_SIZE_EXCEEDED;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> SizeLimitExceededException)    result = Result.SIZE_EXCEEDED;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> InvalidContentTypeException)    result = Result.INVALID_CONTENT_TYPE;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> IOFileUploadException)            result = Result.FILE_UPLOAD_IO_EXCEPTION;</span><br><span class="line">            <span class="keyword">else</span>                                                result = Result.OTHER_PARSE_REQUEST_EXCEPTION;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(result == Result.SUCCESS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 解析所有表单域</span></span><br><span class="line">            result = parseFileItems(items, fnGenerator, absolutePath, encoding, fiis);    </span><br><span class="line">            <span class="keyword">if</span>(result == Result.SUCCESS)</span><br><span class="line">                <span class="comment">// 保存文件</span></span><br><span class="line">                result = writeFiles(fiis);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析所有表单域</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">parseFileItems</span><span class="params">(List&lt;FileItem&gt; items, FileNameGenerator fnGenerator, String absolutePath, String encoding, List&lt;FileItemInfo&gt; fiis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(FileItem item : items)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(item.isFormField())</span><br><span class="line">                <span class="comment">// 解析非文件表单域</span></span><br><span class="line">                parseFormField(item, encoding);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(item.getSize() == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 解析文件表单域</span></span><br><span class="line">                Result result = parseFileField(item, absolutePath, fnGenerator, fiis);</span><br><span class="line">                <span class="keyword">if</span>(result != Result.SUCCESS)</span><br><span class="line">                &#123;</span><br><span class="line">                    reset();</span><br><span class="line">                    </span><br><span class="line">                    cause = <span class="keyword">new</span> InvalidParameterException(String.format(<span class="string">"file '%s' not accepted"</span>, item.getName()));</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析文件表单域</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">parseFileField</span><span class="params">(FileItem item, String absolutePath, FileNameGenerator fnGenerator, List&lt;FileItemInfo&gt; fiis)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String suffix            = <span class="keyword">null</span>;</span><br><span class="line">        String uploadFileName    = item.getName();</span><br><span class="line">        <span class="keyword">boolean</span> isAcceptType    = acceptTypes.isEmpty();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!isAcceptType)</span><br><span class="line">        &#123;</span><br><span class="line">            suffix = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">int</span> stuffPos = uploadFileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">            <span class="keyword">if</span>(stuffPos != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                suffix = uploadFileName.substring(stuffPos, uploadFileName.length()).toLowerCase();</span><br><span class="line">                isAcceptType = acceptTypes.contains(suffix);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!isAcceptType)</span><br><span class="line">            <span class="keyword">return</span> Result.INVALID_FILE_TYPE;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过文件名生成器获取文件名</span></span><br><span class="line">        String saveFileName = fnGenerator.generate(item, suffix);</span><br><span class="line">        <span class="keyword">if</span>(!saveFileName.endsWith(suffix))</span><br><span class="line">            saveFileName += suffix;</span><br><span class="line">        </span><br><span class="line">        String fullFileName    = absolutePath + File.separator + saveFileName;</span><br><span class="line">        File saveFile        = <span class="keyword">new</span> File(fullFileName);</span><br><span class="line">        FileInfo info        = <span class="keyword">new</span> FileInfo(uploadFileName, saveFile);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表单域文件信息</span></span><br><span class="line">        fiis.add(<span class="keyword">new</span> FileItemInfo(item, saveFile));</span><br><span class="line">        addFileField(item.getFieldName(), info);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseFormField</span><span class="params">(FileItem item, String encoding)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String name = item.getFieldName();</span><br><span class="line">        String value = item.getString();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符串编码转换</span></span><br><span class="line">        <span class="keyword">if</span>(!GeneralHelper.isStrEmpty(value) &amp;&amp; encoding != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                value = <span class="keyword">new</span> String(value.getBytes(<span class="string">"ISO-8859-1"</span>), encoding);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(UnsupportedEncodingException e)</span><br><span class="line">            &#123;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加表单域名/值映射</span></span><br><span class="line">        addParamField(name, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    / 文件名生成器接口</span><br><span class="line">     * </span><br><span class="line">     * 每次保存一个上传文件前都需要调用该接口的 &#123;@link FileNameGenerator#generate&#125; 方法生成要保存的文件名</span><br><span class="line">     *  </span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileNameGenerator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        / 文件名生成方法</span><br><span class="line">         * </span><br><span class="line">         * <span class="meta">@param</span> item        : 上传文件对应的 &#123;<span class="meta">@link</span> FileItem&#125; 对象</span><br><span class="line">         * <span class="meta">@param</span> suffix    : 上传文件的后缀名</span><br><span class="line">         * </span><br><span class="line">         */</span><br><span class="line">        <span class="function">String <span class="title">generate</span><span class="params">(FileItem item, String suffix)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 默认通用文件名生成器</span><br><span class="line">     * </span><br><span class="line">     * 实现 &#123;<span class="meta">@link</span> FileNameGenerator&#125; 接口，根据序列值和时间生成唯一文件名</span><br><span class="line">     *  </span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonFileNameGenerator</span> <span class="keyword">implements</span> <span class="title">FileNameGenerator</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SERIAL            = <span class="number">999999</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger atomic = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextInteger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> value = atomic.incrementAndGet();</span><br><span class="line">            <span class="keyword">if</span>(value &gt;= MAX_SERIAL)</span><br><span class="line">                atomic.set(<span class="number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        / 根据序列值和时间生成 <span class="string">'XXXXXX_YYYYYYYYYYYYY'</span> 格式的唯一文件名 */</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">generate</span><span class="params">(FileItem item, String suffix)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> serial        = getNextInteger();</span><br><span class="line">            <span class="keyword">long</span> millsec    = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">"%06d_%013d"</span>, serial, millsec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 上传文件信息结构体 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInfo</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String uploadFileName;</span><br><span class="line">        <span class="keyword">private</span> File saveFile;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getters and setters ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FileItemInfo</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        FileItem item;</span><br><span class="line">        File file;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getters and setters ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 文件上传结果枚举值 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Result</span><br><span class="line">    &#123;</span><br><span class="line">        / 成功 */</span><br><span class="line">        SUCCESS,</span><br><span class="line">        / 失败：文件总大小超过限制 */</span><br><span class="line">        SIZE_EXCEEDED,</span><br><span class="line">        / 失败：单个文件大小超过限制 */</span><br><span class="line">        FILE_SIZE_EXCEEDED,</span><br><span class="line">        / 失败：请求表单类型不正确 */</span><br><span class="line">        INVALID_CONTENT_TYPE,</span><br><span class="line">        / 失败：文件上传 IO 错误 */</span><br><span class="line">        FILE_UPLOAD_IO_EXCEPTION,</span><br><span class="line">        / 失败：解析上传请求其他异常 */</span><br><span class="line">        OTHER_PARSE_REQUEST_EXCEPTION,</span><br><span class="line">        / 失败：文件类型不正确 */</span><br><span class="line">        INVALID_FILE_TYPE,</span><br><span class="line">        / 失败：文件写入失败 */</span><br><span class="line">        WRITE_FILE_FAIL,</span><br><span class="line">        / 失败：文件的保存路径不正确 */</span><br><span class="line">        INVALID_SAVE_PATH;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>应用可以实现自己的 FileNameGenerator 类替代默认的文件名生成器。</p></li><li><p>上传操作通过 FileUploader.Result 返回结果，并没有采用抛出异常的方式，因为本座认为在这里采用异常方式报告结果其实并不方便使用；另一方面，程序可以通过 getCause() 获取详细的错误信息。</p></li></ul><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>　　相对于文件上传，文件下载则简单很多，主要实现流程是根据文件名找到实际文件，并利用 Java 的相关类对 I/O 流进行读写。下面先看看一个使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.bruce.util.http.FileDownloader.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDownload</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 绝对路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ABSOLUTE_PATH    = <span class="string">"/Server/apache-tomcat-6.0.32/webapps/portal/download/下载测试 - 文本文件.txt"</span>;</span><br><span class="line">    <span class="comment">// 相对路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RELATE_PATH        = <span class="string">"download/下载测试 - 项目框架.jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> type            = getIntParam(<span class="string">"type"</span>, <span class="number">1</span>);</span><br><span class="line">        String filePath        = (type == <span class="number">1</span> ? ABSOLUTE_PATH : RELATE_PATH);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 FileDownloader 对象</span></span><br><span class="line">        FileDownloader fdl    = <span class="keyword">new</span> FileDownloader(filePath);</span><br><span class="line">        <span class="comment">// 执行下载</span></span><br><span class="line">        Result result = fdl.downLoad(getRequest(), getResponse());</span><br><span class="line">        <span class="comment">// 检查下载结果</span></span><br><span class="line">        <span class="keyword">if</span>(result != Result.SUCCESS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">            Logger.exception(fdl.getCause(), String.format(<span class="string">"download file '%s' fail"</span>, fdl.getFilePath()), Level.ERROR, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> NONE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个示例可以看出，文件下载组件的使用方法更简单，因为它不需要对下载结果进行很多处理。可以看出该组件也支持相对路径和绝对路径。下面我们来详细看看组件的主要实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">/ 文件下载器 */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDownloader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    / 默认字节交换缓冲区大小 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_BUFFER_SIZE        = <span class="number">1024</span> * <span class="number">4</span>;</span><br><span class="line">    / 下载文件的默认 Mime Type */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONTENT_TYPE    = <span class="string">"application/force-download"</span>;</span><br><span class="line">    </span><br><span class="line">    / 设置下载文件的路径（包含文件名） </span><br><span class="line">     * </span><br><span class="line">     * filePath    : 文件路径，可能是绝对路径或相对路径&lt;br&gt;</span><br><span class="line">     *                 <span class="number">1</span>) 绝对路径：以根目录符开始（如：<span class="string">'/'</span>、<span class="string">'D:'</span>），是服务器文件系统的路径&lt;br&gt;</span><br><span class="line">     *                 <span class="number">2</span>) 相对路径：不以根目录符开始，是相对于 WEB 应用程序 Context 的路径，（如：mydir/myfile 是指 <span class="string">'$&#123;WEB-APP-DIR&#125;/mydir/myfile'</span>）</span><br><span class="line">     */</span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line">    / 显示在浏览器的下载对话框中的文件名称，默认与  filePath 参数中的文件名一致 */</span><br><span class="line">    <span class="keyword">private</span> String saveFileName;</span><br><span class="line">    / 下载文件的 Mime Type，默认：&#123;@link FileDownloader#DEFAULT_CONTENT_TYPE&#125; */</span><br><span class="line">    <span class="keyword">private</span> String contentType        = DEFAULT_CONTENT_TYPE;</span><br><span class="line">    / 字节缓冲区大小，默认：&#123;@link FileDownloader#DEFAULT_CONTENT_TYPE&#125; */</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bufferSize            = DEFAULT_BUFFER_SIZE;</span><br><span class="line">    / 获取文件下载失败的原因（文件下载失败时使用） */</span><br><span class="line">    <span class="keyword">private</span> Throwable cause;</span><br><span class="line">    </span><br><span class="line">    / 执行下载</span><br><span class="line">     * </span><br><span class="line">     * <span class="meta">@param</span> request    : &#123;<span class="meta">@link</span> HttpServletRequest&#125; 对象</span><br><span class="line">     * <span class="meta">@param</span> response    : &#123;<span class="meta">@link</span> HttpServletResponse&#125; 对象</span><br><span class="line">     * </span><br><span class="line">     * @return            : 成功：返回 &#123;@link Result#SUCCESS&#125; ，失败：返回其他结果，</span><br><span class="line">     *                       失败原因通过 &#123;@link FileDownloader#getCause()&#125; 获取</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">downLoad</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        reset();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取要下载的文件的 File 对象</span></span><br><span class="line">            File file = getFile(request);</span><br><span class="line">            <span class="comment">// 执行下载操作</span></span><br><span class="line">            downLoadFile(request, response, file);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            cause = e;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FileNotFoundException)    <span class="keyword">return</span> Result.FILE_NOT_FOUND;</span><br><span class="line">            <span class="keyword">if</span>(e <span class="keyword">instanceof</span> IOException)            <span class="keyword">return</span> Result.READ_WRITE_FAIL;</span><br><span class="line">                                                    <span class="keyword">return</span> Result.UNKNOWN_EXCEPTION;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行下载操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downLoadFile</span><span class="params">(HttpServletRequest request, HttpServletResponse response, File file)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String fileName            = <span class="keyword">new</span> String(saveFileName.getBytes(), <span class="string">"ISO-8859-1"</span>);</span><br><span class="line">        <span class="comment">// 解析 HTTP 请求头，获取文件的读取范围</span></span><br><span class="line">        Range&lt;Integer&gt; range    = parseDownloadRange(request);    </span><br><span class="line">        <span class="keyword">int</span> length                = (<span class="keyword">int</span>)file.length();</span><br><span class="line">        <span class="keyword">int</span> begin                = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end                    = length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置 HTTP 响应头</span></span><br><span class="line">        response.setContentType(contentType);</span><br><span class="line">        response.setContentLength(length);</span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + fileName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 确定文件的读取范围（用于断点续传）</span></span><br><span class="line">        <span class="keyword">if</span>(range != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(range.getBegin()    != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                begin = range.getBegin();</span><br><span class="line">                <span class="keyword">if</span>(range.getEnd() != <span class="keyword">null</span>)</span><br><span class="line">                    end = range.getEnd();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(range.getEnd() != <span class="keyword">null</span>)</span><br><span class="line">                    begin = end + range.getEnd() + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            String contentRange = String.format(<span class="string">"bytes %d-%d/%d"</span>, begin, end, length);</span><br><span class="line">            response.setHeader(<span class="string">"Accept-Ranges"</span>, <span class="string">"bytes"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Content-Range"</span>, contentRange);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实际执行下载操作</span></span><br><span class="line">        doDownloadFile(response, file, begin, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实际执行下载操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDownloadFile</span><span class="params">(HttpServletResponse response, File file, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InputStream is    = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os    = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] b    = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            is            = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            os            = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 跳过已下载的文件内容</span></span><br><span class="line">            is.skip(begin);</span><br><span class="line">            <span class="comment">// I/O 读写</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i, left = end - begin + <span class="number">1</span>; left &gt; <span class="number">0</span> &amp;&amp; ((i = is.read(b, <span class="number">0</span>, Math.min(b.length, left))) != -<span class="number">1</span>); left -= i)</span><br><span class="line">                os.write(b, <span class="number">0</span>, i);</span><br><span class="line">            </span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>) &#123;<span class="keyword">try</span>&#123;is.close();&#125; <span class="keyword">catch</span>(IOException e) &#123;&#125;&#125;</span><br><span class="line">            <span class="keyword">if</span>(os != <span class="keyword">null</span>) &#123;<span class="keyword">try</span>&#123;os.close();&#125; <span class="keyword">catch</span>(IOException e) &#123;&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    / 文件下载结果枚举值 */</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Result</span><br><span class="line">    &#123;</span><br><span class="line">        / 成功 */</span><br><span class="line">        SUCCESS,</span><br><span class="line">        / 失败：文件不存在 */</span><br><span class="line">        FILE_NOT_FOUND,</span><br><span class="line">        / 失败：读写操作失败 */</span><br><span class="line">        READ_WRITE_FAIL,</span><br><span class="line">        / 失败：未知异常 */</span><br><span class="line">        UNKNOWN_EXCEPTION;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0163.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java 文件上传及下载&lt;br&gt;
    
    </summary>
    
      <category term="fileupload" scheme="http://m.iskei.cn/categories/fileupload/"/>
    
    
      <category term="fileupload" scheme="http://m.iskei.cn/tags/fileupload/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO Path and Files</title>
    <link href="http://m.iskei.cn/blog/58642.html"/>
    <id>http://m.iskei.cn/blog/58642.html</id>
    <published>2018-03-23T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0162.jpg" alt="image"></p><p>Java NIO Path接口和Files类配合操作文件<br><a id="more"></a></p><h2 id="Path接口"><a href="#Path接口" class="headerlink" title="Path接口"></a>Path接口</h2><hr><p>1、Path表示的是一个目录名序列，其后还可以跟着一个文件名，路径中第一个部件是根部件时就是绝对路径，例如 / 或 C:\ ，而允许访问的根部件取决于文件系统；</p><p>2、以根部件开始的路径是绝对路径，否则就是相对路径；</p><p>3、静态的<strong>Paths.get</strong>方法接受一个或多个字符串，字符串之间<strong>自动使用</strong>默认文件系统的路径分隔符连接起来（Unix是 /，Windows是 \ ），这就解决了跨平台的问题，接着解析连接起来的结果，如果不是合法路径就抛出InvalidPathException异常，否则就返回一个Path对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设是Unix的文件系统</span></span><br><span class="line">Path absolute = Paths.get(<span class="string">"/home"</span>, <span class="string">"cat"</span>); <span class="comment">//绝对路径 </span></span><br><span class="line">Path relative = Pahts.get(<span class="string">"ixenos"</span>, <span class="string">"config"</span>, <span class="string">"user.properties"</span>); <span class="comment">//相对路径</span></span><br></pre></td></tr></table></figure><p>4、由String路径获取Path对象</p><p><strong>get还可以获取一整条路径</strong>（即多个部件构成的单个字符串），例如从配置文件中读取路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String baseDir = properties.getProperty(<span class="string">"base.dir"</span>);</span><br><span class="line"> <span class="comment">//可能获得 /opt/ixenos 或者 C:\Program Files\ixenos</span></span><br><span class="line"> Path basePath = Paths.get(baseDir);</span><br></pre></td></tr></table></figure><p>5、组合或解析路径</p><p>　　1) 调用 <strong>p.resolve(q)</strong> 将按下面的规则返回一个Path：如果q是绝对路径，则返回q，否则<strong>追加路径</strong>返回 p/q 或者 p\q</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Path workRelative = Paths.get(<span class="string">"work"</span>);</span><br><span class="line">Path workPath = basePath.resolve(workRelative);</span><br><span class="line"> <span class="comment">//resolve也可以接受字符串形参</span></span><br><span class="line">Path workPath = basePath.resolve(<span class="string">"work"</span>);</span><br></pre></td></tr></table></figure><p>　　2) 调用 <strong>p.resolveSibling(“q”)</strong> 将解析指定路径 p 的父路径 o ，并<strong>产生兄弟路径</strong> o/q</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path tempPath = workPath.resolveSibling(<span class="string">"temp"</span>);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">   如果workPath是 /opt/ixenos/work</span></span><br><span class="line"><span class="comment">    那么将创建 /opt/ixenos/temp  </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>　　3) 调用 <strong>p.relativize(r)</strong> 将产生一个冗余路径q，对q进行解析将产生<strong>相对路径r，</strong>最终r不包含和p的交集路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    pathA为 /home/misty</span></span><br><span class="line"><span class="comment">    pathB为 /home/ixenos/config </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    现已pathA对pathB进行相对化操作，将产生冗余路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Path pathC = pathA.relativize(pathB); <span class="comment">//此时pathC为 ../ixenos/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    normalize方法将移除冗余部件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Path pathD = pathC.normalize(); <span class="comment">//pathD为 /ixenos/config</span></span><br></pre></td></tr></table></figure><p>　　4) <strong>toAbsolutePath</strong> 将产生给定路径的<strong>绝对路径</strong>，从根部件开始</p><p>　　5) Path类还有一些有用的断开和组合路径的方法，比如 <strong>getParent</strong>、<strong>getFileName</strong>、<strong>getRoot</strong>//获得根目录</p><p>　　6) Path有个<strong>toFile</strong>方法用来跟<strong>遗留类File类</strong>打交道，File类也有个toPath方法</p><h2 id="Files工具类"><a href="#Files工具类" class="headerlink" title="Files工具类"></a>Files工具类</h2><hr><h3 id="1、读写文件"><a href="#1、读写文件" class="headerlink" title="1、读写文件"></a>1、<strong>读写文件</strong></h3><p>方法签名:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> path **write**(Path path, <span class="keyword">byte</span>[] bytes, OpenOption... options)</span><br><span class="line">　<span class="function"><span class="keyword">static</span> path <span class="title">write</span><span class="params">(Path path, Iterable&lt;? extends CharSequence&gt; lines, OpenOption... options)</span></span></span><br></pre></td></tr></table></figure><p>这里只列举下面用到的方法，更多方法请看API文档…</p><p><strong>其中OpenOption是个nio接口，StandardOpenOption是其枚举实现类，各枚举实例功能请查看API文档</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Files提供的简便方法适用于处理中等长度的文本文件</span></span><br><span class="line"><span class="comment">    如果要处理的文件长度较大，或者二进制文件，那么还是应该使用经典的IO流 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//将文件所有内容读入byte数组中</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = Files.readAllBytes(path); <span class="comment">//传入Path对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//之后可以根据字符集构建字符串</span></span><br><span class="line">String content = <span class="keyword">new</span> String(bytes, charset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以直接当作行序列读入</span></span><br><span class="line">List&lt;String&gt; lines = Files.readAllLines(path, charset);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相反，也可以写一个字符串到文件中，默认是覆盖</span></span><br><span class="line">Files.write(path, content.getBytes(charset)); <span class="comment">//传入byte[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//追加内容，根据参数决定追加等功能</span></span><br><span class="line">Files.write(path, content.getBytes(charset), StandardOpenOption.APPEND); <span class="comment">//传入枚举对象，打开追加开关</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个行String的集合List写出到文件中</span></span><br><span class="line">Files.write(path, lines);</span><br></pre></td></tr></table></figure><h3 id="2、复制、剪切、删除"><a href="#2、复制、剪切、删除" class="headerlink" title="2、复制、剪切、删除"></a><strong>2、复制、剪切、删除</strong></h3><p>方法签名:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　<span class="function"><span class="keyword">static</span> path <span class="title">copy</span><span class="params">(Path source, Path target, CopyOption... options)</span></span></span><br><span class="line"><span class="function">　　<span class="keyword">static</span> path <span class="title">move</span><span class="params">(Path source, Path target, CopyOption... options)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Path path)</span> <span class="comment">//如果path不存在文件将抛出异常，此时调用下面的比较好</span></span></span><br><span class="line"><span class="function">　　<span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteIfExists</span><span class="params">(Path path)</span></span></span><br></pre></td></tr></table></figure><p>　　<a href="">这里只列举下面用到的方法，更多方法请看API文档…</a></p><p><strong>其中CopyOption是个nio接口，StandardCopyOption是其枚举实现类，各枚举实例功能请查看API文档</strong></p><p>　　其中有个<strong>ATOMIC_MOVE可以填入用来保证原子性操作</strong>，要么移动成功完成，要么源文件保持在原位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复制</span></span><br><span class="line">Files.copy(fromPath, toPath);</span><br><span class="line"><span class="comment">//剪切</span></span><br><span class="line">Files.move(fromPath, toPath);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    以上如果toPath已存在，那么操作失败，</span></span><br><span class="line"><span class="comment">    如果要覆盖，需传入参数REPLACE_EXISTING</span></span><br><span class="line"><span class="comment">    还要复制文件属性，传入COPY_ATTRIBUTES</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Files.copy(fromPath, toPath, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);</span><br></pre></td></tr></table></figure><h3 id="3、创建文件和目录"><a href="#3、创建文件和目录" class="headerlink" title="3、创建文件和目录"></a><strong>3、创建文件和目录</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建新目录，除了最后一个部件，其他必须是已存在的</span></span><br><span class="line">Files.createDirectory(path); </span><br><span class="line"><span class="comment">//创建路径中的中间目录，能创建不存在的中间部件</span></span><br><span class="line">Files.createDirectories(path);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   创建一个空文件，检查文件存在，如果已存在则抛出异常</span></span><br><span class="line"><span class="comment">   而检查文件存在是原子性的，因此在此过程中无法执行文件创建操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Files.createFile(path);</span><br><span class="line"><span class="comment">//添加前/后缀创建临时文件或临时目录</span></span><br><span class="line">Path newPath = Files.createTempFile(dir, prefix, suffix);</span><br><span class="line">Path newPath = Files.createTempDirectory(dir, prefix);</span><br></pre></td></tr></table></figure><h3 id="4、获取文件信息"><a href="#4、获取文件信息" class="headerlink" title="4、获取文件信息"></a><strong>4、获取文件信息</strong></h3><p>略，具体看API文档，或者corejava page51</p><h3 id="5、迭代目录中的文件"><a href="#5、迭代目录中的文件" class="headerlink" title="5、迭代目录中的文件"></a>5、迭代目录中的文件</h3><p>　　<strong>旧的File类</strong>有两个方法获取目录中所有文件构成的字符串数组，String[] list() 和String[] list(FileFilter filter)，但是<strong>当目录中包含大量文件时，这两方法性能会非常低。</strong></p><p><strong>原因分析：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//File类list所有文件</span></span><br><span class="line">    <span class="keyword">public</span> String[] list() &#123;</span><br><span class="line">        SecurityManager security = System.getSecurityManager(); <span class="comment">//文件系统权限获取</span></span><br><span class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">            security.checkRead(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isInvalid()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fs.list(<span class="keyword">this</span>); <span class="comment">//底层调用FileSystem的list</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//FileSystem抽象类的list</span></span><br><span class="line"> <span class="comment">//File类中定义fs是由DefaultFileSystem静态生成的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> FileSystem fs = DefaultFileSystem.getFileSystem();</span><br><span class="line"></span><br><span class="line"><span class="comment">//因此我们来看一下DefaultFileSystem类，发现是生成一个WinNtFileSystem对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultFileSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the FileSystem object for Windows platform.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileSystem <span class="title">getFileSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WinNTFileSystem();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//而WinNtFileSystem类继承于FileSystem抽象类，这里我们主要观察它的list(File file)方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String[] list(File f);</span><br><span class="line"><span class="comment">/*我们可以看到这是个native方法，说明list的操作是由操作系统的文件系统控制的，当目录中包含大量的文件时，这个方法的性能将会非常低。</span></span><br><span class="line"><span class="comment">由此为了替代，NIO的Files类设计了newDirectoryStream(Path dir)及其重载方法，将生成Iterable对象（可用foreach迭代）*/</span><span class="comment">//~</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//回调过滤</span></span><br><span class="line">    <span class="keyword">public</span> String[] list(FilenameFilter filter) &#123; <span class="comment">//采用接口回调</span></span><br><span class="line">        String names[] = list(); <span class="comment">//调用list所有</span></span><br><span class="line">        <span class="keyword">if</span> ((names == <span class="keyword">null</span>) || (filter == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> names;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; v = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; names.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.accept(<span class="keyword">this</span>, names[i])) &#123;  <span class="comment">//回调FilenameFileter对象的accept方法</span></span><br><span class="line">                v.add(names[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v.toArray(<span class="keyword">new</span> String[v.size()]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="这时候高科技来了——Files获得可迭代的目录流，"><a href="#这时候高科技来了——Files获得可迭代的目录流，" class="headerlink" title="这时候高科技来了——Files获得可迭代的目录流，"></a>这时候高科技来了——Files获得可迭代的目录流，</h3><h4 id="传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！"><a href="#传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！" class="headerlink" title="传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！"></a>传入一个目录Path，遍历子孙目录返回一个目录Path的Stream，注意这里所有涉及的Path都是目录而不是文件！</h4><p>因此，Files类设计了<strong>newDirectoryStream(Path dir)</strong>及其重载方法，将生成Iterable对象（可用foreach迭代）</p><p>遍历目录得到一个可迭代的子孙文件集合</p><table><thead><tr><th><code>staticDirectoryStream&lt;Path&gt;</code></th><th><code>newDirectoryStream(Path dir)</code>Opens a directory, returning a <a href=""><code>DirectoryStream</code></a> to iterate over all entries in the directory.</th></tr></thead><tbody><tr><td><code>staticDirectoryStream&lt;Path&gt;</code></td><td><code>newDirectoryStream(Path dir, DirectoryStream.Filter&lt;? superPath&gt; filter)</code>Opens a directory, returning a <a href=""><code>DirectoryStream</code></a> to iterate over the entries in the directory.</td></tr><tr><td><code>staticDirectoryStream&lt;Path&gt;</code></td><td><code>newDirectoryStream(Path dir, String glob)</code></td></tr></tbody></table><p>　　返回一个 <strong>目录流 ，可以看成一个存放着全部Path的实现了Iterable的集合</strong>，</p><p>　　　　因此可用迭代器或foreach迭代，只是使用迭代器的时候要注意不能invoke另一个Iterator：</p><ul><li><ul><li><strong>While DirectoryStream extends Iterable, it is not a general-purpose Iterable as it supports only a single Iterator; invoking the iterator method to obtain a second or subsequent iterator throws IllegalStateException.</strong> </li></ul></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(dir))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(Path entry : entries)</span><br><span class="line">    &#123;</span><br><span class="line">         ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　可以传入glob参数，即使用<strong>glob模式</strong>来<strong>过滤文件</strong>（以取代<code>list(FileFilter filter)：newDirectoryStream(Path dir, String glob)</code> 注意是String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(DirectoryStream&lt;Path&gt; entries = Files.newDirectoryStream(dir, <span class="string">"*.java"</span>)) <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　<strong>glob模式</strong></p><p>所谓的 glob 模式是指 shell 所使用的简化了的<strong>正则表达式</strong>。</p><p>1.星号 <em> 匹配<strong>路径组成部分</strong>0个或多个字符；例如 </em>.java 匹配<strong>当前目录中</strong>的所有Java文件</p><p>2.两星号 <strong> 匹配</strong>跨目录边界<strong>0个或多个字符；例如 </strong>.java 匹配在<strong>所有子目录中</strong>的Java文件</p><p>3.问号（?）只匹配一个字符；例如 ????.java 匹配所有<strong>四个字符</strong>的Java文件，不包括扩展名；使用?是因为*是通配符不指定数量</p><p>4.[…] 匹配<strong>一个</strong>字符集合，可以用连线 [0-9] 和取反符 [!0-9]；例如 Test[0-9A-F].java 匹配Testx.java，假设x是一个十六进制数字，[0-9A-F]是匹配单个字符为十六进制数字，比如B（十六进制不区分大小写）</p><p>　　<em>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</em>。</p><p>5.{…} 匹配由逗号隔开的<strong>多个可选项</strong>之中的一个；例如 *.{java,class} 匹配所有Java文件和类class文件</p><p>6.\ 转义上述任意模式中的字符；例如 <em>** 匹配所有子目录中文件名包含</em>的文件，这里为 ** 转义，前面是匹配0个或多个字符</p><p>下面是网友总结的Glob模式：</p><table><thead><tr><th>Glob模式</th><th>描述</th></tr></thead><tbody><tr><td>*.txt</td><td>匹配所有扩展名为.txt的文件</td></tr><tr><td>*.{html,htm}</td><td>匹配所有扩展名为.html或.htm的文件。{ }用于组模式，它使用逗号分隔</td></tr><tr><td>?.txt</td><td>匹配任何单个字符做文件名且扩展名为.txt的文件</td></tr><tr><td><em>.</em></td><td>匹配所有含扩展名的文件</td></tr><tr><td>C:\Users*</td><td>匹配所有在C盘Users目录下的文件。反斜线“\”用于对紧跟的字符进行转义</td></tr><tr><td>/home/**</td><td>UNIX平台上匹配所有/home目录及子目录下的文件。**用于匹配当前目录及其所有子目录</td></tr><tr><td>[xyz].txt</td><td>匹配所有单个字符作为文件名，且单个字符只含“x”或“y”或“z”三种之一，且扩展名为.txt的文件。方括号[]用于指定一个集合</td></tr><tr><td>[a-c].txt</td><td>匹配所有单个字符作为文件名，且单个字符只含“a”或“b”或“c”三种之一，且扩展名为.txt的文件。减号“-”用于指定一个范围，且只能用在方括号[]内</td></tr><tr><td>[!a].txt</td><td>匹配所有单个字符作为文件名，且单个字符不能包含字母“a”，且扩展名为.txt的文件。叹号“!”用于否定</td></tr></tbody></table><h3 id="遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）"><a href="#遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）" class="headerlink" title="遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）"></a>遍历得到某个目录的所有子孙文件集合再迭代不够爽？来，我们来直接遍历某个目录的所有子孙成员（包括目录和文件）</h3><p>　　我们可以调用Files类的<strong>walkFileTree</strong>方法，并传入一个FileVisitor接口类型的对象（还有更多方法在API里等你发现……）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*传入一个FileVisitor子类的匿名对象*/</span></span><br><span class="line">Files.walkFileTree(dir, <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">//walkFileTree回调此方法来遍历所有子孙</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path path, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">              <span class="keyword">if</span>(attrs.isDirectory()) <span class="comment">//自定义的选择，属于业务代码，这和walkFileTree的宗旨(遍历所有子孙成员)无关</span></span><br><span class="line">                  System.out.println(path);</span><br><span class="line">              <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFileFailed</span><span class="params">(Path path, IOException exc)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="咱们来总结一下，"><a href="#咱们来总结一下，" class="headerlink" title="咱们来总结一下，"></a>咱们来总结一下，</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Files.newDirectoryStream(Path dir) <span class="comment">//遍历后返回一个可迭代的子孙文件集合；</span></span><br><span class="line">Files.walkFileTree(Path dir, FileVisitor fv) <span class="comment">//是一个遍历子孙目录和文件的过程；</span></span><br></pre></td></tr></table></figure><h2 id="ZIP文件系统"><a href="#ZIP文件系统" class="headerlink" title="ZIP文件系统"></a>ZIP文件系统</h2><hr><p>由上文知道，Paths类会在<strong>默认的文件系统</strong>中查找路径，即在用户本地磁盘中的文件。</p><p>其实，我们也可以有其他的文件系统，比如<strong>ZIP文件系统</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*假设zipname是某个ZIP文件的名字*/</span></span><br><span class="line">FileSystem fs = FileSystems.newFileSystem(Paths.get(zipname), <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p> 上述代码将建立一个<strong>基于zipname的文件系统，它包含ZIP文档中的所有文件</strong>。</p><p>　　1）如果知道<strong>文件名（String类型）</strong>，那么从这个ZIP文档中复制出这个文件就很容易：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Files.copy(fs.getPath(fileName), targetPath);</span><br></pre></td></tr></table></figure><p>　　　　Q：fs.getPath是使用了ZIP文件系统来getPath，那么默认的文件系统能调用吗？</p><p>　　　　A：能。FileSystem类中有一个静态的getDefault()方法，返回一个默认的文件系统对象，同样可以由文件名getPath。</p><p>　　　　　　*具体getPath(String name)是遍历还是随机访问，有空再去看源码实现。<br>　　2）要列出ZIP文档中的所有文件，同样可以用walkFileTree遍历文件树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FileSystem fs = FileSystems.newFileSystem(Paths.get(fileName), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//walkFileTree需要传入一个要被遍历的目录Path，和一个FileVisitor对象</span></span><br><span class="line">Files.walkFileTree(fs.getPath(<span class="string">"/"</span>), </span><br><span class="line">        newSimpleFileVisitor&lt;Path&gt;()&#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">                     System.out.println(file);</span><br><span class="line">                     <span class="keyword">return</span> FileVisitResult.CONTINUE; </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0162.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java NIO Path接口和Files类配合操作文件&lt;br&gt;
    
    </summary>
    
      <category term="NIO" scheme="http://m.iskei.cn/categories/NIO/"/>
    
    
      <category term="NIO" scheme="http://m.iskei.cn/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>WebUploader上传组件</title>
    <link href="http://m.iskei.cn/blog/41980.html"/>
    <id>http://m.iskei.cn/blog/41980.html</id>
    <published>2018-03-22T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.510Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0161.jpg" alt="image"></p><p>大文件上传组件<br><a id="more"></a></p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>$(function(){…});   jQuery(function($) {…});  $(document).ready(function(){…})</code>这三个的作用是一样的，本人比较需要用第一种、书写简单。文档载入完成后执行的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个div用来存放文件上传时的信息</span></span><br><span class="line"><span class="comment">//一个div用来存放上传相关的按钮</span></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"./web-uploader/webuploader.css"</span> /&gt;</span><br><span class="line">&lt;!--<span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">style</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./jQuery/jquery-2.2.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>--&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./web-uploader/webuploader.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;div id=<span class="string">"uploader"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wu-example"</span>&gt;</span><br><span class="line">    &lt;!--用来存放文件信息--&gt;</span><br><span class="line">    &lt;div id=<span class="string">"thelist"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"uploader-list"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btns"</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"picker"</span>&gt;选择文件&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button id="ctlBtn" class="btn btn-default"&gt;开始上传&lt;/</span>button&gt;</span><br><span class="line">        &lt;button id=<span class="string">"goBack"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span>&gt;返回&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span>*</span><br><span class="line"><span class="number">1</span>、首先用WebUploader.create创建一个 WebUploader对象 ，并在create中添加自定义配置项</span><br><span class="line"><span class="number">2</span>、然后手动给WebUploader对象添加事件，用到的基本事件是 </span><br><span class="line">fileQueued 文件被添加进队列的时候，在thelist div 中显示文件信息</span><br><span class="line">uploadProgress 文件上传过程中创建进度条实时显示</span><br><span class="line">uploadSuccess</span><br><span class="line">uploadError </span><br><span class="line">uploadComplete 在文件上传完后都会触发uploadComplete事件</span><br><span class="line"><span class="number">3</span>、最后 调用upload()方法实现上传，</span><br><span class="line">*<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var uploader = WebUploader.create(&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ swf文件路径</span></span><br><span class="line"><span class="regexp">swf:  '/</span>js/Uploader.swf<span class="string">',</span></span><br><span class="line"><span class="string">formData:&#123;"dn":$("#requestDn").val()&#125;,//参数列表</span></span><br><span class="line"><span class="string">// 文件接收服务端。</span></span><br><span class="line"><span class="string">server: '</span>/tp5/index/user/uploadFile<span class="string">',</span></span><br><span class="line"><span class="string">// 选择文件的按钮。可选。</span></span><br><span class="line"><span class="string">// 内部根据当前运行是创建，可能是input元素，也可能是flash.</span></span><br><span class="line">pick: '#picker',</span><br><span class="line"><span class="comment">// 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！</span></span><br><span class="line">resize: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 只允许选择图片文件。</span></span><br><span class="line">accept: &#123;</span><br><span class="line">title: <span class="string">'file'</span>,</span><br><span class="line">extensions: <span class="string">'cer'</span></span><br><span class="line"><span class="comment">//                mimeTypes: '.cer,'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> $list = $(<span class="string">"#thelist"</span>);</span><br><span class="line">uploader.on( <span class="string">'fileQueued'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$list.append( <span class="string">'&lt;div id="'</span> + file.id + <span class="string">'" class="item"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;h4 class="info"&gt;'</span> + file.name + <span class="string">'&lt;/h4&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;p class="state"&gt;等待上传...&lt;/p&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;p class="progress progress-bar"&gt;上传进度...&lt;/p&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/div&gt;'</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploader.on( <span class="string">'uploadSuccess'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$( <span class="string">'#'</span>+file.id ).find(<span class="string">'p.state'</span>).text(<span class="string">'已上传'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 文件上传过程中创建进度条实时显示。</span></span><br><span class="line">uploader.on( <span class="string">'uploadProgress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file, percentage </span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> $li = $( <span class="string">'#'</span>+file.id ),</span><br><span class="line">$percent = $li.find(<span class="string">'.progress .progress-bar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免重复创建</span></span><br><span class="line"><span class="keyword">if</span> ( !$percent.length ) &#123;</span><br><span class="line">$percent = $(<span class="string">'&lt;div class="progress progress-striped active"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;div class="progress-bar" role="progressbar" style="width: 0%"&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line"><span class="string">'&lt;/div&gt;'</span>).appendTo( $li ).find(<span class="string">'.progress-bar'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$li.find(<span class="string">'p.state'</span>).text(<span class="string">'上传中'</span>);</span><br><span class="line"></span><br><span class="line">$percent.css( <span class="string">'width'</span>, percentage * <span class="number">100</span> + <span class="string">'%'</span> );</span><br><span class="line">&#125;);</span><br><span class="line">uploader.on( <span class="string">'uploadError'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$( <span class="string">'#'</span>+file.id ).find(<span class="string">'p.state'</span>).text(<span class="string">'上传出错'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploader.on( <span class="string">'uploadComplete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">$( <span class="string">'#'</span>+file.id ).find(<span class="string">'.progress'</span>).fadeOut();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#ctlBtn"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">uploader.upload();</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#goBack"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#uploadFileDiv"</span>).empty();</span><br><span class="line">$(<span class="string">"#uploadFile"</span>).removeClass(<span class="string">"hidden"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h4><p>这里是简单介绍，具体接口参考 </p><p>webuploader接口文档地址</p><p>Web Uploader内部类的详细说明，以下提及的功能类，都可以在 WebUploader 这个变量中访问到。</p><p>也就是说下面提到的 Base类 、Mediator类 、file类 、Queue类 都可以直接用 WebUploader 创建的变量直接访问，</p><p>例如下面创建的 uploader 变量，就可以直接访问 Base类 的 uploader.browser.ie</p><p>//Demo中使用的是WebUploader.create方法来初始化的，实际上可直接访问WebUploader.Uploader</p><h5 id="Uploader类-上传入口类"><a href="#Uploader类-上传入口类" class="headerlink" title="Uploader类 上传入口类"></a>Uploader类 上传入口类</h5><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h6><p>下面所有参数都是可选的，并且都有默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uploader = WebUploader.Uploader(&#123;</span><br><span class="line"><span class="comment">//几个常用的参数：swf,pick,formData,runtimeOrder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有参数列表</span></span><br><span class="line">swf: <span class="string">'path_of_swf/Uploader.swf'</span>,</span><br><span class="line">dnd: <span class="string">'#dndArea'</span>, <span class="comment">// [默认值：undefined] 指定Drag And Drop拖拽的容器，如果不指定，则不启动。</span></span><br><span class="line">disableGlobalDnd: <span class="literal">true</span>,, <span class="comment">// [默认值：false] 是否禁掉整个页面的拖拽功能，如果不禁用，图片拖进来的时候会默认被浏览器打开</span></span><br><span class="line">paste: <span class="string">'#uploader'</span>, <span class="comment">// [默认值：undefined] 指定监听paste事件的容器，如果不指定，不启用此功能。此功能为通过粘贴来添加截屏的图片。建议设置为document.body.</span></span><br><span class="line">pick:<span class="string">'#filePicker'</span>,<span class="comment">//也可以用下面的方式详细配置</span></span><br><span class="line"><span class="comment">// &#123;Selector, Object&#125;  [默认值：undefined] 指定选择文件的按钮容器，不指定则不创建按钮。</span></span><br><span class="line">pick: &#123;</span><br><span class="line">id: <span class="string">'#filePicker'</span>,<span class="comment">//Seletor|dom 指定选择文件的按钮容器，不指定则不创建按钮。注意 这里虽然写的是 id, 但是不是只支持 id, 还支持 class, 或者 dom 节点。</span></span><br><span class="line">label: <span class="string">'点击选择图片'</span>,<span class="comment">//请采用 innerHTML 代替</span></span><br><span class="line">innerHTML: <span class="string">"点击选择图片"</span>,<span class="comment">// 指定按钮文字。不指定时优先从指定的容器中看是否自带文字。</span></span><br><span class="line">multiple:<span class="literal">true</span> <span class="comment">//是否开起同时选择多个文件能力。</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//限制上传的文件类型</span></span><br><span class="line">accept: &#123;</span><br><span class="line">title: <span class="string">'Images'</span>,<span class="comment">// &#123;String&#125; 文字描述</span></span><br><span class="line">extensions: <span class="string">'gif,jpg,jpeg,bmp,png,rar'</span>,<span class="comment">// &#123;String&#125; 允许的文件后缀，不带点，多个用逗号分割。</span></span><br><span class="line">mimeTypes: <span class="string">'image/gif，image/jpg，image/jpeg，image/bmp，image/png，.rar'</span><span class="comment">// 多个用逗号分割。</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 设置缩略图。</span></span><br><span class="line">thumb: &#123;</span><br><span class="line">width: <span class="number">110</span>,</span><br><span class="line">height: <span class="number">110</span>,</span><br><span class="line"><span class="comment">// 图片质量，只有type为`image/jpeg`的时候才有效。</span></span><br><span class="line">quality: <span class="number">70</span>,</span><br><span class="line"><span class="comment">// 是否允许放大，如果想要生成小图的时候不失真，此选项应该设置为false.</span></span><br><span class="line">allowMagnify: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 是否允许裁剪。是否采用裁剪模式。如果采用这样可以避免空白内容。</span></span><br><span class="line">crop: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 为空的话则保留原有图片格式。</span></span><br><span class="line"><span class="comment">// 否则强制转换成指定的类型。</span></span><br><span class="line">type: <span class="string">'image/jpeg'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 配置压缩的图片的选项。如果此选项为false, 则图片在上传前不进行压缩。</span></span><br><span class="line">compress: &#123;</span><br><span class="line">width: <span class="number">1600</span>,</span><br><span class="line">height: <span class="number">1600</span>,</span><br><span class="line"><span class="comment">// 图片质量，只有type为`image/jpeg`的时候才有效。</span></span><br><span class="line">quality: <span class="number">90</span>,</span><br><span class="line"><span class="comment">// 是否允许放大，如果想要生成小图的时候不失真，此选项应该设置为false.</span></span><br><span class="line">allowMagnify: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 是否允许裁剪。</span></span><br><span class="line">crop: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 是否保留头部meta信息。</span></span><br><span class="line">preserveHeaders: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 如果发现压缩后文件大小比原来还大，则使用原来图片</span></span><br><span class="line"><span class="comment">// 此属性可能会影响图片自动纠正功能</span></span><br><span class="line">noCompressIfLarger: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 单位字节，如果图片大小小于此值，不会采用压缩。</span></span><br><span class="line">compressSize: <span class="number">0</span></span><br><span class="line">&#125;, </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">auto: <span class="literal">true</span>, <span class="comment">// [默认值：false] 设置为 true 后，不需要手动调用上传，有文件选择即开始上传。</span></span><br><span class="line">runtimeOrder: <span class="string">'flash'</span>, <span class="comment">// [默认值：html5,flash] 指定运行时启动顺序。默认会想尝试 html5 是否支持，如果支持则使用 html5, 否则则使用 flash.可以将此值设置成 flash，来强制使用 flash 运行时。</span></span><br><span class="line">prepareNextFile:<span class="literal">false</span>, <span class="comment">// [默认值：false] 是否允许在文件传输时提前把下一个文件准备好。 对于一个文件的准备工作比较耗时，比如图片压缩，md5序列化。 如果能提前在当前文件传输期处理，可以节省总体耗时。</span></span><br><span class="line">chunked:<span class="literal">false</span>, <span class="comment">// [默认值：false] 是否要分片处理大文件上传。</span></span><br><span class="line">chunkSize: <span class="number">512</span> * <span class="number">1024</span>,<span class="comment">// [默认值：5242880] 如果要分片，分多大一片？ 默认大小为5M.</span></span><br><span class="line">chunkRetry:<span class="number">2</span>, <span class="comment">// [默认值：2] 如果某个分片由于网络问题出错，允许自动重传多少次？</span></span><br><span class="line">threads:<span class="number">3</span>, <span class="comment">// [默认值：3] 上传并发数。允许同时最大上传进程数。</span></span><br><span class="line">formData: &#123;<span class="string">"data"</span>:<span class="string">"value"</span>,<span class="string">"data"</span>:<span class="string">"value"</span>&#125;, <span class="comment">// [默认值：&#123;&#125;] 文件上传请求的参数表，每次发送都会发送此对象中的参数。</span></span><br><span class="line">fileVal:<span class="string">"file"</span>, <span class="comment">// [默认值：'file'] 设置文件上传域的name。</span></span><br><span class="line">method :<span class="string">"POST"</span>, <span class="comment">// [默认值：'POST'] 文件上传方式，POST或者GET。</span></span><br><span class="line">sendAsBinary :<span class="literal">false</span>, <span class="comment">// [默认值：false] 是否已二进制的流的方式发送文件，这样整个上传内容php://input都为文件内容， 其他参数在$_GET数组中。</span></span><br><span class="line">fileNumLimit :<span class="number">10</span>, <span class="comment">// [默认值：undefined] 验证文件总数量, 超出则不允许加入队列。</span></span><br><span class="line">fileSizeLimit : <span class="number">200</span> * <span class="number">1024</span> * <span class="number">1024</span>,    <span class="comment">// 200 M  [默认值：undefined] 验证文件总大小是否超出限制, 超出则不允许加入队列。</span></span><br><span class="line">fileSingleSizeLimit: <span class="number">50</span> * <span class="number">1024</span> * <span class="number">1024</span>,    <span class="comment">// 50 M [默认值：undefined] 验证单个文件大小是否超出限制, 超出则不允许加入队列。</span></span><br><span class="line">duplicate :<span class="literal">true</span>, <span class="comment">// [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.</span></span><br><span class="line">disableWidgets: &#123;<span class="built_in">String</span>, <span class="built_in">Array</span>&#125;, <span class="comment">// [默认值：undefined] 默认所有 Uploader.register 了的 widget 都会被加载，如果禁用某一部分，请通过此 option 指定黑名单。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="uploader对象的选项"><a href="#uploader对象的选项" class="headerlink" title="uploader对象的选项"></a>uploader对象的选项</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、option() <span class="comment">//获取或者设置Uploader配置项。</span></span><br><span class="line"><span class="comment">// 修改后图片上传前，尝试将图片压缩到1600 * 1600</span></span><br><span class="line">uploader.option( <span class="string">'compress'</span>, &#123;</span><br><span class="line">width: <span class="number">1600</span>,</span><br><span class="line">height: <span class="number">1600</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">2</span>、getStats() <span class="comment">//获取文件统计信息。返回一个包含一下信息的对象。</span></span><br><span class="line"><span class="comment">//successNum 上传成功的文件数</span></span><br><span class="line"><span class="comment">//progressNum 上传中的文件数</span></span><br><span class="line"><span class="comment">//cancelNum 被删除的文件数</span></span><br><span class="line"><span class="comment">//invalidNum 无效的文件数</span></span><br><span class="line"><span class="comment">//uploadFailNum 上传失败的文件数</span></span><br><span class="line"><span class="comment">//queueNum 还在队列中的文件数</span></span><br><span class="line"><span class="comment">//interruptNum 被暂停的文件数</span></span><br><span class="line">stats = uploader.getStats();</span><br><span class="line"><span class="keyword">if</span> ( stats.successNum &amp;&amp; !stats.uploadFailNum ) &#123;</span><br><span class="line">setState( <span class="string">'finish'</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>、destroy() <span class="comment">//销毁 webuploader 实例</span></span><br><span class="line"><span class="number">4</span>、addButton() <span class="comment">//添加文件选择按钮，如果一个按钮不够，需要调用此方法来添加。参数跟options.pick一致。</span></span><br><span class="line">uploader.addButton(&#123;</span><br><span class="line">id: <span class="string">'#filePicker2'</span>,</span><br><span class="line">label: <span class="string">'继续添加'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="number">5</span>、makeThumb() <span class="comment">//生成缩略图，此过程为异步，所以需要传入callback。 通常情况在图片加入队里后调用此方法来生成预览图以增强交互效果。</span></span><br><span class="line"><span class="comment">//当 width 或者 height 的值介于 0 - 1 时，被当成百分比使用。</span></span><br><span class="line"><span class="comment">//callback中可以接收到两个参数。</span></span><br><span class="line"><span class="comment">//第一个为error，如果生成缩略图有错误，此error将为真。</span></span><br><span class="line"><span class="comment">//第二个为ret, 缩略图的Data URL值。</span></span><br><span class="line"><span class="comment">//注意 Date URL在IE6/7中不支持，所以不用调用此方法了，直接显示一张暂不支持预览图片好了。 也可以借助服务端，将 base64 数据传给服务端，生成一个临时文件供预览。</span></span><br><span class="line">uploader.makeThumb( file, <span class="function"><span class="keyword">function</span>(<span class="params"> error, src </span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( error ) &#123;</span><br><span class="line">$wrap.text( <span class="string">'不能预览'</span> );</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( isSupportBase64 ) &#123;</span><br><span class="line">img = $(<span class="string">'&lt;img src="'</span>+src+<span class="string">'"&gt;'</span>);</span><br><span class="line">$wrap.empty().append( img );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$.ajax(<span class="string">'../../server/preview.php'</span>, &#123;</span><br><span class="line">method: <span class="string">'POST'</span>,</span><br><span class="line">data: src,</span><br><span class="line">dataType:<span class="string">'json'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> response </span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (response.result) &#123;</span><br><span class="line">img = $(<span class="string">'&lt;img src="'</span>+response.result+<span class="string">'"&gt;'</span>);</span><br><span class="line">$wrap.empty().append( img );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$wrap.text(<span class="string">"预览出错"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, thumbnailWidth, thumbnailHeight );</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、md5File()<span class="comment">// 计算文件 md5 值，返回一个 promise 对象，可以监听 progress 进度。</span></span><br><span class="line"><span class="number">7</span>、addFiles()  <span class="comment">//添加文件到队列</span></span><br><span class="line"><span class="number">8</span>、removeFile()  <span class="comment">//移除某一文件, 默认只会标记文件状态为已取消，如果第二个参数为 true 则会从 queue 中移除</span></span><br><span class="line"><span class="number">9</span>、getFiles()  <span class="comment">//返回指定状态的文件集合，不传参数将返回所有状态的文件。</span></span><br><span class="line"><span class="number">10</span>、retry() <span class="comment">//重试上传，重试指定文件，或者从出错的文件开始重新上传。</span></span><br><span class="line"><span class="number">11</span>、sort() <span class="comment">//排序队列中的文件，在上传之前调整可以控制上传顺序。</span></span><br><span class="line"><span class="number">12</span>、reset() <span class="comment">//重置uploader。目前只重置了队列。</span></span><br><span class="line"><span class="number">13</span>、predictRuntimeType() <span class="comment">//预测Uploader将采用哪个Runtime</span></span><br><span class="line"><span class="number">14</span>、upload() <span class="comment">//开始上传。此方法可以从初始状态调用开始上传流程，也可以从暂停状态调用，继续上传流程。可以指定开始某一个文件</span></span><br><span class="line"><span class="number">15</span>、stop() <span class="comment">//暂停上传。第一个参数为是否中断上传当前正在上传的文件。如果第一个参数是文件，则只暂停指定文件。</span></span><br><span class="line"><span class="number">16</span>、cancelFile() <span class="comment">//标记文件状态为已取消, 同时将中断文件传输。</span></span><br><span class="line"><span class="number">17</span>、isInProgress() <span class="comment">//判断Uplaoder是否正在上传中。</span></span><br><span class="line"><span class="number">18</span>、skipFile() <span class="comment">//掉过一个文件上传，直接标记指定文件为已上传状态。</span></span><br><span class="line"><span class="number">19</span>、request() <span class="comment">//发送命令。当传入callback或者handler中返回promise时。返回一个当所有handler中的promise都完成后完成的新promise。</span></span><br><span class="line"></span><br><span class="line"><span class="number">20</span>、Uploader.register() <span class="comment">//添加组件</span></span><br><span class="line"><span class="number">21</span>、Uploader.unRegister() <span class="comment">//删除插件，只有在注册时指定了名字的才能被删除。</span></span><br></pre></td></tr></table></figure><h6 id="事件说明"><a href="#事件说明" class="headerlink" title="事件说明"></a>事件说明</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">dndAccept :<span class="comment">// 阻止,此事件可以拒绝某些类型的文件拖入进来。目前只有 chrome 提供这样的 API，且只能通过 mime-type 验证。</span></span><br><span class="line">beforeFileQueued :<span class="comment">// 当文件被加入队列之前触发，此事件的handler返回值为false，则此文件不会被添加进入队列。</span></span><br><span class="line">fileQueued :<span class="comment">// 当文件被加入队列以后触发。</span></span><br><span class="line">filesQueued :<span class="comment">// 当一批文件添加进队列以后触发。</span></span><br><span class="line">fileDequeued :<span class="comment">// 当文件被移除队列后触发。</span></span><br><span class="line">reset :<span class="comment">// 当 uploader 被重置的时候触发。</span></span><br><span class="line">startUpload :<span class="comment">// 当开始上传流程时触发。</span></span><br><span class="line">stopUpload :<span class="comment">// 当开始上传流程暂停时触发。</span></span><br><span class="line">uploadFinished :<span class="comment">// 当所有文件上传结束时触发。</span></span><br><span class="line">uploadStart :<span class="comment">// 某个文件开始上传前触发，一个文件只会触发一次。</span></span><br><span class="line">uploadBeforeSend :<span class="comment">// 当某个文件的分块在发送前触发，主要用来询问是否要添加附带参数，大文件在开起分片上传的前提下此事件可能会触发多次。</span></span><br><span class="line">uploadAccept :<span class="comment">// 当某个文件上传到服务端响应后，会派送此事件来询问服务端响应是否有效。如果此事件handler返回值为false, 则此文件将派送server类型的uploadError事件。</span></span><br><span class="line">uploadProgress :<span class="comment">// 上传过程中触发，携带上传进度。</span></span><br><span class="line">uploadError :<span class="comment">// 当文件上传出错时触发。</span></span><br><span class="line">uploadSuccess :<span class="comment">// 当文件上传成功时触发。</span></span><br><span class="line">uploadComplete :<span class="comment">// 不管成功或者失败，文件上传完成时触发。</span></span><br><span class="line">error :<span class="comment">// 当validate不通过时，会以派送错误事件的形式通知调用者。通过upload.on('error', handler)可以捕获到此类错误，目前有以下错误会在特定的情况下派送错来。</span></span><br><span class="line"><span class="comment">//Q_EXCEED_NUM_LIMIT 在设置了fileNumLimit且尝试给uploader添加的文件数量超出这个值时派送。</span></span><br><span class="line"><span class="comment">//Q_EXCEED_SIZE_LIMIT 在设置了Q_EXCEED_SIZE_LIMIT且尝试给uploader添加的文件总大小超出这个值时派送。</span></span><br><span class="line"><span class="comment">//Q_TYPE_DENIED 当文件类型不满足时触发。。</span></span><br><span class="line"><span class="comment">/*Web Uploader内部类的详细说明，以下提及的功能类，都可以在`WebUploader`这个变量中访问到。 即 Base类 Mediator类  File类都可以在`WebUploader`这个变量中访问到*/</span></span><br></pre></td></tr></table></figure><h5 id="Base类"><a href="#Base类" class="headerlink" title="Base类"></a>Base类</h5><p>基础类方法 WebUploader 基础类，提供一些简单常用的方法  WebUploader.browser.ie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">create() <span class="comment">//创建Uploader实例，等同于new Uploader( opts );</span></span><br><span class="line">version <span class="comment">//当前版本号</span></span><br><span class="line">$<span class="comment">//引用依赖的jQuery或者Zepto对象</span></span><br><span class="line">browser  <span class="comment">//简单的浏览器检查结果</span></span><br><span class="line">os  android、ios</span><br><span class="line">inherits <span class="comment">//实现类与类之间的继承</span></span><br><span class="line">noop  <span class="comment">//一个不做任何事情的方法。可以用来赋值给默认的callback</span></span><br><span class="line">bindFn <span class="comment">//返回一个新的方法，此方法将已指定的context来执行</span></span><br><span class="line">log <span class="comment">//引用Console.log如果存在的话，否则引用一个空函数noop。</span></span><br><span class="line">slice <span class="comment">//被uncurrythis的数组slice方法。 将用来将非数组对象转化成数组对象</span></span><br><span class="line">guid <span class="comment">//生成唯一的ID</span></span><br><span class="line">formatSize <span class="comment">//格式化文件大小, 输出成带单位的字符串</span></span><br><span class="line">Deferred <span class="comment">//创建一个Deferred对象。 详细的Deferred用法说明，请参照jQuery的API文档。Deferred对象在钩子回掉函数中经常要用到，用来处理需要等待的异步操作。</span></span><br><span class="line">isPromise <span class="comment">//判断传入的参数是否为一个 promise 对象。</span></span><br><span class="line">when <span class="comment">//返回一个promise，此promise在所有传入的promise都完成了后完成</span></span><br></pre></td></tr></table></figure><h5 id="Mediator类"><a href="#Mediator类" class="headerlink" title="Mediator类"></a>Mediator类</h5><p>事件处理类，可以独立使用，也可以扩展给对象使用 中介，它本身是个单例，但可以通过installTo方法，使任何对象具备事件行为。 主要目的是负责模块与模块之间的合作，降低耦合度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on once off trigger installTo</span><br></pre></td></tr></table></figure><h5 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h5><p>文件类  本类的一般在 UploadProgress 这些事件中的回调函数中变量使用比较多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name<span class="comment">//文件名，包括扩展名（后缀）</span></span><br><span class="line">size<span class="comment">//文件体积（字节）</span></span><br><span class="line">type<span class="comment">//文件MIMETYPE类型，与文件类型的对应关系请参考http://t.cn/z8ZnFny</span></span><br><span class="line">lastModifiedDate<span class="comment">//文件最后修改日期</span></span><br><span class="line">id<span class="comment">//文件ID，每个对象具有唯一ID，与文件名无关</span></span><br><span class="line">ext<span class="comment">//文件扩展名，通过文件名获取，例如test.png的扩展名为png</span></span><br><span class="line">statusText<span class="comment">//状态文字说明。在不同的status语境下有不同的用途。</span></span><br><span class="line">setStatus<span class="comment">//设置状态，状态变化时会触发change事件。</span></span><br><span class="line">setStatus( status[, statusText] );<span class="comment">//参数:status &#123;File.Status, String&#125;文件状态值</span></span><br><span class="line">statusText <span class="comment">//&#123;String&#125; [可选] [默认值: ''] 状态说明，常在error时使用，用http, abort,server等来标记是由于什么原因导致文件错误。</span></span><br><span class="line">File.Status<span class="comment">//文件状态值，具体包括以下几种类型：</span></span><br><span class="line">inited <span class="comment">//初始状态</span></span><br><span class="line">queued <span class="comment">//已经进入队列, 等待上传</span></span><br><span class="line">progress <span class="comment">//上传中</span></span><br><span class="line">complete <span class="comment">//上传完成。</span></span><br><span class="line">error <span class="comment">//上传出错，可重试</span></span><br><span class="line">interrupt <span class="comment">//上传中断，可续传。</span></span><br><span class="line">invalid <span class="comment">//文件不合格，不能重试上传。会自动从队列中移除。</span></span><br><span class="line">cancelled <span class="comment">//文件被移除。</span></span><br></pre></td></tr></table></figure><h5 id="Queue-类"><a href="#Queue-类" class="headerlink" title="Queue 类"></a>Queue 类</h5><p>文件队列, 用来存储各个状态中的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">stats<span class="comment">//统计文件数。</span></span><br><span class="line">numOfQueue <span class="comment">//队列中的文件数。</span></span><br><span class="line">numOfSuccess <span class="comment">//上传成功的文件数</span></span><br><span class="line">numOfCancel <span class="comment">//被取消的文件数</span></span><br><span class="line">numOfProgress <span class="comment">//正在上传中的文件数</span></span><br><span class="line">numOfUploadFailed <span class="comment">//上传错误的文件数。</span></span><br><span class="line">numOfInvalid <span class="comment">//无效的文件数。</span></span><br><span class="line">numofDeleted <span class="comment">//被移除的文件数。</span></span><br><span class="line">append<span class="comment">//将新文件加入对队列尾部</span></span><br><span class="line">   prepend<span class="comment">//将新文件加入对队列头部</span></span><br><span class="line">   getFile<span class="comment">//获取文件对象</span></span><br><span class="line">   fetch<span class="comment">//从队列中取出一个指定状态的文件。</span></span><br><span class="line">   sort<span class="comment">//对队列进行排序，能够控制文件上传顺序。</span></span><br><span class="line">   getFiles<span class="comment">//获取指定类型的文件列表, 列表中每一个成员为File对象。</span></span><br><span class="line">   removeFile<span class="comment">//在队列中删除文件。</span></span><br></pre></td></tr></table></figure><p>​    github中的代码给的例子基本上可以实现想要的功能，如果有别的需求可以结合代码中的例子根据接口手册进行相应的修改。</p><p>​    Web Uploader的所有代码都在一个内部闭包中，对外暴露了唯一的一个变量WebUploader，所以完全不用担心此框架会与其他框架冲突。<br>Uploader实例具有Backbone同样的事件API：<code>on，off，once，trigger。</code><br>如同Document Element中的onEvent一样，他的执行比on添加的handler的要晚。如果那些handler里面，有一个return false了，此onEvent里面是不会执行到的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uploader.on( <span class="string">'fileQueued'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do some things.</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">uploader.onFileQueued = <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do some things.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="断点上传实例"><a href="#断点上传实例" class="headerlink" title="断点上传实例"></a>断点上传实例</h4><h5 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h5><p>Uploader.swf、webuploader.css、webuploader.js，其中Uploader.swf只在初始化webUploader时用到，其余两个文件在页面引用即可。下载地址：<a href="https://github.com/fex-team/webuploader/releases" target="_blank" rel="noopener">https://github.com/fex-team/webuploader/releases</a></p><h5 id="Jsp代码："><a href="#Jsp代码：" class="headerlink" title="Jsp代码："></a>Jsp代码：</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 断点续传   start--&gt;</span><br><span class="line">&lt;!-- 隐藏域 实时保存上传进度 --&gt;</span><br><span class="line">&lt;input id=<span class="string">"jindutiao"</span> type=<span class="string">"hidden"</span>/&gt;</span><br><span class="line">&lt;div id=<span class="string">"uploader"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wu-example"</span>&gt;</span><br><span class="line">    &lt;label class="text-right" style="font-weight:100;float:left;margin-left:15px;width:144px;margin-right:15px;"&gt;大文件：&lt;/label&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btns"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"picker"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"webuploader-container"</span>&gt;</span><br><span class="line">        &lt;div class="webuploader-pick"&gt;选择文件&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">"rt_rt_1bchdejhrarjdvd11h41eoh1nt1"</span> style=<span class="string">"position: absolute; top: 0px; left: 0px; width: 88px; height: 35px; overflow: hidden; bottom: auto; right: auto;"</span>&gt;</span><br><span class="line">            &lt;input id=<span class="string">"file_bp"</span> name=<span class="string">"file"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"webuploader-element-invisible"</span> type=<span class="string">"file"</span> /&gt;</span><br><span class="line">            &lt;label style="opacity: 0; width: 100%; height: 100%; display: block; cursor: pointer; background: rgb(255, 255, 255) none repeat scroll 0% 0%;"&gt;&lt;/label&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 文件列表：选择文件后在该div显示 --&gt;</span><br><span class="line">    &lt;div id="thelist" class="uploader-list list-group-item clearfix ng-hide" style="margin-left:160px;"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;label class="text-right" style="font-weight:100;float:left;margin-left:15px;width:144px;margin-right:15px;"&gt;&lt;/label&gt;</span><br><span class="line">    &lt;button class="btn m-b-xs btn-sm btn-info btn-addon" id="startOrStopBtn" style="padding:7px 50px;margin-top:20px;"&gt;开始上传&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 断点续传   end--&gt;</span><br></pre></td></tr></table></figure><h5 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;  </span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*******************初始化参数*********************************/</span></span><br><span class="line">    <span class="keyword">var</span> $list = $(<span class="string">'#thelist'</span>),<span class="comment">//文件列表</span></span><br><span class="line">        $btn = $(<span class="string">'#startOrStopBtn'</span>),<span class="comment">//开始上传按钮</span></span><br><span class="line">        state = <span class="string">'pending'</span>,<span class="comment">//初始按钮状态</span></span><br><span class="line">        uploader; <span class="comment">//uploader对象</span></span><br><span class="line">    <span class="keyword">var</span> fileMd5;  <span class="comment">//文件唯一标识</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/******************下面的参数是自定义的*************************/</span></span><br><span class="line">    <span class="keyword">var</span> fileName;<span class="comment">//文件名称</span></span><br><span class="line">    <span class="keyword">var</span> oldJindu;<span class="comment">//如果该文件之前上传过 已经上传的进度是多少</span></span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;<span class="comment">//当前正在上传的文件在数组中的下标，一次上传多个文件时使用</span></span><br><span class="line">    <span class="keyword">var</span> filesArr=<span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">//文件数组：每当有文件被添加进队列的时候 就push到数组中</span></span><br><span class="line">    <span class="keyword">var</span> map=&#123;&#125;;<span class="comment">//key存储文件id，value存储该文件上传过的进度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/***************************************************** 监听分块上传过程中的三个时间点 start ***********************************************************/</span></span><br><span class="line">    WebUploader.Uploader.register(&#123;  </span><br><span class="line">        <span class="string">"before-send-file"</span>:<span class="string">"beforeSendFile"</span>,<span class="comment">//整个文件上传前</span></span><br><span class="line">        <span class="string">"before-send"</span>:<span class="string">"beforeSend"</span>,  <span class="comment">//每个分片上传前</span></span><br><span class="line">        <span class="string">"after-send-file"</span>:<span class="string">"afterSendFile"</span>,  <span class="comment">//分片上传完毕</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//时间点1：所有分块进行上传之前调用此函数  </span></span><br><span class="line">        beforeSendFile:<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> deferred = WebUploader.Deferred();  </span><br><span class="line">            <span class="comment">//1、计算文件的唯一标记fileMd5，用于断点续传  如果.md5File(file)方法里只写一个file参数则计算MD5值会很慢 所以加了后面的参数：10*1024*1024</span></span><br><span class="line">            (<span class="keyword">new</span> WebUploader.Uploader()).md5File(file,<span class="number">0</span>,<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>).progress(<span class="function"><span class="keyword">function</span>(<span class="params">percentage</span>)</span>&#123;</span><br><span class="line">                $(<span class="string">'#'</span>+file.id ).find(<span class="string">'p.state'</span>).text(<span class="string">'正在读取文件信息...'</span>);</span><br><span class="line">            &#125;)  </span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;  </span><br><span class="line">                $(<span class="string">'#'</span>+file.id ).find(<span class="string">"p.state"</span>).text(<span class="string">"成功获取文件信息..."</span>);  </span><br><span class="line">                fileMd5=val;  </span><br><span class="line">                <span class="comment">//获取文件信息后进入下一步  </span></span><br><span class="line">                deferred.resolve();  </span><br><span class="line">            &#125;);  </span><br><span class="line">            </span><br><span class="line">            fileName=file.name; <span class="comment">//为自定义参数文件名赋值</span></span><br><span class="line">            <span class="keyword">return</span> deferred.promise();  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="comment">//时间点2：如果有分块上传，则每个分块上传之前调用此函数  </span></span><br><span class="line">        beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params">block</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> deferred = WebUploader.Deferred();  </span><br><span class="line">            $.ajax(&#123;  </span><br><span class="line">                type:<span class="string">"POST"</span>,  </span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/testController/mergeOrCheckChunks.do?param=checkChunk"</span>,  <span class="comment">//ajax验证每一个分片</span></span><br><span class="line">                data:&#123;  </span><br><span class="line">                    fileName : fileName,</span><br><span class="line">                    jindutiao:$(<span class="string">"#jindutiao"</span>).val(),</span><br><span class="line">                    fileMd5:fileMd5,  <span class="comment">//文件唯一标记  </span></span><br><span class="line">                    chunk:block.chunk,  <span class="comment">//当前分块下标  </span></span><br><span class="line">                    chunkSize:block.end-block.start<span class="comment">//当前分块大小  </span></span><br><span class="line">                &#125;,  </span><br><span class="line">                cache: <span class="literal">false</span>,</span><br><span class="line">                <span class="keyword">async</span>: <span class="literal">false</span>,  <span class="comment">// 与js同步</span></span><br><span class="line">                timeout: <span class="number">1000</span>, <span class="comment">//todo 超时的话，只能认为该分片未上传过</span></span><br><span class="line">                dataType:<span class="string">"json"</span>,  </span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(response.ifExist)&#123;</span><br><span class="line">                        <span class="comment">//分块存在，跳过  </span></span><br><span class="line">                        deferred.reject();  </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                        <span class="comment">//分块不存在或不完整，重新发送该分块内容  </span></span><br><span class="line">                        deferred.resolve();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">                             </span><br><span class="line">            <span class="keyword">this</span>.owner.options.formData.fileMd5 = fileMd5;  </span><br><span class="line">            deferred.resolve();  </span><br><span class="line">            <span class="keyword">return</span> deferred.promise();  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="comment">//时间点3：所有分块上传成功后调用此函数  </span></span><br><span class="line">        afterSendFile:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//如果分块上传成功，则通知后台合并分块  </span></span><br><span class="line">            $.ajax(&#123;  </span><br><span class="line">                type:<span class="string">"POST"</span>,  </span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/testController/mergeOrCheckChunks.do?param=mergeChunks"</span>,  <span class="comment">//ajax将所有片段合并成整体</span></span><br><span class="line">                data:&#123;  </span><br><span class="line">                    fileName : fileName,</span><br><span class="line">                    fileMd5:fileMd5,</span><br><span class="line">                &#125;,  </span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    count++; <span class="comment">//每上传完成一个文件 count+1</span></span><br><span class="line">                    <span class="keyword">if</span>(count&lt;=filesArr.length<span class="number">-1</span>)&#123;</span><br><span class="line">                        uploader.upload(filesArr[count].id);<span class="comment">//上传文件列表中的下一个文件</span></span><br><span class="line">                    &#125;</span><br><span class="line">                     <span class="comment">//合并成功之后的操作</span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/***************************************************** 监听分块上传过程中的三个时间点 end **************************************************************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/************************************************************ 初始化WebUploader start ******************************************************************/</span></span><br><span class="line">    uploader = WebUploader.create(&#123;</span><br><span class="line">        auto:<span class="literal">false</span>,<span class="comment">//选择文件后是否自动上传</span></span><br><span class="line">        chunked: <span class="literal">true</span>,<span class="comment">//开启分片上传</span></span><br><span class="line">        chunkSize:<span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>,<span class="comment">// 如果要分片，分多大一片？默认大小为5M</span></span><br><span class="line">        chunkRetry: <span class="number">3</span>,<span class="comment">//如果某个分片由于网络问题出错，允许自动重传多少次</span></span><br><span class="line">        threads: <span class="number">3</span>,<span class="comment">//上传并发数。允许同时最大上传进程数[默认值：3]</span></span><br><span class="line">        duplicate : <span class="literal">false</span>,<span class="comment">//是否重复上传（同时选择多个一样的文件），true可以重复上传</span></span><br><span class="line">        prepareNextFile: <span class="literal">true</span>,<span class="comment">//上传当前分片时预处理下一分片</span></span><br><span class="line">        swf: <span class="string">'$&#123;ctx&#125;/resource/webuploader/Uploader.swf'</span>,<span class="comment">// swf文件路径  </span></span><br><span class="line">        server: <span class="string">'$&#123;ctx&#125;/testController/fileSave.do'</span>,<span class="comment">// 文件接收服务端</span></span><br><span class="line">        fileSizeLimit:<span class="number">6</span>*<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>,<span class="comment">//6G 验证文件总大小是否超出限制, 超出则不允许加入队列</span></span><br><span class="line">        fileSingleSizeLimit:<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>,  <span class="comment">//3G 验证单个文件大小是否超出限制, 超出则不允许加入队列</span></span><br><span class="line">        pick: &#123;</span><br><span class="line">                id: <span class="string">'#picker'</span>, <span class="comment">//这个id是你要点击上传文件按钮的外层div的id</span></span><br><span class="line">                multiple : <span class="literal">false</span> <span class="comment">//是否可以批量上传，true可以同时选择多个文件</span></span><br><span class="line">        &#125;,  </span><br><span class="line">        resize: <span class="literal">false</span>,  <span class="comment">//不压缩image, 默认如果是jpeg，文件上传前会先压缩再上传！</span></span><br><span class="line">        accept: &#123;  </span><br><span class="line">                <span class="comment">//允许上传的文件后缀，不带点，多个用逗号分割</span></span><br><span class="line">            extensions: <span class="string">"txt,jpg,jpeg,bmp,png,zip,rar,war,pdf,cebx,doc,docx,ppt,pptx,xls,xlsx"</span>,  </span><br><span class="line">            mimeTypes: <span class="string">'.txt,.jpg,.jpeg,.bmp,.png,.zip,.rar,.war,.pdf,.cebx,.doc,.docx,.ppt,.pptx,.xls,.xlsx'</span>,  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    <span class="comment">/************************************************************ 初始化WebUploader end ********************************************************************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当有文件被添加进队列的时候（点击上传文件按钮，弹出文件选择框，选择完文件点击确定后触发的事件）  </span></span><br><span class="line">    uploader.on(<span class="string">'fileQueued'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//限制单个文件的大小 超出了提示</span></span><br><span class="line">        <span class="keyword">if</span>(file.size&gt;<span class="number">3</span>*<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>)&#123;</span><br><span class="line">            alert(<span class="string">"单个文件大小不能超过3G"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*************如果一次只能选择一个文件，再次选择替换前一个，就增加如下代码*******************************/</span></span><br><span class="line">        <span class="comment">//清空文件队列</span></span><br><span class="line">        $list.html(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//清空文件数组</span></span><br><span class="line">        filesArr=[];</span><br><span class="line">        <span class="comment">/*************如果一次只能选择一个文件，再次选择替换前一个，就增加以上代码*******************************/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将选择的文件添加进文件数组</span></span><br><span class="line">        filesArr.push(file);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;  </span><br><span class="line">            type:<span class="string">"POST"</span>,  </span><br><span class="line">            url:<span class="string">"$&#123;ctx&#125;/testController/selectProgressByFileName.do"</span>,  <span class="comment">//先检查该文件是否上传过，如果上传过，上传进度是多少</span></span><br><span class="line">            data:&#123;  </span><br><span class="line">                fileName : file.name  <span class="comment">//文件名</span></span><br><span class="line">            &#125;,  </span><br><span class="line">            cache: <span class="literal">false</span>,</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,  <span class="comment">// 同步</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,  </span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">                <span class="comment">//上传过</span></span><br><span class="line">                <span class="keyword">if</span>(data&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//上传过的进度的百分比</span></span><br><span class="line">                            oldJindu=data/<span class="number">100</span>;</span><br><span class="line">                    <span class="comment">//如果上传过 上传了多少</span></span><br><span class="line">                    <span class="keyword">var</span> jindutiaoStyle=<span class="string">"width:"</span>+data+<span class="string">"%"</span>;</span><br><span class="line">                    $list.append( <span class="string">'&lt;div id="'</span> + file.id + <span class="string">'" class="item"&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;h4 class="info"&gt;'</span> + file.name + <span class="string">'&lt;/h4&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;p class="state"&gt;已上传'</span>+data+<span class="string">'%&lt;/p&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;a href="javascript:void(0);" class="btn btn-primary file_btn btnRemoveFile"&gt;删除&lt;/a&gt;'</span> +</span><br><span class="line">                            <span class="string">'&lt;div class="progress progress-striped active"&gt;'</span> +</span><br><span class="line">                      <span class="string">'&lt;div class="progress-bar" role="progressbar" style="'</span>+jindutiaoStyle+<span class="string">'"&gt;'</span> +</span><br><span class="line">                      <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;/div&gt;'</span>+</span><br><span class="line">                    <span class="string">'&lt;/div&gt;'</span> );</span><br><span class="line">                    <span class="comment">//将上传过的进度存入map集合</span></span><br><span class="line">                    map[file.id]=oldJindu;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;<span class="comment">//没有上传过</span></span><br><span class="line">                    $list.append( <span class="string">'&lt;div id="'</span> + file.id + <span class="string">'" class="item"&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;h4 class="info"&gt;'</span> + file.name + <span class="string">'&lt;/h4&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;p class="state"&gt;等待上传...&lt;/p&gt;'</span> +</span><br><span class="line">                        <span class="string">'&lt;a href="javascript:void(0);" class="btn btn-primary file_btn btnRemoveFile"&gt;删除&lt;/a&gt;'</span> +</span><br><span class="line">                    <span class="string">'&lt;/div&gt;'</span> );</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);</span><br><span class="line">        uploader.stop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//删除队列中的文件</span></span><br><span class="line">        $(<span class="string">".btnRemoveFile"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> fileItem = $(<span class="keyword">this</span>).parent();</span><br><span class="line">            uploader.removeFile($(fileItem).attr(<span class="string">"id"</span>), <span class="literal">true</span>);</span><br><span class="line">            $(fileItem).fadeOut(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(fileItem).remove();</span><br><span class="line">            &#125;);</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//数组中的文件也要删除</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;filesArr.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(filesArr[i].id==$(fileItem).attr(<span class="string">"id"</span>))&#123;</span><br><span class="line">                    filesArr.splice(i,<span class="number">1</span>);<span class="comment">//i是要删除的元素在数组中的下标，1代表从下标位置开始连续删除一个元素</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">         </span><br><span class="line">    <span class="comment">//文件上传过程中创建进度条实时显示</span></span><br><span class="line">    uploader.on(<span class="string">'uploadProgress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">file, percentage</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $li = $( <span class="string">'#'</span>+file.id ),</span><br><span class="line">        $percent = $li.find(<span class="string">'.progress .progress-bar'</span>);</span><br><span class="line">        <span class="comment">//避免重复创建</span></span><br><span class="line">        <span class="keyword">if</span> (!$percent.length)&#123;</span><br><span class="line">            $percent = $(<span class="string">'&lt;div class="progress progress-striped active"&gt;'</span> +</span><br><span class="line">              <span class="string">'&lt;div class="progress-bar" role="progressbar" style="width: 0%"&gt;'</span> +</span><br><span class="line">              <span class="string">'&lt;/div&gt;'</span> +</span><br><span class="line">            <span class="string">'&lt;/div&gt;'</span>).appendTo( $li ).find(<span class="string">'.progress-bar'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将实时进度存入隐藏域</span></span><br><span class="line">        $(<span class="string">"#jindutiao"</span>).val(<span class="built_in">Math</span>.round(percentage * <span class="number">100</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据fielId获得当前要上传的文件的进度</span></span><br><span class="line">        <span class="keyword">var</span> oldJinduValue = map[file.id];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(percentage&lt;oldJinduValue &amp;&amp; oldJinduValue!=<span class="number">1</span>)&#123;</span><br><span class="line">            $li.find(<span class="string">'p.state'</span>).text(<span class="string">'上传中'</span>+<span class="built_in">Math</span>.round(oldJinduValue * <span class="number">100</span>) + <span class="string">'%'</span>);</span><br><span class="line">            $percent.css(<span class="string">'width'</span>, oldJinduValue * <span class="number">100</span> + <span class="string">'%'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $li.find(<span class="string">'p.state'</span>).text(<span class="string">'上传中'</span>+<span class="built_in">Math</span>.round(percentage * <span class="number">100</span>) + <span class="string">'%'</span>);</span><br><span class="line">            $percent.css(<span class="string">'width'</span>, percentage * <span class="number">100</span> + <span class="string">'%'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上传成功后执行的方法</span></span><br><span class="line">    uploader.on(<span class="string">'uploadSuccess'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;  </span><br><span class="line">        <span class="comment">//上传成功去掉进度条</span></span><br><span class="line">        $(<span class="string">'#'</span>+file.id).find(<span class="string">'.progress'</span>).fadeOut();</span><br><span class="line">        <span class="comment">//隐藏删除按钮</span></span><br><span class="line">        $(<span class="string">".btnRemoveFile"</span>).hide();</span><br><span class="line">        <span class="comment">//隐藏上传按钮</span></span><br><span class="line">        $(<span class="string">"#startOrStopBtn"</span>).hide();</span><br><span class="line">        $(<span class="string">'#'</span>+file.id).find(<span class="string">'p.state'</span>).text(<span class="string">'文件已上传成功，系统后台正在处理，请稍后...'</span>);  </span><br><span class="line">    &#125;);  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上传出错后执行的方法</span></span><br><span class="line">    uploader.on(<span class="string">'uploadError'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">        errorUpload=<span class="literal">true</span>;</span><br><span class="line">        $btn.text(<span class="string">'开始上传'</span>);</span><br><span class="line">        uploader.stop(<span class="literal">true</span>);</span><br><span class="line">        $(<span class="string">'#'</span>+file.id).find(<span class="string">'p.state'</span>).text(<span class="string">'上传出错，请检查网络连接'</span>);</span><br><span class="line">    &#125;);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//文件上传成功失败都会走这个方法</span></span><br><span class="line">    uploader.on(<span class="string">'uploadComplete'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> file </span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;);  </span><br><span class="line">    </span><br><span class="line">    uploader.on(<span class="string">'all'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'startUpload'</span>)&#123;</span><br><span class="line">            state = <span class="string">'uploading'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'stopUpload'</span>)&#123;</span><br><span class="line">            state = <span class="string">'paused'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'uploadFinished'</span>)&#123;</span><br><span class="line">            state = <span class="string">'done'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'uploading'</span>)&#123;</span><br><span class="line">            $btn.text(<span class="string">'暂停上传'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $btn.text(<span class="string">'开始上传'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传按钮的onclick时间</span></span><br><span class="line">    $btn.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'uploading'</span>)&#123;</span><br><span class="line">            uploader.stop(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当前上传文件的文件名</span></span><br><span class="line">            <span class="keyword">var</span> currentFileName;</span><br><span class="line">            <span class="comment">//当前上传文件的文件id</span></span><br><span class="line">            <span class="keyword">var</span> currentFileId;</span><br><span class="line">            <span class="comment">//count=0 说明没开始传 默认从文件列表的第一个开始传</span></span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                currentFileName=filesArr[<span class="number">0</span>].name;</span><br><span class="line">                currentFileId=filesArr[<span class="number">0</span>].id;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(count&lt;=filesArr.length<span class="number">-1</span>)&#123;</span><br><span class="line">                    currentFileName=filesArr[count].name;</span><br><span class="line">                    currentFileId=filesArr[count].id;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//先查询该文件是否上传过 如果上传过已经上传的进度是多少</span></span><br><span class="line">            $.ajax(&#123;  </span><br><span class="line">                type:<span class="string">"POST"</span>,  </span><br><span class="line">                url:<span class="string">"$&#123;ctx&#125;/testController/selectProgressByFileName.do"</span>,  </span><br><span class="line">                data:&#123;  </span><br><span class="line">                    fileName : currentFileName<span class="comment">//文件名</span></span><br><span class="line">                &#125;,  </span><br><span class="line">                cache: <span class="literal">false</span>,</span><br><span class="line">                <span class="keyword">async</span>: <span class="literal">false</span>,  <span class="comment">// 同步</span></span><br><span class="line">                dataType:<span class="string">"json"</span>,  </span><br><span class="line">                success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">                    <span class="comment">//如果上传过 将进度存入map</span></span><br><span class="line">                    <span class="keyword">if</span>(data&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        map[currentFileId]=data/<span class="number">100</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//执行上传</span></span><br><span class="line">                    uploader.upload(currentFileId);</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并、验证分片方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mergeOrCheckChunks</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    String param = request.getParameter(<span class="string">"param"</span>);  </span><br><span class="line">    String fileName = request.getParameter(<span class="string">"fileName"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当前登录用户信息</span></span><br><span class="line">    SysUser sysUser = (SysUser)request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">    String newFilePath = sysUser.getUserId()+<span class="string">"_"</span>+fileName;</span><br><span class="line">    String savePath = request.getRealPath(<span class="string">"/"</span>);</span><br><span class="line">    <span class="comment">//文件上传的临时文件保存在项目的temp文件夹下 定时删除</span></span><br><span class="line">    savePath = <span class="keyword">new</span> File(savePath) + <span class="string">"/upload/"</span>;</span><br><span class="line">    <span class="keyword">if</span>(param.equals(<span class="string">"mergeChunks"</span>))&#123;</span><br><span class="line">        <span class="comment">//合并文件  </span></span><br><span class="line">        Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis =jedisPool.getResource();</span><br><span class="line">            <span class="comment">//读取目录里的所有文件  </span></span><br><span class="line">            File f = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName));  </span><br><span class="line">            File[] fileArray = f.listFiles(<span class="keyword">new</span> FileFilter()&#123;  </span><br><span class="line">                <span class="comment">//排除目录只要文件  </span></span><br><span class="line">                <span class="meta">@Override</span>  </span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(pathname.isDirectory())&#123;  </span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//转成集合，便于排序  </span></span><br><span class="line">            List&lt;File&gt; fileList = <span class="keyword">new</span> ArrayList&lt;File&gt;(Arrays.asList(fileArray));  </span><br><span class="line">            Collections.sort(fileList,<span class="keyword">new</span> Comparator&lt;File&gt;() &#123;  </span><br><span class="line">                <span class="meta">@Override</span>  </span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(File o1, File o2)</span> </span>&#123;  </span><br><span class="line">                    <span class="keyword">if</span>(Integer.parseInt(o1.getName()) &lt; Integer.parseInt(o2.getName()))&#123;  </span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line"></span><br><span class="line">            <span class="comment">//截取文件名的后缀名</span></span><br><span class="line">            <span class="comment">//最后一个"."的位置</span></span><br><span class="line">            <span class="keyword">int</span> pointIndex=fileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">            <span class="comment">//后缀名</span></span><br><span class="line">            String suffix=fileName.substring(pointIndex);</span><br><span class="line">            <span class="comment">//合并后的文件</span></span><br><span class="line">            File outputFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName)+suffix);  </span><br><span class="line">            <span class="comment">//创建文件  </span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputFile.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//输出流  </span></span><br><span class="line">            FileChannel outChnnel = <span class="keyword">new</span> FileOutputStream(outputFile).getChannel();  </span><br><span class="line">            <span class="comment">//合并  </span></span><br><span class="line">            FileChannel inChannel;  </span><br><span class="line">            <span class="keyword">for</span>(File file : fileList)&#123;  </span><br><span class="line">                inChannel = <span class="keyword">new</span> FileInputStream(file).getChannel();  </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inChannel.transferTo(<span class="number">0</span>, inChannel.size(), outChnnel);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">//删除分片  </span></span><br><span class="line">                file.delete();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outChnnel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            <span class="comment">//清除文件夹  </span></span><br><span class="line">            File tempFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName));  </span><br><span class="line">            <span class="keyword">if</span>(tempFile.isDirectory() &amp;&amp; tempFile.exists())&#123;  </span><br><span class="line">                tempFile.delete();  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            Map&lt;String, String&gt; resultMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//将文件的最后上传时间和生成的文件名返回</span></span><br><span class="line">            resultMap.put(<span class="string">"lastUploadTime"</span>, jedis.get(<span class="string">"lastUploadTime_"</span>+newFilePath));</span><br><span class="line">            resultMap.put(<span class="string">"pathFileName"</span>, jedis.get(<span class="string">"fileName_"</span>+fileName)+suffix);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/****************清除redis中的相关信息**********************/</span></span><br><span class="line">            <span class="comment">//合并成功后删除redis中的进度信息</span></span><br><span class="line">            jedis.del(<span class="string">"jindutiao_"</span>+newFilePath);</span><br><span class="line">            <span class="comment">//合并成功后删除redis中的最后上传时间，只存没上传完成的</span></span><br><span class="line">            jedis.del(<span class="string">"lastUploadTime_"</span>+newFilePath);</span><br><span class="line">            <span class="comment">//合并成功后删除文件名称与该文件上传时生成的存储分片的临时文件夹的名称在redis中的信息  key：上传文件的真实名称   value：存储分片的临时文件夹名称（由上传文件的MD5值+时间戳组成）</span></span><br><span class="line">            <span class="comment">//如果下次再上传同名文件  redis中将存储新的临时文件夹名称  没有上传完成的还要保留在redis中 直到定时任务生效</span></span><br><span class="line">            jedis.del(<span class="string">"fileName_"</span>+fileName);</span><br><span class="line">            </span><br><span class="line">            Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">            String json=gson.toJson(resultMap);</span><br><span class="line">            PrintWriterJsonUtils.printWriter(response, json);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            jedisPool.returnResource(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(param.equals(<span class="string">"checkChunk"</span>))&#123;  </span><br><span class="line">        <span class="comment">/*************************检查当前分块是否上传成功**********************************/</span>  </span><br><span class="line">        String fileMd5 = request.getParameter(<span class="string">"fileMd5"</span>);  </span><br><span class="line">        String chunk = request.getParameter(<span class="string">"chunk"</span>);  </span><br><span class="line">        String chunkSize = request.getParameter(<span class="string">"chunkSize"</span>);  </span><br><span class="line">        String jindutiao=request.getParameter(<span class="string">"jindutiao"</span>);<span class="comment">//文件上传的实时进度</span></span><br><span class="line"></span><br><span class="line">        Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis =jedisPool.getResource();</span><br><span class="line">            <span class="comment">//将当前进度存入redis</span></span><br><span class="line">            jedis.set(<span class="string">"jindutiao_"</span>+newFilePath, jindutiao);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将系统当前时间转换为字符串</span></span><br><span class="line">            Date date=<span class="keyword">new</span> Date();  </span><br><span class="line">            SimpleDateFormat formatter=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">            String lastUploadTime=formatter.format(date);  </span><br><span class="line">            <span class="comment">//将最后上传时间以字符串形式存入redis</span></span><br><span class="line">            jedis.set(<span class="string">"lastUploadTime_"</span>+newFilePath, lastUploadTime);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//自定义文件名： 时间戳（13位）</span></span><br><span class="line">            String tempFileName= String.valueOf(System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">if</span>(jedis.get(<span class="string">"fileName_"</span>+fileName)==<span class="keyword">null</span> || <span class="string">""</span>.equals(jedis.get(<span class="string">"fileName_"</span>+fileName)))&#123;</span><br><span class="line">                <span class="comment">//将文件名与该文件上传时生成的存储分片的临时文件夹的名称存入redis</span></span><br><span class="line">                <span class="comment">//文件上传时生成的存储分片的临时文件夹的名称由MD5和时间戳组成</span></span><br><span class="line">                jedis.set(<span class="string">"fileName_"</span>+fileName, fileMd5+tempFileName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            File checkFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName)+<span class="string">"/"</span>+chunk);  </span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);  </span><br><span class="line">            <span class="comment">//检查文件是否存在，且大小是否一致  </span></span><br><span class="line">            <span class="keyword">if</span>(checkFile.exists() &amp;&amp; checkFile.length()==Integer.parseInt(chunkSize))&#123;  </span><br><span class="line">                <span class="comment">//上传过  </span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.getWriter().write(<span class="string">"&#123;\"ifExist\":1&#125;"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                <span class="comment">//没有上传过  </span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.getWriter().write(<span class="string">"&#123;\"ifExist\":0&#125;"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            jedisPool.returnResource(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存上传分片</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileSave</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();  </span><br><span class="line">    ServletFileUpload sfu = <span class="keyword">new</span> ServletFileUpload(factory);  </span><br><span class="line">    sfu.setHeaderEncoding(<span class="string">"utf-8"</span>);  </span><br><span class="line">        </span><br><span class="line">        String savePath = request.getRealPath(<span class="string">"/"</span>);</span><br><span class="line">        savePath = <span class="keyword">new</span> File(savePath) + <span class="string">"/upload/"</span>;  </span><br><span class="line">          </span><br><span class="line">        String fileMd5 = <span class="keyword">null</span>;  </span><br><span class="line">        String chunk = <span class="keyword">null</span>;  </span><br><span class="line">    String fileName=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            List&lt;FileItem&gt; items = sfu.parseRequest(request);  </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">for</span>(FileItem item:items)&#123;</span><br><span class="line">                <span class="comment">//上传文件的真实名称</span></span><br><span class="line">                fileName=item.getName();</span><br><span class="line">                <span class="keyword">if</span>(item.isFormField())&#123;  </span><br><span class="line">                    String fieldName = item.getFieldName();  </span><br><span class="line">                    <span class="keyword">if</span>(fieldName.equals(<span class="string">"fileMd5"</span>))&#123;  </span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                fileMd5 = item.getString(<span class="string">"utf-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">if</span>(fieldName.equals(<span class="string">"chunk"</span>))&#123;  </span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                chunk = item.getString(<span class="string">"utf-8"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jedis =jedisPool.getResource();</span><br><span class="line">                File file = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName));  </span><br><span class="line">                <span class="keyword">if</span>(!file.exists())&#123;  </span><br><span class="line">                    file.mkdir();  </span><br><span class="line">                &#125;  </span><br><span class="line">                File chunkFile = <span class="keyword">new</span> File(savePath+<span class="string">"/"</span>+jedis.get(<span class="string">"fileName_"</span>+fileName)+<span class="string">"/"</span>+chunk);</span><br><span class="line">                FileUtils.copyInputStreamToFile(item.getInputStream(), chunkFile);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                jedisPool.returnResource(jedis);</span><br><span class="line">            &#125;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//当有文件添加进队列时 通过文件名查看该文件是否上传过 上传进度是多少</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectProgressByFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">    String jindutiao=<span class="string">""</span>;</span><br><span class="line">    Jedis jedis =<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        jedis =jedisPool.getResource();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=fileName &amp;&amp; !<span class="string">""</span>.equals(fileName))&#123;</span><br><span class="line">            jindutiao=jedis.get(<span class="string">"jindutiao_"</span>+fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        jedisPool.returnResource(jedis);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jindutiao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：webUploader断点上传多个大文件时是按队列顺序上传的，即队列中的文件一个一个上传，前一个上传完成才会开始上传下一个，不能实现同时上传。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0161.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;大文件上传组件&lt;br&gt;
    
    </summary>
    
      <category term="WebUploader" scheme="http://m.iskei.cn/categories/WebUploader/"/>
    
    
      <category term="WebUploader" scheme="http://m.iskei.cn/tags/WebUploader/"/>
    
  </entry>
  
  <entry>
    <title>maven项目的tomcat配置</title>
    <link href="http://m.iskei.cn/blog/42040.html"/>
    <id>http://m.iskei.cn/blog/42040.html</id>
    <published>2018-03-20T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.522Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0159.jpg" alt="image"></p><p>maven项目的tomcat配置<br><a id="more"></a></p><h3 id="一、没有Tomcat情况"><a href="#一、没有Tomcat情况" class="headerlink" title="一、没有Tomcat情况"></a>一、没有Tomcat情况</h3><p>  <code>Run As--&gt;Maven build--&gt;tomcat:run</code>    (不支持jdk1.8+tomcat8;项目启动没问题,访问报错500;jdk1.7 可以正常访问)</p><h3 id="二、war包形式"><a href="#二、war包形式" class="headerlink" title="二、war包形式"></a>二、war包形式</h3><ol><li><p>使用maven导出war包</p><p><code>Run As--&gt;Maven build... --&gt;package</code></p><p>成功后会提示生成的war包路径。一般在项目的target目录下。 (<code>注：pom.xml的&lt;packaging/&gt;配置为war打包后的就是war包，配置为jar时打包后的就是jar包</code>)</p></li><li><p>将war包部署至tomcat中</p></li></ol><p>将war放到Tomcat的webapps目录下，配置<code>conf\server.xml</code>文件<code>在&lt;Host&gt;中添加配置信息：(C:\Java\apache-tomcat-7.0.79\conf)</code></p><ul><li><p>① path:启动项目后访问项目的路径</p></li><li><p>② docBase:项目路径，可以使用绝对路径或相对路径，相对路径是相对于webapps</p></li><li><p>③ 你还可以在server.xml中配置你的端口号和项目名称，从而改变访问的url。    </p></li></ul><ol start="3"><li>启动tomcat</li></ol><p>注: 在部署项目的时候直接将web项目编译后的文件放在webapps也是同样的</p><pre><code>JavaEE项目部署 `默认存放在webapp--&gt;WEB-INF--&gt;classes下面(如：C:\Java\apache-tomcat-7.0.79\webapps\mobile_scm\WEB-INF\classes)` maven项目部署 `默认存放在target下面(如：E:\MavenWorks\babasport\target)`</code></pre><h3 id="三、Tomcat启动"><a href="#三、Tomcat启动" class="headerlink" title="三、Tomcat启动"></a>三、Tomcat启动</h3><p>项目发布 直接到webapps下</p><h4 id="maven工程的tomcat热部署"><a href="#maven工程的tomcat热部署" class="headerlink" title="maven工程的tomcat热部署"></a>maven工程的tomcat热部署</h4><p>教程：tomcat热部署：webapps下的项目正在运行，直接把开发的新版本发布到正在运行的Tomcat下(不能关闭Tomcat再发布新版本</p><p>   开发者本地将代码通过Git push到服务器端，服务器自动编译-打包-发布等等；也就是说发布到tomcat中后，不需要重启tomcat。</p><ol><li>热部署前准备：</li></ol><ul><li><p>配置Tomcat登录的用户名和密码</p><p>热部署需要用户名和密码进行远程发布，修改user配置文件一是为了管理员进入tomcat管理页面并提高其安全性，二是为了在maven设置正确的用户名；</p><pre><code>`C:\Java\apache-tomcat-7.0.79\conf\tomcat-users.xml`</code></pre></li><li><p>找到tomcat-user配置文件:</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Tomcat登录的用户名和密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script,admin,manager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>重启Tomcat，访问<code>http://localhost:8080</code></p><p>进入tomcat服务器根目录，点击“manager app”输入用户名和密码，成功进入管理页面，说明第一步配置成功。</p><p>注：端口号改为80 可以默认不显示；访问项目应该隐藏项目名称；</p></li></ol><h4 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h4><ol><li><p>Maven的Server的配置    </p><p>在Maven的安装路径找到<code>conf目录下的setting.xml文件(&quot;E:\software\apache-maven-3.5.0\conf&quot;)，在&lt;servers&gt;节点中添加tomcat7</code>下配置的用户信息    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：如果在pom.xml中没有配置用户名和密码，则使用setting里的配置，如果有的话，就是用pom里的配置（就近原则）配置完记得要<code>Maven--&gt;Update projiect</code>(刷新)</p></li><li><p>pom.xml中添加tomcat插件</p></li></ol><ul><li>① <code>可以在pom.xml中右键--&gt;Maven--&gt;Add Plugin--&gt;tomcat 自动添加插件</code></li><li>② 可以手动配置插件和Tomcat的访问路径</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>babasport<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 本地jdk版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 配置tomcat的访问 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 访问路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 项目发布到根目录,覆盖ROOT，URL访问可以省略项目名称 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;path&gt;/&lt;/path&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span>/babasport<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">server</span>&gt;</span>  <span class="comment">&lt;!-- 此处的名字必须和setting.xml中配置的ID一致--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>最后来验证一下：启动tomcat服务器，保证里面没有发布任何项目</li></ol><ul><li><p>如果是eclipse</p><p><code>直接右键项目---run as ---maven bulid...输入“tomcat7:deploy”(二次发布以后输入&quot;tomcat7:redeploy&quot;)</code></p></li><li><p>如果使用的是命令行</p><p><code>直接输入“mvn tomcat7:redeploy”</code></p></li></ul><p>测试通过，输入地址可以正常的访问！</p><h4 id="server下设置tomcat发布位置"><a href="#server下设置tomcat发布位置" class="headerlink" title="server下设置tomcat发布位置"></a>server下设置tomcat发布位置</h4><p>maven项目发布后默认存放到target目录下(如：E:\MavenWorks\babasport\target)；开发web项目时，还需要手动复制到web服务器下(Tomcat)</p><p>如果能自动部署到Web服务器，而不用每次手动把target下编译好的war包拷贝到Tomcat下就更好了。</p><p>对servers设置：</p><ol><li>修改发布路径到webapps下</li><li>修改timeout服务器启动和停止时间为300秒</li><li>发布到webapps下的根目录(项目访问URL不需要填写项目名， 取消勾选自动发布!</li><li>浏览器访问 <code>http://localhost:8080/</code> (省略了项目名称)    </li></ol><p>注：如果用eclipse，<code>http://localhost:8080/项目名称</code>  也可以访问； </p><pre><code>用myeclipse，只能访问`http://localhost:8080/`</code></pre><p>注：如果不能成功发布到 / 目录下，或许需要做以下修改(一般默认完成，不用做修改)   </p><ul><li>1 删除webContext的发布</li><li>2 增加webapp发布到根目录下</li><li>3 增加<code>Maven库(jar包)到WEB-INF/lib 下</code></li></ul><h3 id="四、控制台不输出log没有反应"><a href="#四、控制台不输出log没有反应" class="headerlink" title="四、控制台不输出log没有反应"></a>四、控制台不输出log没有反应</h3><p>MyEclipse中Maven build…项目控制台不输出log 没有反应</p><pre><code>一开始项目与都是可以通过maven build... 然后输入tomcat:run 跑起来的，后来忘记做了啥操作跑步起来了，控制台也不输出log了，总是一闪就过去了，后来也是试了各种方法，可能是自己换了当前项目的jdk版本，下面是解决方案</code></pre><p>右击maven项目: <code>Build Path ---&gt; configure Build Path... ---&gt; 先选中你当前的jdk remove掉 ，然后重新添加 ----&gt; Add Library ---&gt;  选择 JRE System Library  ---&gt; 选择Alternate JRE---&gt; 然后点击installed JRES 进入界面后选择你要用的jdk版本 ---&gt; edit ---&gt; 在Default VM arguments 添加 :Dmaven.multiModuleProjectDirectory=$MAVEN_HOME</code></p><p>这样就可以，希望可以解决你的问题 !</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0159.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;maven项目的tomcat配置&lt;br&gt;
    
    </summary>
    
      <category term="maven" scheme="http://m.iskei.cn/categories/maven/"/>
    
    
      <category term="maven" scheme="http://m.iskei.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Java basic knowledge</title>
    <link href="http://m.iskei.cn/blog/18967.html"/>
    <id>http://m.iskei.cn/blog/18967.html</id>
    <published>2018-03-18T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0158.jpg" alt="image"></p><p>27天学完Java<br><a id="more"></a></p><h3 id="DAY001"><a href="#DAY001" class="headerlink" title="DAY001"></a>DAY001</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/001DAY.jpg" alt=""></p><h4 id="DOS命令-理解"><a href="#DOS命令-理解" class="headerlink" title="DOS命令(理解)"></a>DOS命令(理解)</h4><p>​    (1)切换盘符(掌握)      <code>d: 回车</code></p><p>​    (2)显示某目录下的所有文件或者文件夹(掌握)    <code>dir 回车</code></p><p> ​    (3)创建文件夹     <code>md 文件夹名称 回车</code></p><p> ​    (4)删除文件夹    <code>rd 文件夹名称 回车</code></p><pre><code>(5)进入目录(掌握 )          `单级进入 cd 目录名称`     `多级进入 cd 目录名称1\目录名称2\...`(6)回退目录(掌握)         `单级回退 cd..`    `回退根目录 cd\`(7)删除文件    `del 文件名称`    `*.txt 可以表示多个文件名称`(8)清屏(掌握)           `cls`(9)退出        `exit`(10)删除带内容的文件夹     `rd /s 文件夹名称 会提示是否删除`    `rd /q /s 文件夹名称 直接删除`    </code></pre><h4 id="path环境变量-理解"><a href="#path环境变量-理解" class="headerlink" title="path环境变量(理解)"></a>path环境变量(理解)</h4><p>​    (1)为什么要配置path环境变量<br>        为了让javac和java命令可以在任意目录下使用<br>    (2)如何配置<br>        A:方式1 直接修改path，在前面追加JDK的bin目录<br>        B:方式2(掌握)<br>            新建JAVA_HOME: JDK的安装目录<br>            修改path: %JAVA_HOME%\bin;后面是以前的环境变量</p><h4 id="classpath环境变量-理解"><a href="#classpath环境变量-理解" class="headerlink" title="classpath环境变量(理解)"></a>classpath环境变量(理解)</h4><p>​    (1)为什么要配置classpath环境变量<br>        为了让class文件可以在任意目录下运行<br>    (2)如何配置<br>        新建：classpath，把你想要在任意目录下运行的class文件所在目录配置过去即可。<br>        注意：将来在执行的时候，有先后顺序关系<br>    (3)path和classpath的区别<br>        path是为了让exe文件可以在任意目录下运行<br>        classpath是为了让class文件可以在任意目录下运行</p><h4 id="注释-掌握"><a href="#注释-掌握" class="headerlink" title="注释(掌握)"></a>注释(掌握)</h4><p>​    (1)注释:用于解释说明程序的文字<br>    (2)分类：<br>        A:单行：//注释文字<br>        B:多行：/<em> 注释文字 </em>/<br>        C:文档注释：/*<em> 注释文字 </em>/<br>    (3)带注释的HelloWorld案例<br>    (4)注释的作用：<br>        A:解释说明程序，提高程序的阅读性<br>        B:帮助我们调试程序</p><h4 id="关键字-掌握"><a href="#关键字-掌握" class="headerlink" title="关键字(掌握)"></a>关键字(掌握)</h4><p>​    (1)关键字:被Java赋予特定含义的单词<br>    (2)特点:全部小写<br>    (3)注意事项：<br>        A:goto和const作为保留字存在，目前不使用<br>        B:类似于Editplus这样的高级记事本，会对关键字有特殊颜色标记，方便记忆</p><h4 id="标识符-掌握"><a href="#标识符-掌握" class="headerlink" title="标识符(掌握)"></a>标识符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">标识符：就是给类,接口,方法,变量等起名字时使用的字符序列(字符串)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">组成规则：</span></span><br><span class="line"><span class="comment">A:英文字母大小写</span></span><br><span class="line"><span class="comment">B:数字</span></span><br><span class="line"><span class="comment">C:_和$</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">A:不能以数字开头</span></span><br><span class="line"><span class="comment">B:不能是Java中的关键字</span></span><br><span class="line"><span class="comment">C:区分大小写</span></span><br><span class="line"><span class="comment">Student,student 这是两个名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">常见的命名规则：见名知意</span></span><br><span class="line"><span class="comment">A:包 其实就是文件夹,用于解决相同类名问题</span></span><br><span class="line"><span class="comment">全部小写</span></span><br><span class="line"><span class="comment">单级：com</span></span><br><span class="line"><span class="comment">多级：cn.itcast</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B:类或者接口</span></span><br><span class="line"><span class="comment">一个单词：首字母大写</span></span><br><span class="line"><span class="comment">Student,Person,Teacher</span></span><br><span class="line"><span class="comment">多个单词：每个单词的首字母大写</span></span><br><span class="line"><span class="comment">HelloWorld,MyName,NameDemo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">C:方法或者变量</span></span><br><span class="line"><span class="comment">一个单词：全部小写</span></span><br><span class="line"><span class="comment">name,age,show()</span></span><br><span class="line"><span class="comment">多个单词：从第二个单词开始，每个单词首字母大写</span></span><br><span class="line"><span class="comment">myName,showAllStudentNames()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">D:常量</span></span><br><span class="line"><span class="comment">一个单词：全部大写</span></span><br><span class="line"><span class="comment">AGE</span></span><br><span class="line"><span class="comment">多个单词：每个单词都大写，用_连接</span></span><br><span class="line"><span class="comment">STUDENT_MAX_AGE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAY002"><a href="#DAY002" class="headerlink" title="DAY002"></a>DAY002</h2><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/002DAY.jpg" alt=""></p><h4 id="常量-掌握"><a href="#常量-掌握" class="headerlink" title="常量(掌握)"></a>常量(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">常量：在程序执行的过程中其值不可以发生改变</span></span><br><span class="line"><span class="comment">举例：π</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">A:字面值常量</span></span><br><span class="line"><span class="comment">1，12.5</span></span><br><span class="line"><span class="comment">B:自定义常量(面向对象部分讲解)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字面值常量分类：</span></span><br><span class="line"><span class="comment">A:字符串常量 用""括起来的内容</span></span><br><span class="line"><span class="comment">B:整数常量 所有的整数数据</span></span><br><span class="line"><span class="comment">C:小数常量 所有的带小数的数据</span></span><br><span class="line"><span class="comment">D:字符常量 用单引号括起来的内容</span></span><br><span class="line"><span class="comment">E:布尔常量 只有两个值：true和false</span></span><br><span class="line"><span class="comment">F:空常量 null(数组部分去讲解)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstantDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//字符串常量</span></span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数常量</span></span><br><span class="line">System.out.println(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//小数常量</span></span><br><span class="line">System.out.println(<span class="number">12.345</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符常量</span></span><br><span class="line">System.out.println(<span class="string">'A'</span>);</span><br><span class="line"><span class="comment">//下面的是错误的</span></span><br><span class="line"><span class="comment">//System.out.println('BC');</span></span><br><span class="line">System.out.println(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔常量</span></span><br><span class="line">System.out.println(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进制-理解"><a href="#进制-理解" class="headerlink" title="进制(理解)"></a>进制(理解)</h4><p>​    (1)一种计数的方式。x进制表示逢x进1。<br>    (2)进制转换<br>        A:其他进制到十进制<br>            系数*基数^权之和。<br>        B:十进制到其他进制<br>            除基取余,直到商为0,余数反转。<br>        C:快速转换<br>            a:二进制和十进制<br>                8421码<br>            b:二进制和八进制<br>                三位组合<br>            c:二进制和十六进制<br>                四位组合<br>        D:任意X进制到任意Y进制的转换<br>            可以使用十进制作为桥梁即可。</p><h4 id="有符号数据表示法-理解"><a href="#有符号数据表示法-理解" class="headerlink" title="有符号数据表示法(理解)"></a>有符号数据表示法(理解)</h4><p>​    (1)计算机中数据的存储和运算都是采用补码进行的。<br>    (2)数据的有符号表示法<br>        用0表示正号,1表示负号。<br>        A:原码<br>            正数:正常的二进制<br>            负数:符号为为1的二进制<br>        B:反码<br>            正数:和原码相同<br>            负数:和原码的区别是,符号位不变，数值位取反。1变0，0变1<br>        C:补码<br>            正数:和原码相同<br>            负数:反码+1<br>    (3)数据的有符号表示法练习<br>        A:已知原码，求反码和补码<br>        B:已知补码，求原码。<br>    (4)补充：float浮点数在计算机中的表示<br>            符号位        指数位        底数位<br>            S        E        M</p><h4 id="变量-掌握"><a href="#变量-掌握" class="headerlink" title="变量(掌握)"></a>变量(掌握)</h4><p>​    (1)变量：在程序的运行过程中，其值发生改变的量。<br>    (2)定义格式：<br>        A:数据类型 变量名 = 初始化值;<br>        B:数据类型 变量名;<br>          变量名 = 初始化值;</p><h4 id="数据类型-掌握"><a href="#数据类型-掌握" class="headerlink" title="数据类型(掌握)"></a>数据类型(掌握)</h4><p>​    (1)数据类型分类<br>        A:基本类型：4类8种<br>        B:引用类型：类，接口，数组<br>    (2)基本类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为了更好的表达现实世界的事物，Java针对不同的事物提供了不同的数据类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据类型：</span></span><br><span class="line"><span class="comment">基本类型：4类8种</span></span><br><span class="line"><span class="comment">引用类型：类，接口，数组。(后面讲)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">基本类型:</span></span><br><span class="line"><span class="comment">整数：占用的内存空间</span></span><br><span class="line"><span class="comment">byte1字节</span></span><br><span class="line"><span class="comment">01111111</span></span><br><span class="line"><span class="comment">10000000(1既表示符号位，又表示数值 -128)</span></span><br><span class="line"><span class="comment">short2字节</span></span><br><span class="line"><span class="comment">int4字节</span></span><br><span class="line"><span class="comment">long8字节</span></span><br><span class="line"><span class="comment">浮点数：</span></span><br><span class="line"><span class="comment">float4字节</span></span><br><span class="line"><span class="comment">double8字节</span></span><br><span class="line"><span class="comment">字符：</span></span><br><span class="line"><span class="comment">char2字节</span></span><br><span class="line"><span class="comment">布尔：</span></span><br><span class="line"><span class="comment">boolean未知。1字节</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">面试题：</span></span><br><span class="line"><span class="comment">Java中字符可以存储一个汉字吗?</span></span><br><span class="line"><span class="comment">可以。因为Java语言采用的是unicode编码，</span></span><br><span class="line"><span class="comment">而unicode编码的每个字符是两个字节，</span></span><br><span class="line"><span class="comment">所以，java中的字符可以存储一个汉字。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">整数默认是int类型</span></span><br><span class="line"><span class="comment">浮点数默认是double类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">long类型的变量，要加l或者L。</span></span><br><span class="line"><span class="comment">float类型的变量，要加f或者F。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在同一对&#123;&#125;里面，是不能有同名的变量。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataType</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义变量的格式：</span></span><br><span class="line"><span class="comment">//数据类型 变量名 = 初始化值;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义byte类型的变量</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="number">1</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义short类型的变量</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">100</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义int类型的变量</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="comment">//int j = 2147483648;</span></span><br><span class="line"><span class="comment">//System.out.println(j);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义long类型的变量</span></span><br><span class="line"><span class="keyword">long</span> l = <span class="number">2147483648L</span>;</span><br><span class="line">System.out.println(l);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义float类型的变量</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">12.34F</span>;</span><br><span class="line">System.out.println(f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义double类型的变量</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">23.56</span>;</span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义char类型的变量</span></span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'a'</span>;</span><br><span class="line">System.out.println(ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义boolean类型的变量</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用变量的注意事项"><a href="#使用变量的注意事项" class="headerlink" title="使用变量的注意事项"></a>使用变量的注意事项</h5><p>​    A:作用域<br>        每一个变量在它所属的大括号内有效，并且，同一个作用域不能定义同名的变量。</p><p>(for循环()中定义的变量与在for{}中定义有相同的作用域)<br>    B:初始化值<br>        变量必须先声明，赋值，最后才能使用<br>    C:在一行上定义的问题<br>        可以在一行上定义多个变量，但是不建议。</p><h4 id="类型转换-掌握"><a href="#类型转换-掌握" class="headerlink" title="类型转换(掌握)"></a>类型转换(掌握)</h4><p>​    注意：<br>        boolean类型不参与。</p><ol><li><p>隐式转换：从小到大</p><pre><code>    byte,short,char --&gt; int --&gt; long --&gt; float --&gt; doublelong为什么可以到float呢?A:因为long和float的底层存储结构不同。B:数据范围    long: 2^63    float: 3.4*10^38        3.4*10^38 &gt; 3.4*8^38 = 3.4*2^3^38 = 3.4*2^114 &gt; 2^63</code></pre></li><li><p>强制转换：从大到小</p><pre><code>一般不建议这样做，因为可能有精度的损失。</code></pre><p> 格式：</p><pre><code>目标数据类型 变量名 = (目标数据类型)(被转换的数据);</code></pre></li></ol><h4 id="运算符-理解"><a href="#运算符-理解" class="headerlink" title="运算符(理解)"></a>运算符(理解)</h4><ol><li><p>运算：对常量和变量进行操作的过程称为运算。</p></li><li><p>运算符：对常量和变量进行操作的符号称为运算符</p></li><li><p>表达式：由运算符把常量和变量连接起来的式子</p><p>注意：表达式必须有结果</p></li></ol><h4 id="算术运算符-掌握"><a href="#算术运算符-掌握" class="headerlink" title="算术运算符(掌握)"></a>算术运算符(掌握)</h4><ol><li>+,-,*,/,%,++,–`</li><li><p><code>+:</code></p><pre><code>    正号加法字符串连接符</code></pre></li><li><p>%和/的区别`</p><pre><code>    `%：余数``/：商`    整数相除，结果是整数。想得到小数，可以乘以或者除以1.0    %的结果的符号和前面的那个数一致。</code></pre></li><li><p><code>++,--</code></p><pre><code>A:单独使用放在数据的前面和后面效果一样。</code></pre><p> B:参与操作使用</p><pre><code>放在数据的前面，先数据变化，再参与运算。放在数据的后面，先参与运算，再数据变化。</code></pre></li></ol><h4 id="赋值运算符-掌握"><a href="#赋值运算符-掌握" class="headerlink" title="赋值运算符(掌握)"></a>赋值运算符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">赋值运算符：</span></span><br><span class="line"><span class="comment">基本：=</span></span><br><span class="line"><span class="comment">复合：+=,-=,*=,/=,%=,...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//把10赋值给int类型的变量a</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//复合的用法</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">b += <span class="number">20</span>; <span class="comment">//结果等价于：b = b + 20;</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关系运算符-掌握"><a href="#关系运算符-掌握" class="headerlink" title="关系运算符(掌握)"></a>关系运算符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关系运算符：</span></span><br><span class="line"><span class="comment">==,!=,&gt;,&gt;=,&lt;,&lt;=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">无论表达式是简单还是复杂，结果肯定是boolean类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">关系运算符“==”不能误写成“=” 。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">20</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line">System.out.println(a == c);</span><br><span class="line">System.out.println((a + b*c) == (a*b + c));</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a = b); <span class="comment">//把b的值赋值给a，把a的值作为结果留下来</span></span><br><span class="line">System.out.println(a = c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符-掌握"><a href="#逻辑运算符-掌握" class="headerlink" title="逻辑运算符(掌握)"></a>逻辑运算符(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;&amp;和&amp;的区别? 前者有短路效果，只要左边是false，右边不执行。而后者，全部执行。</span></span><br><span class="line"><span class="comment">||和|的区别? 前者有短路效果，只要左边是true，右边不执行。而后者，全部执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;:逻辑与有false则false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&gt;c); <span class="comment">//false &amp; false = false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&lt;c); <span class="comment">//false &amp; true = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&gt;c); <span class="comment">//true &amp; false = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&lt;c); <span class="comment">//true &amp; true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;&amp;:</span></span><br><span class="line">System.out.println(a&gt;b &amp;&amp; a&gt;c); <span class="comment">//false &amp;&amp; false = false</span></span><br><span class="line">System.out.println(a&gt;b &amp;&amp; a&lt;c); <span class="comment">//false &amp;&amp; true = false</span></span><br><span class="line">System.out.println(a&lt;b &amp;&amp; a&gt;c); <span class="comment">//true &amp;&amp; false = false</span></span><br><span class="line">System.out.println(a&lt;b &amp;&amp; a&lt;c); <span class="comment">//true &amp;&amp; true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//|:逻辑或有true则true</span></span><br><span class="line">System.out.println(a&gt;b | a&gt;c); <span class="comment">//false | false = false</span></span><br><span class="line">System.out.println(a&gt;b | a&lt;c); <span class="comment">//false | true = true</span></span><br><span class="line">System.out.println(a&lt;b | a&gt;c); <span class="comment">//true | false = true</span></span><br><span class="line">System.out.println(a&lt;b | a&lt;c); <span class="comment">//true | true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//||:</span></span><br><span class="line">System.out.println(a&gt;b || a&gt;c); <span class="comment">//false || false = false</span></span><br><span class="line">System.out.println(a&gt;b || a&lt;c); <span class="comment">//false || true = true</span></span><br><span class="line">System.out.println(a&lt;b || a&gt;c); <span class="comment">//true || false = true</span></span><br><span class="line">System.out.println(a&lt;b || a&lt;c); <span class="comment">//true || true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//System.out.println((x++)&gt;3 &amp; (y++)&gt;4); //false &amp; false = false</span></span><br><span class="line"><span class="comment">//System.out.println(x);//4</span></span><br><span class="line"><span class="comment">//System.out.println(y);//5</span></span><br><span class="line">System.out.println((x++)&gt;<span class="number">3</span> &amp;&amp; (y++)&gt;<span class="number">4</span>);</span><br><span class="line">System.out.println(x);<span class="comment">//4</span></span><br><span class="line">System.out.println(y);<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">逻辑运算符：</span></span><br><span class="line"><span class="comment">&amp;,|,!,^</span></span><br><span class="line"><span class="comment">&amp;&amp;,||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">逻辑运算符连接的应该是一个布尔表达式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//&amp;,|,!,^</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;:逻辑与有false则false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&gt;c); <span class="comment">//false &amp; false = false</span></span><br><span class="line">System.out.println(a&gt;b &amp; a&lt;c); <span class="comment">//false &amp; true = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&gt;c); <span class="comment">//true &amp; false = false</span></span><br><span class="line">System.out.println(a&lt;b &amp; a&lt;c); <span class="comment">//true &amp; true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//|:逻辑或有true则true</span></span><br><span class="line">System.out.println(a&gt;b | a&gt;c); <span class="comment">//false | false = false</span></span><br><span class="line">System.out.println(a&gt;b | a&lt;c); <span class="comment">//false | true = true</span></span><br><span class="line">System.out.println(a&lt;b | a&gt;c); <span class="comment">//true | false = true</span></span><br><span class="line">System.out.println(a&lt;b | a&lt;c); <span class="comment">//true | true = true</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//^:逻辑异或 相同false，不同true。</span></span><br><span class="line"><span class="comment">//情侣：男男，男女，女男，女女</span></span><br><span class="line">System.out.println(a&gt;b ^ a&gt;c); <span class="comment">//false ^ false = false</span></span><br><span class="line">System.out.println(a&gt;b ^ a&lt;c); <span class="comment">//false ^ true = true</span></span><br><span class="line">System.out.println(a&lt;b ^ a&gt;c); <span class="comment">//true ^ false = true</span></span><br><span class="line">System.out.println(a&lt;b ^ a&lt;c); <span class="comment">//true ^ true = false</span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//!:逻辑非</span></span><br><span class="line">System.out.println((a&gt;b));<span class="comment">//false</span></span><br><span class="line">System.out.println(!(a&gt;b));<span class="comment">//true</span></span><br><span class="line">System.out.println(!!(a&gt;b));<span class="comment">//false</span></span><br><span class="line">System.out.println(!!!(a&gt;b));<span class="comment">//true</span></span><br><span class="line">System.out.println(!!!!(a&gt;b));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用字符与ASCII代码对照表"><a href="#常用字符与ASCII代码对照表" class="headerlink" title="常用字符与ASCII代码对照表"></a>常用字符与ASCII代码对照表</h4><p>为了便于查询，以下列出<strong>ASCII**</strong>码表**：第128～255号为扩展字符（不常用）</p><table><thead><tr><th>ASCII码</th><th>键盘</th><th>ASCII 码</th><th>键盘</th><th>ASCII 码</th><th>键盘</th><th>ASCII 码</th><th>键盘</th></tr></thead><tbody><tr><td>27</td><td>ESC</td><td>32</td><td>SPACE</td><td>33</td><td>!</td><td>34</td><td>“</td></tr><tr><td>35</td><td>#</td><td>36</td><td>$</td><td>37</td><td>%</td><td>38</td><td>&amp;</td></tr><tr><td>39</td><td>‘</td><td>40</td><td>(</td><td>41</td><td>)</td><td>42</td><td>*</td></tr><tr><td>43</td><td>+</td><td>44</td><td>‘</td><td>45</td><td>-</td><td>46</td><td>.</td></tr><tr><td>47</td><td>/</td><td>48</td><td>0</td><td>49</td><td>1</td><td>50</td><td>2</td></tr><tr><td>51</td><td>3</td><td>52</td><td>4</td><td>53</td><td>5</td><td>54</td><td>6</td></tr><tr><td>55</td><td>7</td><td>56</td><td>8</td><td>57</td><td>9</td><td>58</td><td>:</td></tr><tr><td>59</td><td>;</td><td>60</td><td>&lt;</td><td>61</td><td>=</td><td>62</td><td>&gt;</td></tr><tr><td>63</td><td>?</td><td>64</td><td>@</td><td>65</td><td>A</td><td>66</td><td>B</td></tr><tr><td>67</td><td>C</td><td>68</td><td>D</td><td>69</td><td>E</td><td>70</td><td>F</td></tr><tr><td>71</td><td>G</td><td>72</td><td>H</td><td>73</td><td>I</td><td>74</td><td>J</td></tr><tr><td>75</td><td>K</td><td>76</td><td>L</td><td>77</td><td>M</td><td>78</td><td>N</td></tr><tr><td>79</td><td>O</td><td>80</td><td>P</td><td>81</td><td>Q</td><td>82</td><td>R</td></tr><tr><td>83</td><td>S</td><td>84</td><td>T</td><td>85</td><td>U</td><td>86</td><td>V</td></tr><tr><td>87</td><td>W</td><td>88</td><td>X</td><td>89</td><td>Y</td><td>90</td><td>Z</td></tr><tr><td>91</td><td>[</td><td>92</td><td>\</td><td>93</td><td>]</td><td>94</td><td>^</td></tr><tr><td>95</td><td>_</td><td>96</td><td>`</td><td>97</td><td>a</td><td>98</td><td>b</td></tr><tr><td>99</td><td>c</td><td>100</td><td>d</td><td>101</td><td>e</td><td>102</td><td>f</td></tr><tr><td>103</td><td>g</td><td>104</td><td>h</td><td>105</td><td>i</td><td>106</td><td>j</td></tr><tr><td>107</td><td>k</td><td>108</td><td>l</td><td>109</td><td>m</td><td>110</td><td>n</td></tr><tr><td>111</td><td>o</td><td>112</td><td>p</td><td>113</td><td>q</td><td>114</td><td>r</td></tr><tr><td>115</td><td>s</td><td>116</td><td>t</td><td>117</td><td>u</td><td>118</td><td>v</td></tr><tr><td>119</td><td>w</td><td>120</td><td>x</td><td>121</td><td>y</td><td>122</td><td>z</td></tr><tr><td>123</td><td>{</td><td>124</td><td>\</td><td></td><td>125</td><td>}</td><td>126</td><td>~</td></tr></tbody></table><p><strong>运算符的优先级（从高到低）</strong></p><table><thead><tr><th>优先级</th><th>描述</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>括号</td><td>()、[]</td></tr><tr><td>2</td><td>正负号</td><td>+、-</td></tr><tr><td>3</td><td>自增自减，非</td><td>++、–、!</td></tr><tr><td>4</td><td>乘除，取余</td><td>*、/、%</td></tr><tr><td>5</td><td>加减</td><td>+、-</td></tr><tr><td>6</td><td>移位运算</td><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td>7</td><td>大小关系</td><td>&gt;、&gt;=、&lt;、&lt;=</td></tr><tr><td>8</td><td>相等关系</td><td>==、!=</td></tr><tr><td>9</td><td>按位与</td><td>&amp;</td></tr><tr><td>10</td><td>按位异或</td><td>^</td></tr><tr><td>11</td><td>按位或</td><td>\</td><td></td></tr><tr><td>12</td><td>逻辑与</td><td>&amp;&amp;</td></tr><tr><td>13</td><td>逻辑或</td><td>\</td><td>\</td><td></td></tr><tr><td>14</td><td>条件运算</td><td>?:</td></tr><tr><td>15</td><td>赋值运算</td><td>=、+=、-=、*=、/=、%=</td></tr><tr><td>16</td><td>位赋值运算</td><td>&amp;=、\</td><td>=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=</td></tr></tbody></table><p>如果在程序中，要改变运算顺序，可以使用()。</p><h3 id="DAY003"><a href="#DAY003" class="headerlink" title="DAY003"></a>DAY003</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/003DAY.jpg" alt=""></p><h4 id="位运算符-了解"><a href="#位运算符-了解" class="headerlink" title="位运算符(了解)"></a>位运算符(了解)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">位运算符：位运算符一定是先把数据转成二进制，然后再运算。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">面试题：&amp;和&amp;&amp;的区别?</span></span><br><span class="line"><span class="comment">A:&amp;和&amp;&amp;都可以作为逻辑运算，&amp;&amp;具有短路效果。</span></span><br><span class="line"><span class="comment">B:&amp;还可以作为位运算。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//&amp;,|,^,~</span></span><br><span class="line">System.out.println(<span class="number">3</span> &amp; <span class="number">4</span>); <span class="comment">//0</span></span><br><span class="line">System.out.println(<span class="number">3</span> | <span class="number">4</span>); <span class="comment">//7</span></span><br><span class="line">System.out.println(<span class="number">3</span> ^ <span class="number">4</span>); <span class="comment">//7</span></span><br><span class="line">System.out.println(~<span class="number">3</span>); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:计算出3，4的二进制</span></span><br><span class="line"><span class="comment">3的二进制：00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">4的二进制：00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">B:位&amp;运算有0则0</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   &amp;00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">   ------------------------------------</span></span><br><span class="line"><span class="comment">    00000000 00000000 00000000 00000000</span></span><br><span class="line"><span class="comment">C:位|运算有1则1</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   &amp;00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">   ------------------------------------</span></span><br><span class="line"><span class="comment">    00000000 00000000 00000000 00000111</span></span><br><span class="line"><span class="comment">D:位^运算相同则0，不同则1</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   &amp;00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">   ------------------------------------</span></span><br><span class="line"><span class="comment">    00000000 00000000 00000000 00000111</span></span><br><span class="line"><span class="comment">E:位~运算 把数据每个位都按位取反</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">   ~11111111 11111111 11111111 11111100</span></span><br><span class="line"><span class="comment"> 反:11111111 11111111 11111111 11111011</span></span><br><span class="line"><span class="comment"> 原:10000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;&lt;:左移，右边补0</span></span><br><span class="line"><span class="comment">&gt;&gt;:右移，根据最高位确定补齐是0还是1</span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;:无符号右移 左边补0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println(4 &lt;&lt; 2); //16 = 4 * 2^2</span></span><br><span class="line"><span class="comment">System.out.println(3 &lt;&lt; 3); //3 * 2 ^ 3</span></span><br><span class="line"><span class="comment">System.out.println(32 &gt;&gt; 2); //32 / 2^2</span></span><br><span class="line"><span class="comment">System.out.println(32 &gt;&gt;&gt; 2);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">System.out.println(-<span class="number">32</span> &gt;&gt; <span class="number">2</span>);</span><br><span class="line">System.out.println(-<span class="number">32</span> &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:&lt;&lt;</span></span><br><span class="line"><span class="comment">4的二进制：</span></span><br><span class="line"><span class="comment">00000000 00000000 00000000 00000100</span></span><br><span class="line"><span class="comment">(00)000000 00000000 00000000 0000010000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B:&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">原：10000000 00000000 00000000 00100000</span></span><br><span class="line"><span class="comment">反：11111111 11111111 11111111 11011111</span></span><br><span class="line"><span class="comment">补：11111111 11111111 11111111 11100000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">11111111 11111111 11111111 11100000</span></span><br><span class="line"><span class="comment">0011111111 11111111 11111111 111000(00)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">位^运算符号：针对同一个数据异或两次，其值不变</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 面试题：</span></span><br><span class="line"><span class="comment">请把两个数据进行交换。</span></span><br><span class="line"><span class="comment">说明：如果我没有指定数据的类型，默认是int类型。适用于我讲课。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println(1 ^ 2 ^ 2);//1</span></span><br><span class="line"><span class="comment">System.out.println(1 ^ 1 ^ 2);//2</span></span><br><span class="line"><span class="comment">System.out.println(15 ^ 3 ^ 7 ^ 7 ^ 3);//15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(a+"---"+b);</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//怎么做呢?</span></span><br><span class="line"><span class="comment">//方式1：使用第三方变量。开发中常用此方案。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int temp = a;</span></span><br><span class="line"><span class="comment">a = b;</span></span><br><span class="line"><span class="comment">b = temp;</span></span><br><span class="line"><span class="comment">System.out.println("a="+a+",b="+b);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：不好，可能a+b已经超出范围了。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a = a + b; //a=30</span></span><br><span class="line"><span class="comment">b = a - b; //b=10</span></span><br><span class="line"><span class="comment">a = a - b; //a=20</span></span><br><span class="line"><span class="comment">System.out.println("a="+a+",b="+b);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3：不好，可能a+b已经超出范围了。</span></span><br><span class="line"><span class="comment">//a = (a+b) - (b=a); //一句话搞定</span></span><br><span class="line"><span class="comment">//System.out.println("a="+a+",b="+b);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4：面试</span></span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b; <span class="comment">//b = a ^ b = a ^ b ^ b = a;</span></span><br><span class="line">a = a ^ b; <span class="comment">//a = a ^ b = a ^ b ^ a = b;</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">",b="</span>+b);</span><br><span class="line"><span class="comment">//记忆：左边，a,b,a。右边a^b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三元运算符-掌握"><a href="#三元运算符-掌握" class="headerlink" title="三元运算符(掌握)"></a>三元运算符(掌握)</h4><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">三元运算符：</span></span><br><span class="line"><span class="comment">格式</span></span><br><span class="line"><span class="comment">(关系表达式)?表达式1：表达式2；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行流程：</span></span><br><span class="line"><span class="comment">计算关系表达式，看其返回值</span></span><br><span class="line"><span class="comment">true:表达式1就是整个表达式的值</span></span><br><span class="line"><span class="comment">false:表达式2就是整个表达式的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取两个数据中的较大值</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> z = (x &gt; y)? x : y;</span><br><span class="line">System.out.println(z);</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个数是否相等</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="comment">//boolean flag = (a==b)?true:false;</span></span><br><span class="line"><span class="keyword">boolean</span> flag = (a == b);</span><br><span class="line">System.out.println(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取三个数据中的较大值</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">40</span>;</span><br><span class="line"><span class="keyword">int</span> e = <span class="number">50</span>;</span><br><span class="line"><span class="comment">//int max = (c&gt;d)?(c&gt;e?c:e):(d&gt;e?d:e);</span></span><br><span class="line"><span class="keyword">int</span> temp = (c&gt;d)?c:d;</span><br><span class="line"><span class="keyword">int</span> max = (temp&gt;e)?temp:e;</span><br><span class="line">System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键盘录入数据-掌握"><a href="#键盘录入数据-掌握" class="headerlink" title="键盘录入数据(掌握)"></a>键盘录入数据(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为了程序的数据更加的灵活，我们决定加入键盘录入数据。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用键盘录入数据呢?目前你就给我记住了。</span></span><br><span class="line"><span class="comment">A:导包</span></span><br><span class="line"><span class="comment">import java.util.Scanner;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在class的上面</span></span><br><span class="line"><span class="comment">B:创建对象</span></span><br><span class="line"><span class="comment">Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">C:获取数据</span></span><br><span class="line"><span class="comment">int i = sc.nextInt();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"请输入一个整数："</span>);</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"i:"</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="流程控制-掌握"><a href="#流程控制-掌握" class="headerlink" title="流程控制(掌握)"></a>流程控制(掌握)</h4><p>​    (1)流程控制语句：<br>        顺序结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，</span></span><br><span class="line"><span class="comment">依次执行，程序中大多数的代码都是这样执行的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总的来说：写在前面的先执行，写在后面的后执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我爱林青霞"</span>);</span><br><span class="line">System.out.println(<span class="string">"我爱Java"</span>);</span><br><span class="line">System.out.println(<span class="string">"我爱张曼玉"</span>);</span><br><span class="line">System.out.println(<span class="string">"林青霞爱张曼玉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        选择结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if语句的第二种格式和三元运算符的区别：</span></span><br><span class="line"><span class="comment">三元运算符：</span></span><br><span class="line"><span class="comment">关系表达式?表达式1:表达式2;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if语句格式2：</span></span><br><span class="line"><span class="comment">if(关系表达式)&#123;</span></span><br><span class="line"><span class="comment">语句体1;</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">语句体2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：</span></span><br><span class="line"><span class="comment">三元运算符能够实现的，if语句的第二种格式都可以实现。反之不成立。</span></span><br><span class="line"><span class="comment">什么时候不成立呢?</span></span><br><span class="line"><span class="comment">当if语句的语句体是一条输出语句时，就不成立。</span></span><br><span class="line"><span class="comment">因为三元运算符是一个运算符，要求有结果返回，而输出语句不能作为一个结果返回。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IfDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取键盘录入数据</span></span><br><span class="line">System.out.println(<span class="string">"请输入第一个数据："</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">"请输入第二个数据："</span>);</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用三元运算符实现</span></span><br><span class="line"><span class="keyword">int</span> c =  (a&gt;b)?a:b;</span><br><span class="line">System.out.println(<span class="string">"c:"</span>+c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用if语句格式2实现</span></span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">d = a;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">d = b;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"d:"</span>+d);</span><br><span class="line">System.out.println(<span class="string">"------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接把结果输出</span></span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"b:"</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用三元运算符改进</span></span><br><span class="line"><span class="comment">//(a&gt;b)?System.out.println("a:"+a):System.out.println("b:"+b);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if语句格式3：</span></span><br><span class="line"><span class="comment">if(关系表达式1) &#123;</span></span><br><span class="line"><span class="comment">     语句体1;</span></span><br><span class="line"><span class="comment">&#125;else  if (关系表达式2) &#123;</span></span><br><span class="line"><span class="comment"> 语句体2;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">…</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment"> 语句体n+1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行流程：</span></span><br><span class="line"><span class="comment">首先判断关系表达式1看其结果是true还是false</span></span><br><span class="line"><span class="comment">如果是true就执行语句体1</span></span><br><span class="line"><span class="comment">如果是false就继续判断关系表达式2看其结果是true还是false</span></span><br><span class="line"><span class="comment">如果是true就执行语句体2</span></span><br><span class="line"><span class="comment">如果是false就继续判断关系表达式…看其结果是true还是false</span></span><br><span class="line"><span class="comment">…</span></span><br><span class="line"><span class="comment">如果没有任何关系表达式为true，就执行语句体n+1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：</span></span><br><span class="line"><span class="comment">键盘录入学生成绩，根据成绩输出对于的评价。</span></span><br><span class="line"><span class="comment">90-100优秀</span></span><br><span class="line"><span class="comment">80-90好</span></span><br><span class="line"><span class="comment">70-80良</span></span><br><span class="line"><span class="comment">60-70及格</span></span><br><span class="line"><span class="comment">60以下不及格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IfDemo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘录入学生成绩</span></span><br><span class="line">System.out.println(<span class="string">"请输入成绩："</span>);</span><br><span class="line"><span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验数据的时候，一定要注意：</span></span><br><span class="line"><span class="comment">//正确数据</span></span><br><span class="line"><span class="comment">//错误数据</span></span><br><span class="line"><span class="comment">//边界数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(score&gt;=90 &amp;&amp; score&lt;=100) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("优秀");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=80 &amp;&amp; score&lt;90) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("好");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=70 &amp;&amp; score&lt;80) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("良");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=60 &amp;&amp; score&lt;70) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("及格");</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">System.out.println("不及格");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时候，虽然可以满足要求了。但是没有考虑到错误数据的情况。</span></span><br><span class="line"><span class="comment">//所以，我们需要加一个判断</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(score&gt;=90 &amp;&amp; score&lt;=100) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("优秀");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=80 &amp;&amp; score&lt;90) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("好");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=70 &amp;&amp; score&lt;80) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("良");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=60 &amp;&amp; score&lt;70) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("及格");</span></span><br><span class="line"><span class="comment">&#125;else if(score&gt;=0 &amp;&amp; score&lt;60) &#123;</span></span><br><span class="line"><span class="comment">System.out.println("不及格");</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">System.out.println("输入的成绩有误");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们也可以先判断成绩是否有误</span></span><br><span class="line"><span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"输入的成绩有误"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;<span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"好"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"良"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">switch语句格式：</span></span><br><span class="line"><span class="comment">switch(表达式) &#123;</span></span><br><span class="line"><span class="comment">case 值1：</span></span><br><span class="line"><span class="comment">语句体1;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">    case 值2：</span></span><br><span class="line"><span class="comment">语句体2;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">…</span></span><br><span class="line"><span class="comment">    default：</span></span><br><span class="line"><span class="comment">语句体n+1;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式解释：</span></span><br><span class="line"><span class="comment">A:switch表示这是switch语句</span></span><br><span class="line"><span class="comment">B:表达式的取值</span></span><br><span class="line"><span class="comment">byte,short,int,char</span></span><br><span class="line"><span class="comment">JDK5以后可以是枚举类型。(enum)</span></span><br><span class="line"><span class="comment">JDK7以后可以是字符串。(String)</span></span><br><span class="line"><span class="comment">C:case后面跟的是要和表达式进行比较的值</span></span><br><span class="line"><span class="comment">D:语句体可以是多条语句</span></span><br><span class="line"><span class="comment">E:break表示中断，结束的意思，可以结束switch语句</span></span><br><span class="line"><span class="comment">F:default语句表示所有情况都不匹配的时候，就执行该处的内容，和if语句的else相似。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">面试题：</span></span><br><span class="line"><span class="comment">switch的表达式可以是byte类型吗?可以是long类型吗?可以是String类型吗?</span></span><br><span class="line"><span class="comment">可以。</span></span><br><span class="line"><span class="comment">不可以。</span></span><br><span class="line"><span class="comment">JDK7以后可以。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行流程：</span></span><br><span class="line"><span class="comment">A:首先计算出表达式的值</span></span><br><span class="line"><span class="comment">B:其次，和case依次比较，一旦有对应的值，就会执行相应的语句，</span></span><br><span class="line"><span class="comment">  在执行的过程中，遇到break就会结束。</span></span><br><span class="line"><span class="comment">C:最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：根据键盘录入的数值1，2，3，…7输出对应的星期一，星期二，星期三…星期日。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">A:键盘录入数据，用Scanner实现</span></span><br><span class="line"><span class="comment">B:对录入的数据进行判断，用switch实现</span></span><br><span class="line"><span class="comment">C:输出对应的结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项</span></span><br><span class="line"><span class="comment">A:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的</span></span><br><span class="line"><span class="comment">B:default可以省略吗</span></span><br><span class="line"><span class="comment">可以省略。一般不建议。除非判断的值是固定的。</span></span><br><span class="line"><span class="comment">C:break可以省略吗</span></span><br><span class="line"><span class="comment">可以。最后一个肯定是没有任何问题的。</span></span><br><span class="line"><span class="comment">中间的省略也是可以的，但是不建议，因为可能对我们想要的结果产生影响。</span></span><br><span class="line"><span class="comment">D:default的位置一定要在最后吗</span></span><br><span class="line"><span class="comment">不一定，可以在任何和case相对应的位置。</span></span><br><span class="line"><span class="comment">但是，这个时候，最好加上break。</span></span><br><span class="line"><span class="comment">E:switch语句的结束条件</span></span><br><span class="line"><span class="comment">a:遇到break。</span></span><br><span class="line"><span class="comment">b:执行到程序的末尾</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘录入数据</span></span><br><span class="line">System.out.println(<span class="string">"请输入一个数据(1-7)："</span>);</span><br><span class="line"><span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用switch语句实现</span></span><br><span class="line"><span class="keyword">switch</span>(week) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">System.out.println(<span class="string">"星期日"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">"你输入的数据有误"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    循环结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for和while的区别：</span></span><br><span class="line"><span class="comment">使用区别：控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，</span></span><br><span class="line"><span class="comment">  而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。</span></span><br><span class="line"><span class="comment">  原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率。</span></span><br><span class="line"><span class="comment">场景区别：</span></span><br><span class="line"><span class="comment">for循环适合针对一个范围判断进行操作</span></span><br><span class="line"><span class="comment">水仙花</span></span><br><span class="line"><span class="comment">while循环适合判断次数不明确操作</span></span><br><span class="line"><span class="comment">吃葡萄</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhileDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&lt;<span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(x+<span class="string">"---"</span>);</span><br><span class="line">System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;<span class="number">10</span>; y++) &#123;</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(y+"---");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">do...while格式：</span></span><br><span class="line"><span class="comment">do &#123;</span></span><br><span class="line"><span class="comment">语句体;</span></span><br><span class="line"><span class="comment">&#125;while(条件表达式);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变形格式：</span></span><br><span class="line"><span class="comment">初始化语句;</span></span><br><span class="line"><span class="comment">do &#123;</span></span><br><span class="line"><span class="comment">循环体语句;</span></span><br><span class="line"><span class="comment">控制条件语句;</span></span><br><span class="line"><span class="comment">&#125;while(判断条件语句);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(初始化语句;判断条件语句;控制条件语句) &#123;</span></span><br><span class="line"><span class="comment"> 循环体语句;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int sum = 0;</span></span><br><span class="line"><span class="comment">for(int x=1; x&lt;=100; x++) &#123;</span></span><br><span class="line"><span class="comment">sum+=x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(sum);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//do...while</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">sum+=x;</span><br><span class="line">x++;</span><br><span class="line">&#125;<span class="keyword">while</span> (x&lt;=<span class="number">100</span>);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：在控制台输出九九乘法表。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1*1=1</span></span><br><span class="line"><span class="comment">1*2=22*2=4</span></span><br><span class="line"><span class="comment">1*3=32*3=63*3=9</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">1*9=92*9=183*9=274*9=36...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">转移字符：</span></span><br><span class="line"><span class="comment">\ttab键的位置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForForDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果我们把每一行看作一颗*</span></span><br><span class="line"><span class="comment">//那么这其实就是我们刚才的三角形</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(int x=1; x&lt;=9; x++) &#123;</span></span><br><span class="line"><span class="comment">for(int y=1; y&lt;=x; y++) &#123;</span></span><br><span class="line"><span class="comment">System.out.print("*"+"\t");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来，我们要把*替换为表达式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">9</span>; x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>; y&lt;=x; y++) &#123;</span><br><span class="line">System.out.print(y+<span class="string">"*"</span>+x+<span class="string">"="</span>+(x*y)+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY004"><a href="#DAY004" class="headerlink" title="DAY004"></a>DAY004</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/004DAY.jpg" alt=""></p><h4 id="循环语句-掌握"><a href="#循环语句-掌握" class="headerlink" title="循环语句(掌握)"></a>循环语句(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="number">1</span>)<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span>(初始化表达式;条件表达式;控制条件表达式)&#123;</span><br><span class="line">循环体;</span><br><span class="line">&#125;</span><br><span class="line">执行流程：</span><br><span class="line">A:首先执行初始化表达式</span><br><span class="line">B:其次执行条件表达式，看其返回值</span><br><span class="line">如果是<span class="keyword">true</span>，就继续</span><br><span class="line">如果是<span class="keyword">false</span>，就结束循环</span><br><span class="line">C:执行循环体;</span><br><span class="line">D:执行控制条件表达式</span><br><span class="line">E:回到B</span><br><span class="line">(<span class="number">2</span>)<span class="keyword">while</span>循环</span><br><span class="line">基本格式：</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">变形：</span><br><span class="line">初始化表达式;</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">循环体;</span><br><span class="line">控制条件表达式;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="number">3</span>)<span class="keyword">do</span>...<span class="keyword">while</span>循环(理解)</span><br><span class="line">基本格式：</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br><span class="line"></span><br><span class="line">变形:</span><br><span class="line">初始化表达式;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体;</span><br><span class="line">控制条件表达式;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br><span class="line">(<span class="number">4</span>)三种循环的区别</span><br><span class="line">A:<span class="keyword">do</span>...<span class="keyword">while</span>至少执行一次循环体，而其他两种循环都是先判断在执行。</span><br><span class="line">B:<span class="keyword">while</span>和<span class="keyword">for</span>循环是可以等价转换的。在使用的时候，优先选择<span class="keyword">for</span>。</span><br><span class="line">规则：</span><br><span class="line">a:如果控制条件表达式控制的那个变量，后面还要使用，只能使用<span class="keyword">while</span></span><br><span class="line">b:<span class="keyword">for</span>适合范围的取值，<span class="keyword">while</span>适合次数不明确的操作</span><br><span class="line">(<span class="number">5</span>)注意事项：</span><br><span class="line">死循环：</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;&#125;</span><br><span class="line">(<span class="number">6</span>)案例：</span><br><span class="line">A:输出<span class="number">10</span>次HelloWorld</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">10</span>; x++) &#123;</span><br><span class="line">System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br><span class="line">B:输出<span class="number">1</span>-<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">10</span>; x++) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">C:输出<span class="number">10</span>-<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">10</span>; x&gt;<span class="number">0</span>; x--) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">D:求<span class="number">1</span>-<span class="number">10</span>的和</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">10</span>; x++) &#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">E:求<span class="number">1</span>-<span class="number">100</span>的偶数和(奇数自己写)</span><br><span class="line"><span class="comment">//方式1：</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;=<span class="number">100</span>; x+=<span class="number">2</span>) &#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;=<span class="number">100</span>; x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">F:输出水仙花的数</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">100</span>; x&lt;<span class="number">1000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">int</span> ge = x%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> shi = x/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> bai = x/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">G:统计水仙花的个数</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">100</span>; x&lt;<span class="number">1000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">int</span> ge = x%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> shi = x/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> bai = x/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == (ge*ge*ge+shi*shi*shi+bai*bai*bai)) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">H:输出满足条件的<span class="number">5</span>位数</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">10000</span>; x&lt;<span class="number">100000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">int</span> ge = x%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> shi = x/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> bai = x/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> qian = x/<span class="number">10</span>/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> wan = x/<span class="number">10</span>/<span class="number">10</span>/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((ge==wan) &amp;&amp; (shi==qian) &amp;&amp; (bai==ge+shi+qian+wan)) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">I:统计满足条件的数据</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">1000</span>; x++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">2</span> &amp;&amp; x%<span class="number">5</span>==<span class="number">3</span> &amp;&amp; x%<span class="number">7</span>==<span class="number">2</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br><span class="line">J:折叠次数</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> end = <span class="number">884800</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(start&lt;=end) &#123;</span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line">start*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(count);</span><br><span class="line">K:小芳存钱的题目，自己把代码看懂即可。</span><br></pre></td></tr></table></figure><h4 id="控制跳转语句-掌握"><a href="#控制跳转语句-掌握" class="headerlink" title="控制跳转语句(掌握)"></a>控制跳转语句(掌握)</h4><ol><li><p>break:中断</p><pre><code>    A:场景    switch    循环语句中B:使用    退出单层循环    退出多层循环(带标签的使用)</code></pre></li><li><p>continue:继续</p><pre><code>    A:场景    循环语句中B:使用    退出单层循环    退出多层循环(带标签的使用)break和continue的区别：break:退出整个循环continue:退出一次循环，进行下一次</code></pre></li><li><p>return:返回</p><pre><code>返回，让方法结束。其实在void类型的方法，最后也有一个return。</code></pre><p> 只不过是：reutrn;</p><p> . 在控制台输出多少次：    </p><pre><code>&quot;Java基础班&quot;</code></pre></li></ol><h4 id="方法-掌握"><a href="#方法-掌握" class="headerlink" title="方法(掌握)"></a>方法(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法：完成特定功能的代码块</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名2…) &#123;</span></span><br><span class="line"><span class="comment">方法体;</span></span><br><span class="line"><span class="comment">return 返回值;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">修饰符：public static</span></span><br><span class="line"><span class="comment">返回值类型：功能最终的值的数据类型</span></span><br><span class="line"><span class="comment">方法名：是为了方便调用而起的一个名字</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">形式参数：用于接受实际参数的变量</span></span><br><span class="line"><span class="comment">实际参数：实际参与运算的数据</span></span><br><span class="line"><span class="comment">方法体：完成特定功能的代码</span></span><br><span class="line"><span class="comment">return 返回值：通过return把结果返回给调用者</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们虽然知道了方法的格式，那么我们该如何写一个方法呢?</span></span><br><span class="line"><span class="comment">两个明确：</span></span><br><span class="line"><span class="comment">A:返回值类型</span></span><br><span class="line"><span class="comment">结果的数据类型</span></span><br><span class="line"><span class="comment">B:参数列表</span></span><br><span class="line"><span class="comment">有几个参数参加，并且每个参数的数据类型是什么</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求：求两个数据之和的案例</span></span><br><span class="line"><span class="comment">A:我没有说数据的类型，默认int类型。</span></span><br><span class="line"><span class="comment">B:求两个数据的和</span></span><br><span class="line"><span class="comment">说明有两个参数参加，并且默认都是int类型</span></span><br><span class="line"><span class="comment">C:两个int类型相加的结果是什么类型呢?</span></span><br><span class="line"><span class="comment">是int类型，所以返回值类型这里是int类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法的执行特点：</span></span><br><span class="line"><span class="comment">不调用不执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">有明确返回值的方法的调用：</span></span><br><span class="line"><span class="comment">A:单独调用，没有意义。</span></span><br><span class="line"><span class="comment">B:输出调用，不是很好，因为我们可能需要针对结果还要进行其他的操作。</span></span><br><span class="line"><span class="comment">C:赋值调用，推荐方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">方法的注意事项：</span></span><br><span class="line"><span class="comment">A:方法不调用不执行</span></span><br><span class="line"><span class="comment">B:方法与方法是平级关系，不能嵌套定义</span></span><br><span class="line"><span class="comment">C:方法定义的时候参数之间用逗号隔开</span></span><br><span class="line"><span class="comment">D:方法调用的时候不用在传递数据类型</span></span><br><span class="line"><span class="comment">可以传递变量，也可以常量。就是不能加数据类型</span></span><br><span class="line"><span class="comment">E:如果方法有明确的返回值，一定要有return带回一个值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义两个变量</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单独调用</span></span><br><span class="line"><span class="comment">//sum(x,y);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出调用</span></span><br><span class="line">System.out.println(sum(x,y));</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值调用</span></span><br><span class="line"><span class="keyword">int</span> result = sum(x,y);</span><br><span class="line"><span class="comment">//result进行操作</span></span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我自己要想写一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY005"><a href="#DAY005" class="headerlink" title="DAY005"></a>DAY005</h3><h4 id="方法重载-理解"><a href="#方法重载-理解" class="headerlink" title="方法重载(理解)"></a>方法重载(理解)</h4><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法重载：</span></span><br><span class="line"><span class="comment">在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</span></span><br><span class="line"><span class="comment">和返回值类型无关。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//需求：请写一个功能，实现两个数据的求和</span></span><br><span class="line">System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：请写一个功能，实现三个数据的求和</span></span><br><span class="line"><span class="comment">//System.out.println(sum2(10,20,30));</span></span><br><span class="line">System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(sum(<span class="number">1.5</span>,<span class="number">2.5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static int sum2(int a,int b,int c) &#123;</span></span><br><span class="line"><span class="comment">return a + b + c;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//方法的嵌套调用</span></span><br><span class="line"><span class="comment">//return sum(sum(a,b),c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于方法名要表达的其实是该方法的作用</span></span><br><span class="line"><span class="comment">//所以，sum2这个名字不好，还是要用sum 比较好</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一维数组-掌握"><a href="#一维数组-掌握" class="headerlink" title="一维数组(掌握)"></a>一维数组(掌握)</h4><ol><li><p>数组:存储同一种数据类型的多个元素的集合</p><pre><code>    每个元素都有编号，从0开始。最大编号是数组的长度-1</code></pre></li><li><p>数组的格式：</p><pre><code>    A:数据类型[] 数组名;B:数据类型 数组名[];</code></pre></li><li><p>数组的初始化：</p><pre><code>    A:动态初始化 只给长度，不给元素    `int[] arr = new int[3];`B:静态初始化 不给长度，给元素    `int[] arr = new int[]{1,2,3};`    `简化版：int[] arr = {1,2,3};`</code></pre></li><li><p>java中的内存分配</p><pre><code>    A:栈 存储局部变量B:堆 new出来的C:方法区D:本地方法区E:寄存器</code></pre></li><li><p>两个常见小问题</p><pre><code>    A:数组越界B:空指针异常</code></pre><p> . 数组常见操作    获取数组长度：数组名.length</p><pre><code>    A:数组遍历B:获取最值C:数组反转D:查表法E:查找指定元素第一次出现的索引</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组：存储同一种数据类型的多个元素的集合。(也可以称为容器)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数组的定义格式：</span></span><br><span class="line"><span class="comment">格式1：数据类型[] 数组名;</span></span><br><span class="line"><span class="comment">int[] arr;</span></span><br><span class="line"><span class="comment">格式2：数据类型 数组名[];</span></span><br><span class="line"><span class="comment">int arr[];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">推荐方式1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">现在的数组没有元素，使用是没有意义的。</span></span><br><span class="line"><span class="comment">接下来，我们要对数组进行初始化。</span></span><br><span class="line"><span class="comment">那么，我们如何对数组进行初始化呢?</span></span><br><span class="line"><span class="comment">动态初始化：初始化时只指定数组长度，由系统为数组分配初始值。</span></span><br><span class="line"><span class="comment">静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组长度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">动态初始化：</span></span><br><span class="line"><span class="comment">数据类型[] 数组名 = new 数据类型[数组长度];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//按照动态初始化数组的格式，我们来定义一个存储3个int类型元素的数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">左边：</span></span><br><span class="line"><span class="comment">int:说明数组中的元素的数据类型。</span></span><br><span class="line"><span class="comment">[]:说明这是一个数组</span></span><br><span class="line"><span class="comment">arr:数组的名称</span></span><br><span class="line"><span class="comment">右边：</span></span><br><span class="line"><span class="comment">new:为实体(对象)开辟内存空间</span></span><br><span class="line"><span class="comment">Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="comment">int:说明数组中的元素的数据类型。</span></span><br><span class="line"><span class="comment">[]:说明这是一个数组</span></span><br><span class="line"><span class="comment">3:说明的是数组中的元素个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们如何获取里面的值呢?</span></span><br><span class="line"><span class="comment">//数组名称</span></span><br><span class="line">System.out.println(arr); <span class="comment">//[I@778b3fee 地址值</span></span><br><span class="line"><span class="comment">//如何获取元素值呢?</span></span><br><span class="line"><span class="comment">//数组为每个元素分配了一个编号，这个编号的专业叫法：索引。</span></span><br><span class="line"><span class="comment">//而且是从0开始编号的。也就是说数组的最大编号是长度-1。</span></span><br><span class="line"><span class="comment">//有了编号以后，我们就可以通过数组名和编号的配合取得数组元素</span></span><br><span class="line"><span class="comment">//格式：数组名[编号];</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//0</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静态初始化格式：</span></span><br><span class="line"><span class="comment">数据类型[] 数组名 = new 数据类型[]&#123;元素1,元素2,…&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">简化版：</span></span><br><span class="line"><span class="comment">数据类型[] 数组名 =&#123;元素1,元素2,…&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个数组</span></span><br><span class="line"><span class="comment">//int[] arr = new int[]&#123;1,2,3&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简化后</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组操作常见的两个小问题:</span></span><br><span class="line"><span class="comment">A:数组索引越界</span></span><br><span class="line"><span class="comment">ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">因为我们访问了不存在的索引。</span></span><br><span class="line"><span class="comment">B:空指针异常</span></span><br><span class="line"><span class="comment">NullPointerException</span></span><br><span class="line"><span class="comment">因为数组已经不再指向堆内存，所以就不能再去访问堆内存的元素了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo6</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(arr[3]);</span></span><br><span class="line"></span><br><span class="line">arr = <span class="keyword">null</span>; <span class="comment">//把arr指向堆内存给去掉了，arr没有指向了。</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组-理解"><a href="#二维数组-理解" class="headerlink" title="二维数组(理解)"></a>二维数组(理解)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二维数组：元素为一维数组的数组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">定义格式1：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">m:m表示这个二维数组有多少个一维数组</span></span><br><span class="line"><span class="comment">n:n表示每一个一维数组的元素个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变形：</span></span><br><span class="line"><span class="comment">数据类型 变量名[][] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment">数据类型[] 变量名[] = new 数据类型[m][n];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int[] x,y[];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个二维数组</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//表示arr这个二维数组有三个元素</span></span><br><span class="line"><span class="comment">//每个元素是一个一维数组</span></span><br><span class="line"><span class="comment">//每一个一维数组有2个元素</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr); <span class="comment">//[[I@778b3fee</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//[I@57125f92</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如何输出元素呢?</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义格式2：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = new 数据类型[m][];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">m:m表示这个二维数组有多少个一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义一个数组</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//这里我们仅仅知道这个二维数组有3个一维数组</span></span><br><span class="line"><span class="comment">//但是，每个一维数组有几个元素，我们是不知道的</span></span><br><span class="line"></span><br><span class="line">System.out.println(arr); <span class="comment">//[[I@7d3598c3</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//null</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]); <span class="comment">//</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义格式2：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = new 数据类型[][]&#123;&#123;元素…&#125;,&#123;元素…&#125;,&#123;元素…&#125;&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">变形格式：</span></span><br><span class="line"><span class="comment">数据类型[][] 变量名 = &#123;&#123;元素…&#125;,&#123;元素…&#125;,&#123;元素…&#125;&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Array2Demo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="comment">//int[][] arr = &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;;</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">8</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">2</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两个思考题"><a href="#两个思考题" class="headerlink" title="两个思考题"></a>两个思考题</h4><ol><li>java参数传递问题</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看程序写结果，并总结基本类型和引用类型参数的传递问题(题目在备注部分)</span></span><br><span class="line"><span class="comment">基本类型：形式参数的改变对实际参数没有影响。</span></span><br><span class="line"><span class="comment">引用类型：形式参数的改变直接影响实际参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">java中有没有引用传递?</span></span><br><span class="line"><span class="comment">java中只有值传递。</span></span><br><span class="line"><span class="comment">地址值也是一个值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:10,b:20</span></span><br><span class="line">change(a,b);</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:?,b:?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">change(arr);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>]); <span class="comment">//?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//a=10,b=20</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:10,b:20</span></span><br><span class="line">a = b; <span class="comment">//a=20;</span></span><br><span class="line">b = a + b; <span class="comment">//b=40;</span></span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a+<span class="string">",b:"</span>+b); <span class="comment">//a:20,b:40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> <span class="comment">//arr = &#123;1,2,3,4,5&#125;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果是偶数，数据变为以前的2倍。</span></span><br><span class="line"><span class="keyword">if</span>(arr[x]%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">arr[x]*=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;1,4,3,8,5&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        java中只有值传递。因为地址值也是一个值。</p><ol start="2"><li><p>数据加密问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">某个公司采用公用电话传递数据信息，数据是小于8位的整数，为了确保安全，</span></span><br><span class="line"><span class="comment">在传递过程中需要加密，加密规则如下：</span></span><br><span class="line"><span class="comment">首先将数据倒序，然后将每位数字都加上5，再用和除以10的余数代替该数字，</span></span><br><span class="line"><span class="comment">最后将第一位和最后一位数字交换。 请任意给定一个小于8位的整数，</span></span><br><span class="line"><span class="comment">然后，把加密后的结果在控制台打印出来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">A:数据是小于8位的整数</span></span><br><span class="line"><span class="comment">数据是变化的。(不以0开头)</span></span><br><span class="line"><span class="comment">B:加密规则</span></span><br><span class="line"><span class="comment">假设数据为：123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">首先将数据倒序</span></span><br><span class="line"><span class="comment">654321</span></span><br><span class="line"><span class="comment">然后将每位数字都加上5，再用和除以10的余数代替该数字</span></span><br><span class="line"><span class="comment">109876</span></span><br><span class="line"><span class="comment">最后将第一位和最后一位数字交换</span></span><br><span class="line"><span class="comment">609871</span></span><br><span class="line"><span class="comment">C:输出结果</span></span><br><span class="line"><span class="comment">609871</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiaMiDemo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//123456</span></span><br><span class="line"><span class="comment">//int[] arr = &#123;1,2,3,4,5,6&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数据</span></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得一个数据的任意位上的值</span></span><br><span class="line"><span class="comment">//6,5,4,3,2,1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr[0] = number%10;</span></span><br><span class="line"><span class="comment">arr[1] = number/10%10;</span></span><br><span class="line"><span class="comment">arr[2] = number/10/10%10;</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步</span></span><br><span class="line"><span class="comment">//定义一个索引变量</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(number&gt;<span class="number">0</span>) &#123;</span><br><span class="line">arr[index]  = number%<span class="number">10</span>; <span class="comment">//arr[0]=6,arr[1]=5,arr[2]=4,arr[3]=3,arr[4]=2,arr[5]=1</span></span><br><span class="line">number/=<span class="number">10</span>; <span class="comment">//number=12345,number=1234,number=123,number=12,number=1,number=0</span></span><br><span class="line">index++; <span class="comment">//index=1,index=2,index=3,index=4,index=5,index=6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">arr[x] += <span class="number">5</span>;</span><br><span class="line">arr[x] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[index-<span class="number">1</span>];</span><br><span class="line">arr[index-<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:把实现的代码改进为功能实现</span></span><br><span class="line"><span class="comment">B:键盘录入版</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiaMiDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建键盘录入对象</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘录入数据</span></span><br><span class="line">System.out.println(<span class="string">"请输入数据(小于8位的整数)："</span>);</span><br><span class="line"><span class="keyword">int</span> number = sc.nextInt();</span><br><span class="line"></span><br><span class="line">jiaMi(number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jiaMi</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一步</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(number&gt;<span class="number">0</span>) &#123;</span><br><span class="line">arr[index++] = number%<span class="number">10</span>;</span><br><span class="line">number /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">arr[x] += <span class="number">5</span>;</span><br><span class="line">arr[x] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[index-<span class="number">1</span>];</span><br><span class="line">arr[index-<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;index; x++) &#123;</span><br><span class="line">System.out.print(arr[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h3 id="DAY006"><a href="#DAY006" class="headerlink" title="DAY006"></a>DAY006</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/006DAY.jpg" alt=""></p><h4 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h4><p>​    面向对象是基于面向过程的编程思想</p><ul><li>面向过程：自己一步步的完成操作，强调的是过程。</li><li>面向对象：调用别人的操作，强调的是结果。</li></ul><ol><li><p>面向对象的思想特点：</p><pre><code>A:是一种更符合我们思想习惯的思想</code></pre><p> B:可以将复杂的事情简单化<br> C:将我们从执行者变成了指挥者</p><pre><code>角色发生了转换</code></pre></li><li><p>举例：</p></li></ol><p>A:洗衣服</p><ul><li><p>面向过程：把盆子接水,放洗衣粉–&gt;把衣服扔进去浸泡–&gt;用手揉搓衣服–&gt;漂洗衣服–&gt;拧干–&gt;拿衣架晾起来</p></li><li><p>面向对象：把衣服扔到洗衣机，放洗衣粉,按下启动即可–&gt;拿衣架晾起来</p><p>B:吃饭</p></li><li><p>面向过程：去超市买菜,买米–&gt;洗菜,洗米–&gt;切菜,做饭–&gt;炒菜–&gt;端菜,盛饭–&gt;开吃</p></li><li><p>面向对象：去饭店–&gt;调用服务员的记菜功能–&gt;调用厨师的炒菜功能–&gt;调用服务员的端菜功能–&gt;开吃–&gt;付账</p><p>可以找一个对象帮我们做这些事情。</p><p>C:买电脑<br>面向过程：查阅资料–&gt;坐公交–&gt;到赛格电脑城–&gt;各家比较–&gt;选中自己喜爱的并讨价还价–&gt;回家<br>面向对象：查阅资料–&gt;京东–&gt;货到付账</p><p>写代码举例：</p><pre><code>需求：把大象装进冰箱步骤：    A:打开冰箱门    B:塞进大象    C:关闭冰箱门</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">A:面向过程</span><br><span class="line">a:打开冰箱门</span><br><span class="line">b:塞进大象</span><br><span class="line">c:关闭冰箱门</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("打开冰箱门");</span></span><br><span class="line"><span class="comment">//System.out.println("塞进大象");</span></span><br><span class="line"><span class="comment">//System.out.println("关闭冰箱门");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可能打开冰箱门的操作需要做多次</span></span><br><span class="line"><span class="comment">//并且，打开冰箱门这个功能的代码比较多</span></span><br><span class="line"><span class="comment">//这个时候，其实我们应该用方法改进</span></span><br><span class="line"><span class="comment">//调用功能</span></span><br><span class="line">open();</span><br><span class="line">in();</span><br><span class="line">close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//open();</span></span><br><span class="line"><span class="comment">//open();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打开冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"塞进大象"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关闭冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B:面向对象</span><br><span class="line">要想做到面向对象，请参照我的三句话：</span><br><span class="line">a:分析有哪些类存在</span><br><span class="line">UML(统一建模语言) 名词提取法</span><br><span class="line">b:分析每个类有哪些功能</span><br><span class="line">c:分析类与类的关系</span><br><span class="line"></span><br><span class="line">分析我们的问题：</span><br><span class="line">把大象装进冰箱</span><br><span class="line"></span><br><span class="line">a:分析有哪些类存在</span><br><span class="line">大象</span><br><span class="line">冰箱</span><br><span class="line">测试类(带main方法的那个类)</span><br><span class="line">b:分析每个类有哪些功能</span><br><span class="line">大象:进去</span><br><span class="line">冰箱:打开,关闭</span><br><span class="line">测试类:main</span><br><span class="line">c:分析类与类的关系</span><br><span class="line">在测试类中调用冰箱类和大象类的功能</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"><span class="class"><span class="keyword">class</span> 大象 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"塞进大象"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 冰箱 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打开冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关闭冰箱门"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 测试类 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">冰箱的open();</span><br><span class="line">大象的in();</span><br><span class="line">冰箱的close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>学完面向对象：</strong><br>    以后我们在完成一个需求的时候，请先找是否有对象完成了这个功能，有，我们就直接使用即可。<br>    如果没有，我们就自己定义一个类，完成功能，将来还可以给别人用。</p><h4 id="类与对象-掌握"><a href="#类与对象-掌握" class="headerlink" title="类与对象(掌握)"></a>类与对象(掌握)</h4><p>我们学习编程语言，是为了把现实世界的事物给表达出来，实现信息化处理。</p><p>我们要想通过编程语言来描述事物，首先要知道，事物是如何表达的：</p><pre><code>1. 事物：    属性    该事物的描述信息(外在特征)    行为    该事物能够做什么(内在行为)</code></pre><p>我们学习的是java语言，而java语言最基本的单位是类。<br>所以，我们要把事物通过类来体现。</p><pre><code>2. 事物：    属性    该事物的描述信息(外在特征)    行为    该事物能够做什么(内在行为)</code></pre><p>​    3. 类：<br>        成员变量        该事物的描述信息(外在特征)<br>        成员方法        该事物能够做什么(内在行为)</p><p>类：是一组相关的属性和行为的集合<br>对象：是该类事物的具体体现</p><p>举例：<br>    学生是类<br>    张三是对象</p><h4 id="类的组成-掌握"><a href="#类的组成-掌握" class="headerlink" title="类的组成(掌握)"></a>类的组成(掌握)</h4><p>​    (1)成员变量<br>        其实就是变量，只不过定义在类中，方法外，并且可以不用初始化。<br>    (2)成员方法<br>        其实就是方法，只不过不需要static了<br>    (3)案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一步：分析事物</span></span><br><span class="line"><span class="comment">手机事物：</span></span><br><span class="line"><span class="comment">属性：品牌，价格，颜色</span></span><br><span class="line"><span class="comment">行为：打电话，发短信</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二步：把事物转换为类</span></span><br><span class="line"><span class="comment">手机类：</span></span><br><span class="line"><span class="comment">成员变量：品牌，价格，颜色</span></span><br><span class="line"><span class="comment">成员方法：打电话，发短信</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第三步：把类用英文体现</span></span><br><span class="line"><span class="comment">Phone:</span></span><br><span class="line"><span class="comment">成员变量：brand，price，color</span></span><br><span class="line"><span class="comment">成员方法：call(String name)，sendMessage()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第四步：写代码体现</span></span><br><span class="line"><span class="comment">成员变量：其实就是一个变量，只不过定义在类中方法外，并且也可以不给初始化值。</span></span><br><span class="line"><span class="comment">成员方法：其实就是一个方法，只不过不需要static了。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//这是我的手机类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="comment">//品牌</span></span><br><span class="line">String brand;</span><br><span class="line"><span class="comment">//价格</span></span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打电话的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发短信的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"群发短信"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的使用-掌握"><a href="#类的使用-掌握" class="headerlink" title="类的使用(掌握)"></a>类的使用(掌握)</h4><p>​    (1)创建对象<br>        格式：类名 对象名 = new 类名();<br>    (2)使用成员<br>        成员变量：对象名.变量名;<br>        成员方法：对象名.方法名(…);</p><h4 id="成员变量和局部变量的区别-理解"><a href="#成员变量和局部变量的区别-理解" class="headerlink" title="成员变量和局部变量的区别(理解)"></a>成员变量和局部变量的区别(理解)</h4><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">成员变量和局部变量的区别：</span></span><br><span class="line"><span class="comment">A:在类中的位置不同</span></span><br><span class="line"><span class="comment">成员变量 类中方法外</span></span><br><span class="line"><span class="comment">局部变量 方法内或者方法声明上</span></span><br><span class="line"><span class="comment">B:在内存中的位置不同</span></span><br><span class="line"><span class="comment">成员变量 堆内存</span></span><br><span class="line"><span class="comment">局部变量 栈内存</span></span><br><span class="line"><span class="comment">C:生命周期不同</span></span><br><span class="line"><span class="comment">成员变量 随着对象的存在而存在，随着对象的消失而消失</span></span><br><span class="line"><span class="comment">局部变量 随着方法的调用而存在，随着方法的调用完毕而消失</span></span><br><span class="line"><span class="comment">D:初始化值不同</span></span><br><span class="line"><span class="comment">成员变量 有默认的初始化值</span></span><br><span class="line"><span class="comment">局部变量 没有默认的初始化值，必须先定义，赋值，才能使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">如果有同名的变量，一般会采用就近原则。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VariableDemo</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//局部变量</span></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="comment">//System.out.println(y);</span></span><br><span class="line"></span><br><span class="line">VariableDemo vd = <span class="keyword">new</span> VariableDemo();</span><br><span class="line">System.out.println(vd.x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="形式参数问题-理解"><a href="#形式参数问题-理解" class="headerlink" title="形式参数问题(理解)"></a>形式参数问题(理解)</h4><p>​    (1)基本类型<br>        基本类型作为形式参数，需要的是该基本类型的值。<br>    (2)引用类型<br>        引用类型作为形式参数，需要的是该引用类型的地址值。(对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">匿名对象：没有名字的对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用场景：</span></span><br><span class="line"><span class="comment">A:调用方法,该方法仅仅被使用一次的时候适用。</span></span><br><span class="line"><span class="comment">B:作为实际参数传递</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义学生类，写一个love方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>  </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">love</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学生喜欢放假"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line">s.love();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoNameObject</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="comment">Student s = new Student();</span></span><br><span class="line"><span class="comment">s.love();</span></span><br><span class="line"><span class="comment">s.love();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//匿名对象</span></span><br><span class="line"><span class="comment">new Student().love();</span></span><br><span class="line"><span class="comment">new Student().love();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有名字的情况</span></span><br><span class="line"><span class="comment">//StudentDemo sd = new StudentDemo();</span></span><br><span class="line"><span class="comment">//Student s = new Student();</span></span><br><span class="line"><span class="comment">//sd.test(s);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有名字的情况</span></span><br><span class="line"><span class="comment">//StudentDemo sd = new StudentDemo();</span></span><br><span class="line"><span class="comment">//sd.test(new Student());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不妨在来一步</span></span><br><span class="line"><span class="keyword">new</span> StudentDemo().test(<span class="keyword">new</span> Student());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名对象-理解"><a href="#匿名对象-理解" class="headerlink" title="匿名对象(理解)"></a>匿名对象(理解)</h4><p>​    (1)匿名对象：没有名字的对象。是对象的简化书写方式。<br>    (2)使用场景<br>        A:调用方法，仅仅只调用一次<br>        B:作为实际参数传递</p><h4 id="封装-掌握"><a href="#封装-掌握" class="headerlink" title="封装(掌握)"></a>封装(掌握)</h4><p>​    (1)隐藏实现细节，提供公共的访问方式<br>    (2)好处：<br>        A:隐藏实现细节，提供公共的访问方式<br>        B:提高了代码的复用性<br>        C:提高了代码的安全性<br>    (3)使用原则<br>        A:把成员变量隐藏<br>        B:给出该成员变量对应的公共访问方式</p><h4 id="private关键字-掌握"><a href="#private关键字-掌握" class="headerlink" title="private关键字(掌握)"></a>private关键字(掌握)</h4><p>​    (1)是一个权限修饰符<br>    (2)可以修饰类的成员(成员变量和成员方法)<br>    (3)仅仅在本类中可以访问<br>    (4)标准代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this关键字-掌握"><a href="#this关键字-掌握" class="headerlink" title="this关键字(掌握)"></a>this关键字(掌握)</h4><p>​    (1)this：代表本类的对象<br>    (2)应用场景：<br>        解决了局部变量隐藏成员变量的问题。<br>        其他用法和super一起讲。<br>    (3)标准代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们曾经说过，起名字，要做到见名知意，而现在的n和a都不是一个好的变量名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">由于变量在查找的时候，采用的是就近原则，所以，这个时候，就产生了问题。</span></span><br><span class="line"><span class="comment">本来想给成员变量赋值的，确赋值给了局部变量。</span></span><br><span class="line"><span class="comment">那么，我们该如何解决这个问题呢?</span></span><br><span class="line"><span class="comment">java针对这种情况，就提供了一个关键字：this</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">this：代表本类的对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">应用场景：</span></span><br><span class="line"><span class="comment">局部变量隐藏成员变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public void setName(String n) &#123;</span></span><br><span class="line"><span class="comment">name = n;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  <span class="comment">//"林青霞"</span></span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name; <span class="comment">//其实这里隐含了this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//输出成员变量的值</span></span><br><span class="line">System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员变量赋值</span></span><br><span class="line">s.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">s.setAge(<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次输出成员变量的值</span></span><br><span class="line">System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY007"><a href="#DAY007" class="headerlink" title="DAY007"></a>DAY007</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/007DAY.jpg" alt=""></p><h4 id="构造方法-掌握"><a href="#构造方法-掌握" class="headerlink" title="构造方法(掌握)"></a>构造方法(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法作用：给对象的数据进行初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">A:方法名与类名相同</span></span><br><span class="line"><span class="comment">B:没有返回值类型，连void都没有</span></span><br><span class="line"><span class="comment">C:没有具体的返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造方法的格式：</span></span><br><span class="line"><span class="comment">修饰符 类名(...) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造方法的注意事项：</span></span><br><span class="line"><span class="comment">A:如果你不提供构造方法，系统会给出默认无参构造方法</span></span><br><span class="line"><span class="comment">B:如果你提供了构造方法，系统将不再提供默认无参构造方法</span></span><br><span class="line"><span class="comment">这个时候，如果你还想继续使用无参构造方法，只能自己给出。</span></span><br><span class="line"><span class="comment">推荐：永远自己给出无参构造方法。</span></span><br><span class="line"><span class="comment">C:构造方法也是可以重载的</span></span><br><span class="line"><span class="comment">D:构造方法中可以有return语句吗?</span></span><br><span class="line"><span class="comment">可以。只不过是return;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是无参构造方法"</span>);</span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示所有成员变量的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"姓名是："</span>+name+<span class="string">",年龄是："</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>);</span><br><span class="line">s2.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s3 = <span class="keyword">new</span> Student(<span class="number">28</span>);</span><br><span class="line">s3.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Student s4 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>,<span class="number">28</span>);</span><br><span class="line">s4.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的初始化过程-理解"><a href="#对象的初始化过程-理解" class="headerlink" title="对象的初始化过程(理解)"></a>对象的初始化过程(理解)</h4><ol><li><code>Student s = new Student();</code>做了哪些事情</li></ol><ul><li>A:加载Student.class文件进内存</li><li>B:在栈中为s开辟空间</li><li>C:在堆中为学生对象开辟空间</li><li>D:为学生对象的成员变量赋默认值</li><li>E:为学生对象的成员变量赋显示值</li><li>F:通过构造方法给成员变量赋值</li><li>G:对象构造完毕，把地址赋值给s变量</li></ul><h4 id="面向对象的练习-掌握"><a href="#面向对象的练习-掌握" class="headerlink" title="面向对象的练习(掌握)"></a>面向对象的练习(掌握)</h4><ul><li>(1)写一个类Demo,里面有一个求和功能。并测试。</li><li>(2)写一个长方形的类，里面有求周长和面积的功能。并测试。</li><li>(3)自己分析员工类，实现，并测试。</li><li>(4)自己写一个包含了加减乘除运算的类，并测试。</li></ul><h4 id="static关键字-掌握"><a href="#static关键字-掌握" class="headerlink" title="static关键字(掌握)"></a>static关键字(掌握)</h4><ul><li>(1)是一个状态修饰符。静态的意思</li><li>(2)它可以修饰成员变量和成员方法</li><li><p>(3)特点：</p><pre><code>    A:随着类的加载而加载B:优先于对象存在C:被所有对象共享    这也是判断我们是不是该使用静态的条件    举例：饮水机和水杯例子。D:可以通过类名调用    静态修饰的内容，可以通过类名调用，也可以通过对象名调用</code></pre></li><li><p>(4)方法访问特点</p><p>​        A:普通成员方法</p><p>​            可以访问静态成员变量，非静态成员变量，静态成员方法，非静态成员方法</p><p>​        B:静态成员方法</p><p>​            只能访问静态成员变量，静态成员方法</p><p>简记：静态只能访问静态</p><p>注意：</p><pre><code>静态中是不能有this的。先进内存的不能访问后进内存的。反之可以。</code></pre><p>​</p></li></ul><h4 id="静态成员变量和普通成员变量的区别-理解"><a href="#静态成员变量和普通成员变量的区别-理解" class="headerlink" title="静态成员变量和普通成员变量的区别(理解)"></a>静态成员变量和普通成员变量的区别(理解)</h4><p>​    (1)所属不同<br>        静态属于类的，称为类变量<br>        非静态属于对象的，称为对象变量，实例变量<br>    (2)内存空间不同<br>        静态在方法区的静态区<br>        非静态在堆内存<br>    (3)生命周期不同<br>        静态随着类的加载而加载，随着类的消失而消失<br>        非静态随着对象的创建而存在，随着对象的消失而消失<br>    (4)调用不同<br>        静态可以通过类名调用，也可以通过对象名调用。建议通过类名调用<br>        非静态只能通过对象名调用</p><h4 id="main方法是静态的-理解"><a href="#main方法是静态的-理解" class="headerlink" title="main方法是静态的(理解)"></a>main方法是静态的(理解)</h4><p>​    <code>public static void main(String[] args)</code></p><h4 id="制作帮助文档-了解"><a href="#制作帮助文档-了解" class="headerlink" title="制作帮助文档(了解)"></a>制作帮助文档(了解)</h4><p>​    (1)写代码<br>    (2)加文档注释<br>    (3)通过javadoc工具生成说明书</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为这个数组的工具类并没有使用非静态的成员。</span></span><br><span class="line"><span class="comment">//为了方便调用，我们就把这个方法改进为静态修饰的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">制作一个说明书的过程：</span></span><br><span class="line"><span class="comment">A:写代码</span></span><br><span class="line"><span class="comment">B:加入文档注释</span></span><br><span class="line"><span class="comment">C:通过javadoc工具生成说明书</span></span><br><span class="line"><span class="comment">格式：javadoc -d 目录 -author -version ArrayTool.java</span></span><br><span class="line"><span class="comment">  javadoc -d doc -author -version ArrayTool.java</span></span><br><span class="line"><span class="comment">注意：javadoc: 错误 - 找不到可以文档化的公共或受保护的类。</span></span><br><span class="line"><span class="comment">说明类的权限不够大，用public修饰即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">56</span>,<span class="number">38</span>,<span class="number">91</span>,<span class="number">72</span>,<span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：遍历数组</span></span><br><span class="line"><span class="comment">//ArrayTool at = new ArrayTool();</span></span><br><span class="line"><span class="comment">//at.printArray(arr);</span></span><br><span class="line"></span><br><span class="line">ArrayTool.printArray(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求：我要获取数组中的最大值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用帮助文档-掌握"><a href="#使用帮助文档-掌握" class="headerlink" title="使用帮助文档(掌握)"></a>使用帮助文档(掌握)</h4><ol><li>找到帮助文档，并打开帮助文档</li></ol><ol start="2"><li>找到显示，点击索引，看到输入框</li><li>在输入框里面输入你要查找的类，并回车即可Scanner</li></ol><ol start="4"><li><p>看类在哪个包下</p><pre><code>如果类在java.lang包下，是不需要导包的。</code></pre><p> 如果类不在java.lang包下，是需要导包的。</p><p> 格式：import java.util.Scanner;</p></li><li>看类的解释说明</li><li><p>看类的结构和说明书的匹配情况</p><p> 字段摘要    –    成员变量<br> 构造方法摘要    –    构造方法<br> 方法摘要    –    成员方法</p></li><li><p>看类的构造方法</p><pre><code>因为看懂了构造方法，我们就可以创建对象了。</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Scanner</span><span class="params">(InputStream source)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">System:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InputStream in; <span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line">InputStream is = System.in;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">不是所有的类都能看到构造方法。</span><br><span class="line">一般来说，没有构造方法的类的成员基本上都是静态的。</span><br></pre></td></tr></table></figure><ol start="8"><li><p>看类的方法</p><pre><code>`public int nextInt()`</code></pre></li></ol><p>左边：<br>    是否静态：说明该方法可以通过类名调用<br>    返回值类型：人家返回什么类型，你就用什么类型接收<br>右边：<br>    方法名称：方法名不能写错了，写错了就用不了了。<br>    参数列表：看参数的个数，以及参数的数据类型。<br>          人家要几个，你就给几个，人家要什么类型，你就给什么类型。</p><h4 id="学习Math类-掌握"><a href="#学习Math类-掌握" class="headerlink" title="学习Math类(掌握)"></a>学习Math类(掌握)</h4><p>​    (1)Math:针对数学进行运算的类<br>    (2)特点：没有构造方法，因为它的成员都是静态的<br>    (3)产生随机数：<br>        <code>public static double random(): 产生随机数，范围[0.0,1.0)</code><br>    (4)产生1-100之间的随机数<br>        <code>int number = (int)(Math.random()*100)+1;</code><br>    (5)猜数字小游戏案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需求：猜数字小游戏</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">A:系统产生一个1-100之间的随机数。</span></span><br><span class="line"><span class="comment">int number = (int)(Math.random()*100)+1;</span></span><br><span class="line"><span class="comment">B:键盘录入数据,用Scanner实现</span></span><br><span class="line"><span class="comment">C:用这两个数据进行比较</span></span><br><span class="line"><span class="comment">大提示大了</span></span><br><span class="line"><span class="comment">小提示小了</span></span><br><span class="line"><span class="comment">等恭喜你，猜中了</span></span><br><span class="line"><span class="comment">D:为了保证我们能够猜中，我们就加入循环，实现多次猜。直到猜中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuessNumberDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//系统产生一个1-100之间的随机数。</span></span><br><span class="line"><span class="keyword">int</span> number = (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//键盘录入数据,用Scanner实现</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入一个数据：(1-100)"</span>);</span><br><span class="line"><span class="keyword">int</span> guessNumber = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用这两个数据进行比较</span></span><br><span class="line"><span class="keyword">if</span>(guessNumber &gt; number) &#123;</span><br><span class="line">System.out.println(<span class="string">"你猜的数据"</span>+guessNumber+<span class="string">"大了"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNumber &lt; number) &#123;</span><br><span class="line">System.out.println(<span class="string">"你猜的数据"</span>+guessNumber+<span class="string">"小了"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"恭喜你，猜中了"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码块-理解"><a href="#代码块-理解" class="headerlink" title="代码块(理解)"></a>代码块(理解)</h4><p>​    (1)在java中用{}起来的代码<br>    (2)分类：<br>        局部代码块：在方法中。限定变量生命周期，及早释放，提高内存使用率<br>        构造代码块：在类中方法外。<br>                把多个构造中的相同代码用一个构造代码块体现，每次创建对象都会自动调用。<br>        静态代码块：在类中方法外，用static修饰。<br>                对类中的数据进行初始化。仅仅执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">代码块：在Java中，使用&#123;&#125;括起来的代码被称为代码块。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">根据其位置和声明的不同，可以分为</span></span><br><span class="line"><span class="comment">局部代码块：在方法中出现；限定变量生命周期，及早释放，提高内存利用率</span></span><br><span class="line"><span class="comment">构造代码块：在类中方法外出现；</span></span><br><span class="line"><span class="comment">多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</span></span><br><span class="line"><span class="comment">静态代码块：在类中方法外出现，加了static修饰。</span></span><br><span class="line"><span class="comment">用于给类进行初始化，在加载的时候就执行，并且只执行一次。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//局部代码块</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Code &#123;</span></span><br><span class="line"><span class="comment">public void show() &#123;</span></span><br><span class="line"><span class="comment">//局部代码块</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int x = 10;</span></span><br><span class="line"><span class="comment">System.out.println(x);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//System.out.println(x);</span></span><br><span class="line"><span class="comment">//... 1000行,x在这1000行代码中没有被使用</span></span><br><span class="line"><span class="comment">int y = 100;</span></span><br><span class="line"><span class="comment">System.out.println(y);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造代码块</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Code &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//构造代码块</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">System.out.println("AAAAA"); </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Code() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println("AAAAA"); //假如这个代码的内容比较多，并且在每个构造中都会出现</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Code(String s) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println("AAAAA");</span></span><br><span class="line"><span class="comment">System.out.println(s);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态代码块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"AAAAA"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public Code() &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public Code(String s) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(s);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodeDemo</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"BBBBB"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Code c = <span class="keyword">new</span> Code();</span><br><span class="line"><span class="comment">//c.show();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Code c2 = new Code("hello");</span></span><br><span class="line">System.out.println(<span class="string">"CCCCC"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DAY008"><a href="#DAY008" class="headerlink" title="DAY008"></a>DAY008</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/008DAY.jpg" alt=""></p><h4 id="继承-掌握"><a href="#继承-掌握" class="headerlink" title="继承(掌握)"></a>继承(掌握)</h4><p>​    (1)把多个类中相同的属性和行为提取出来，定义到一个类中，<br>       然后让这多个类和这一个类产生一个关系，这多个类就具备这一个类的属性和行为了。<br>       这种关系叫：继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java中的继承特点：</span></span><br><span class="line"><span class="comment">A:Java只支持单继承，不支持多继承。</span></span><br><span class="line"><span class="comment">B:Java支持多层继承(继承体系)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class C extends A,B &#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java中的继承注意事项：</span></span><br><span class="line"><span class="comment">A:子类只能继承父类所有非私有的成员(成员方法和成员变量)</span></span><br><span class="line"><span class="comment">B:子类不能继承父类的构造方法，但是可以通过super(后面讲)关键字去访问父类构造方法。</span></span><br><span class="line"><span class="comment">C:不要为了部分功能而去继承</span></span><br><span class="line"><span class="comment">class A &#123;</span></span><br><span class="line"><span class="comment">public void show()&#123;&#125;</span></span><br><span class="line"><span class="comment">public void show2()&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class B extends A &#123;</span></span><br><span class="line"><span class="comment">//public void show()&#123;&#125;</span></span><br><span class="line"><span class="comment">public void show3()&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">那么，我们什么时候考虑使用继承呢?</span></span><br><span class="line"><span class="comment">继承中类之间体现的是：”is a”的关系。</span></span><br><span class="line"><span class="comment">如果两个类满足这个关系：xxx is a yyy，那么他们就可以使用继承。</span></span><br><span class="line"><span class="comment">举例：类A和类B，如果类A is a 类B或者类B is a 类A 能念通过，就可以考虑使用继承。</span></span><br><span class="line"><span class="comment">      否则不可以。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Student,Person</span></span><br><span class="line"><span class="comment">Dog,Animal</span></span><br><span class="line"><span class="comment">Dog,Pig</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建子类对象</span></span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line"><span class="comment">//System.out.println(z.num);</span></span><br><span class="line">System.out.println(z.num2);</span><br><span class="line"><span class="comment">//z.show();</span></span><br><span class="line">z.show2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//看Fu行不行</span></span><br><span class="line"><span class="comment">//Fu f = new Fu();</span></span><br><span class="line"><span class="comment">//System.out.println(f.num);</span></span><br><span class="line"><span class="comment">//System.out.println(f.num2);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承间的成员变量关系：</span></span><br><span class="line"><span class="comment">名字不同：非常的简单，一看就知道使用的是谁。</span></span><br><span class="line"><span class="comment">名字相同：就近原则。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用变量的时候，会先找局部范围。</span></span><br><span class="line"><span class="comment">如果想直接使用成员变量，加关键字：this即可。</span></span><br><span class="line"><span class="comment">如果想直接使用父类的成员变量，加关键字：super即可。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">60</span>;</span><br><span class="line">System.out.println(age); <span class="comment">//局部范围</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.age); <span class="comment">//本类成员范围</span></span><br><span class="line">System.out.println(<span class="keyword">super</span>.age); <span class="comment">//父类成员范围</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="comment">//System.out.println(s.age);</span></span><br><span class="line"><span class="comment">//System.out.println(s.num);</span></span><br><span class="line"></span><br><span class="line">s.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承中的构造方法关系：</span></span><br><span class="line"><span class="comment">子类中所有的构造方法默认都会访问父类中空参数的构造方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为什么呢?</span></span><br><span class="line"><span class="comment">因为子类会继承父类中的数据，可能还会使用父类的数据。</span></span><br><span class="line"><span class="comment">所以，子类初始化之前，一定要先完成父类数据的初始化。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">那么，我可不可以访问父亲的带参构造方法呢?</span></span><br><span class="line"><span class="comment">可以。通过super(...)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">A:每一个构造方法的第一条语句默认都是：super()</span></span><br><span class="line"><span class="comment">B:super(...)这样的形式在构造方法中只能出现一次。</span></span><br><span class="line"><span class="comment">C:如果父类没有无参构造方法，那么，我们只能</span></span><br><span class="line"><span class="comment">a:通过super去访问父类的带参构造方法。</span></span><br><span class="line"><span class="comment">b:通过this去访问本类的其他构造方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public Fu() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("Fu()");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line"><span class="comment">//super("aaa");</span></span><br><span class="line"><span class="comment">//this("aaa");</span></span><br><span class="line">System.out.println(<span class="string">"zi()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line"><span class="comment">//super(name);</span></span><br><span class="line"><span class="comment">//this();</span></span><br><span class="line">System.out.println(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建子类对象</span></span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line">Zi z2 = <span class="keyword">new</span> Zi(<span class="string">"java"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">需求<span class="number">1</span>：写一个学生类，包含姓名和年龄</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">需求<span class="number">2</span>：写一个教师类，包含姓名和年龄</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">需求<span class="number">3</span>：写一个工人类，包含姓名和年龄</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">需求<span class="number">4</span>：...</span><br><span class="line"></span><br><span class="line">通过上面的代码，我们发现各个类中相同的东西比较多。</span><br><span class="line">并且，如果我们对每个类要添加或者删除相同的东西，也比较麻烦，</span><br><span class="line">因为我们要操作很多类。</span><br><span class="line">那么，我们就在想，有没有比较好的方式解决这个问题呢?</span><br><span class="line">如何解决呢?</span><br><span class="line">思想：我可以把这多个类中相同的内容给提前出来定义到类A中。</span><br><span class="line">      然后让这些类和A类产生一个关系，有了这个关系后，这些</span><br><span class="line">      类就具备了A类的成员。</span><br><span class="line">当然是可以的了，java提供了继承技术来解决这个问题。</span><br><span class="line"></span><br><span class="line">按照这种思想我们来改进代码：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getXxx()/setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line">这个关系如何表达呢?</span><br><span class="line">格式：<span class="class"><span class="keyword">class</span> 子类名 <span class="keyword">extends</span> 父类名 </span>&#123;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">???</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">???</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">称呼：</span><br><span class="line">Person：父类，基类，超类</span><br><span class="line">Student,Teacher：子类，派生类</span><br></pre></td></tr></table></figure><ol><li><p>java中的继承的好处和弊端</p><pre><code>    A:好处        a:提高了代码的复用性    b:提高了代码的可维护性    c:让类与类之间产生了一个关系，是多态的前提B:弊端    让类与类的耦合增强了。这样一个类的改动会直接影响另一个类。</code></pre></li></ol><p>设计原则：高内聚，低耦合。</p><ol start="2"><li><p>java中的继承的注意事项：</p><pre><code>A:私有成员不能被继承</code></pre><p> B:构造方法不能被继承，想访问，通过super关键字<br> C:不能为了部分功能而去使用继承</p></li><li><p>继承中的成员关系：</p><pre><code>A:成员变量不同名：特别简单，一看就知道用的是谁。同名：就近原则    访问自己的用this    访问父亲的用super</code></pre><p> B:构造方法</p><pre><code>a:子类的所有构造方法默认都是访问父类的无参构造方法b:如果父类没有无参构造方法，怎么办呢?    通过super(...)访问父类带参构造方法    通过this(...)访问本类其他构造方法。(一定要有一个访问了父类的构造方法)    注意：super或者this只能出现一个，并且只能在语句的第一条语句。为什么呢?    因为子类可能会访问父类的数据，所以，在子类初始化之前，要先把父类数据初始化完毕。</code></pre><p> C:成员方法</p><pre><code>不同名：特别简单，一看就知道用的是谁。同名：就近原则    访问自己的用this    访问父亲的用super</code></pre></li><li><p>this和super的区别及应用场景</p><pre><code>A:区别this：本类对象的引用super：父类存储空间的标识。可以理解为父类对象的引用。</code></pre></li></ol><p>B:应用场景<br>    a:成员变量<br>        this.变量 本类的成员变量<br>        super.变量 父类的成员变量<br>    b:构造方法<br>        this(…) 本类的构造方法<br>        super(…) 父类的构造方法<br>    c:成员方法<br>        this.方法名(…) 本类的成员方法<br>        super.方法名(…) 父类的成员方法</p><h4 id="方法重写-掌握"><a href="#方法重写-掌握" class="headerlink" title="方法重写(掌握)"></a>方法重写(掌握)</h4><ol><li><p>描述：在子类中，出现了和父类中一模一样的方法声明的现象。</p></li><li><p>作用：可以使用父类功能，还可以增强该功能。</p></li></ol><ol start="3"><li>面试题：Overload和Override的区别。Overload的方法是否可以改变返回值的类型?</li></ol><p>Overload：重载       同一个类中，方法名相同，参数列表不同。与返回值类型无关。</p><p>Override：重写       存在于子父类，或者子父接口中，方法声明相同。</p><p>Overload的方法可以改变返回值的类型，因为它与返回值类型无关。</p><ol start="4"><li><p>方法重写的注意事项：</p><pre><code>A:父类私有方法不能被重写</code></pre><p> B:子类重写方法的访问权限不能比父类的方法低<br> C:静态只能重写静态。(其实这算不上重写)</p></li></ol><h4 id="final关键字-掌握"><a href="#final关键字-掌握" class="headerlink" title="final关键字(掌握)"></a>final关键字(掌握)</h4><p>​    (1)final:最终的意思<br>    (2)作用：可以修饰类，修饰成员变量，修饰成员方法<br>    (3)特点：<br>        A:修饰类 类不能被继承<br>        B:修饰成员变量 变量变成了常量<br>        C:修饰成员方法 方法不能被重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">很多时候，我们可能不想让子类修改我的内容。这个时候该怎么半呢?</span></span><br><span class="line"><span class="comment">针对这种情况，java又提供了一个状态修饰符：final。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">final:最终的意思。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">作用：</span></span><br><span class="line"><span class="comment">可以修饰类，成员变量，成员方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特点：</span></span><br><span class="line"><span class="comment">类：类被final修饰，说明该类是最终类，不能被继承。</span></span><br><span class="line"><span class="comment">成员变量：变量被final修饰后，就变成了常量。值不能被修改。</span></span><br><span class="line"><span class="comment">成员方法：方法不能被子类重写。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">getResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这里是绝密的资源,可以看,不可以改"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line"><span class="comment">//num2 = 200;</span></span><br><span class="line">System.out.println(num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public void getResource() &#123;</span></span><br><span class="line"><span class="comment">System.out.println("这里我想干什么就干什么");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.getResource();</span><br><span class="line">z.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    (4)面试题：<br>        A:final修饰局部变量<br>            a:基本类型 值不能发生改变<br>            b:引用类型 地址值不能发送改变，对象的内容是可以改变的<br>        B:final的初始化时机<br>            a:在定义时就赋值<br>            b:在构造方法完毕前赋值</p><h4 id="多态-掌握"><a href="#多态-掌握" class="headerlink" title="多态(掌握)"></a>多态(掌握)</h4><p>​    (1)多态：同一个对象，在不同时刻表现出来的多种状态<br>        举例：水，猫和动物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多态：同一个对象在不同时刻表现出现的不同状态。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">举例：</span></span><br><span class="line"><span class="comment">A:水(水，冰，水蒸气)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B:猫和动物。</span></span><br><span class="line"><span class="comment">把右边的值赋值给左边，如果能读通过，就说明可以。</span></span><br><span class="line"><span class="comment">动物 d = new 动物();</span></span><br><span class="line"><span class="comment">动物 dd = new 猫();</span></span><br><span class="line"><span class="comment">猫 m = new 猫();</span></span><br><span class="line"><span class="comment">猫 mm = new 动物();  错误</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">动物 dd = new 猫();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">代码如何体现呢?</span></span><br><span class="line"><span class="comment">A:有继承关系</span></span><br><span class="line"><span class="comment">B:有方法重写</span></span><br><span class="line"><span class="comment">C:有父类引用指向子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"动物吃饭"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"狗吃肉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Animal a = new Animal();</span></span><br><span class="line"><span class="comment">//Dog d = new Dog();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态</span></span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    (2)多态的前提：<br>        A:有继承关系<br>        B:有方法重写<br>        C:有父类引用指向子类对象<br>    (3)多态中的成员访问特点：<br>        A:成员变量<br>            编译看左边，运行看左边<br>        B:成员方法<br>            编译看左边，运行看右边<br>        C:静态方法<br>            编译看左边，运行看左边</p><p>为什么：<br>        因为方法有重写，而变量没有。静态方法没有重写一说。</p><h3 id="DAY009"><a href="#DAY009" class="headerlink" title="DAY009"></a>DAY009</h3><p><img src="http://ovi3ob9p4.bkt.clouddn.com/xuexi/009DAY.jpg" alt=""></p><h4 id="多态-掌握-1"><a href="#多态-掌握-1" class="headerlink" title="多态(掌握)"></a>多态(掌握)</h4><p>​    (1)同一个事物在不同时刻表现出现的多种状态。<br>        举例：水，猫和动物<br>    (2)前提<br>        A:有继承或者实现关系<br>        B:有方法重写<br>            因为抽象类中的抽象方法以及接口中的方法都必须被子类重写，调用才有意义。<br>        C:有父类或者父接口引用指向子类对象<br>    (3)多态中的成员访问特点<br>        Fu f = new Zi();<br>        A:成员变量<br>            编译看左边，运行看左边<br>        B:成员方法<br>            编译看左边，运行看右边<br>        C:静态方法<br>            编译看左边，运行看左边<br>    (4)好处和弊端<br>        A:好处<br>            提高了代码的维护性<br>            提高了代码的扩展性<br>        B:弊端<br>            不能访问子类特有功能<br>    (5)如何访问子类特有功能<br>        A:创建子类对象<br>        B:向下转型<br>    (6)多态中的转型<br>        A:向上转型<br>            子到父<br>        B:向下转型<br>            父到子(加强制转换)<br>    (7)孔子装爹案例</p><h4 id="抽象类-掌握"><a href="#抽象类-掌握" class="headerlink" title="抽象类(掌握)"></a>抽象类(掌握)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象类概述：动物不是一个具体的事物，只有猫，狗才是具体的个体。</span></span><br><span class="line"><span class="comment">并且，在动物中我们针对吃的功能，也不应该给出具体的体现，</span></span><br><span class="line"><span class="comment">因为不同的动物吃的内容是不一样的，我们应该让具体的动物自己去实现自己吃的功能。</span></span><br><span class="line"><span class="comment">而一个功能如果没有具体的体现，就是一个抽象的内容。如何表示呢?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数列表...);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为了表示这是一个抽象的东西，java提供了一个标识的关键字：abstract</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">修饰符 abstract 返回值类型 方法名(参数列表...);</span></span><br><span class="line"><span class="comment">而一个类中的方法如果是抽象的类，那么，该类就必须定义为抽象类。</span></span><br><span class="line"><span class="comment">抽象类的特点：</span></span><br><span class="line"><span class="comment">A:抽象类和抽象方法必须用abstract关键字修饰</span></span><br><span class="line"><span class="comment">B:抽象类的子类</span></span><br><span class="line"><span class="comment">a:要么是抽象类</span></span><br><span class="line"><span class="comment">b:要么重写抽象类中的所有抽象方法</span></span><br><span class="line"><span class="comment">C:抽象类不一定有抽象方法，有抽象方法的类一定是抽象类</span></span><br><span class="line"><span class="comment">D:抽象类不能实例化</span></span><br><span class="line"><span class="comment">那么如何使用抽象类的功能呢?</span></span><br><span class="line"><span class="comment">按照多态的方式使用。抽象类多态。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">回顾：</span></span><br><span class="line"><span class="comment">多态前提为什么要有方法重写呢?</span></span><br><span class="line"><span class="comment">因为父类的方法可能是抽象的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="comment">//这个方法是有方法体的，只不过内容为空</span></span><br><span class="line"><span class="comment">//public void eat() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//Animal a = new Animal(); //无法实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Dog d = new Dog();  //无法实例化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Cat c = new Cat();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态</span></span><br><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">a.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    有些时候，我们对事物不能用具体的东西来描述，这个时候就应该把事物定义为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象类的成员特点：</span></span><br><span class="line"><span class="comment">A:成员变量</span></span><br><span class="line"><span class="comment">可以是变量，也可以是常量</span></span><br><span class="line"><span class="comment">B:构造方法</span></span><br><span class="line"><span class="comment">有构造方法。但是不能实例化。</span></span><br><span class="line"><span class="comment">问题：构造方法有什么用呢?</span></span><br><span class="line"><span class="comment">用于子类访问父类数据的初始化</span></span><br><span class="line"><span class="comment">C:成员方法</span></span><br><span class="line"><span class="comment">可是有抽象方法，也可以有非抽象方法。</span></span><br><span class="line"><span class="comment">抽象方法：强制要求子类做某些事情。</span></span><br><span class="line"><span class="comment">非抽象方法：用于给子类直接使用，提高了代码的复用性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span>  </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">num = <span class="number">100</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line"><span class="comment">//num2 = 200;</span></span><br><span class="line">System.out.println(num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDemo2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">d.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个小问题<br>        A:如果你看到一个抽象类中居然没有抽象方法,这个抽象类的意义何在?<br>          不让别人创建<br>        B:abstract不能和哪些关键字共存?<br>            a:private 冲突<br>            b:final 冲突<br>            c:static 无意义</p><h4 id="接口-掌握"><a href="#接口-掌握" class="headerlink" title="接口(掌握)"></a>接口(掌握)</h4><p>​    (1)有些时候，不是事物本身具备的功能，我们就考虑使用接口来扩展。<br>    (2)接口的特点：<br>        A:定义接口用关键字interface<br>            格式是：interface 接口名 {}<br>        B:类实现接口用关键字implements<br>            格式是：class 类名 implements 接口名 {}<br>        C:接口不能实例化<br>        D:接口的子类<br>            a:要么是抽象类<br>            b:要么重写接口中的所有方法<br>    (3)接口的成员特点<br>        A:成员变量<br>            只能是常量。<br>            默认修饰符：public static final<br>        B:成员方法<br>            只能是抽象方法。<br>            默认修饰符：public abstract<br>        推荐：<br>            建议自己写接口的时候，把默认修饰符加上。<br>    (4)类与接口的关系<br>        A:类与类<br>            继承关系，只能单继承，可以多层继承。<br>        B:类与接口<br>            实现关系，可以单实现，也可以多实现。<br>            还可以在继承一个类的同时实现多个接口。<br>        C:接口与接口<br>            继承关系，可以单继承，也可以多继承。<br>    (5)抽象类和接口的区别?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1：成员区别</span><br><span class="line"></span><br><span class="line">抽象类：</span><br><span class="line"></span><br><span class="line">成员变量：可以是变量，也可以是常量</span><br><span class="line"></span><br><span class="line">构造方法：有</span><br><span class="line"></span><br><span class="line">成员方法：可以是抽象的，也可以是非抽象的</span><br><span class="line"></span><br><span class="line">接口：</span><br><span class="line"></span><br><span class="line">成员变量：只能是常量。</span><br><span class="line"></span><br><span class="line">默认修饰符：public static final</span><br><span class="line"></span><br><span class="line">成员方法：只能是抽象的</span><br><span class="line"></span><br><span class="line">默认修饰符：public abstract</span><br><span class="line"></span><br><span class="line">2：关系区别</span><br><span class="line"></span><br><span class="line">类与类：</span><br><span class="line"></span><br><span class="line">继承关系，只能单继承。可以多层继承。</span><br><span class="line"></span><br><span class="line">类与接口：</span><br><span class="line"></span><br><span class="line">实现关系，可以单实现，也可以多实现。</span><br><span class="line"></span><br><span class="line">还可以在继承一个类的同时实现多个接口。</span><br><span class="line"></span><br><span class="line">接口与接口：</span><br><span class="line"></span><br><span class="line">继承关系，可以单继承，也可以多继承。</span><br><span class="line"></span><br><span class="line">3：设计理念区别</span><br><span class="line"></span><br><span class="line">抽象类：被继承体现的是：”is a”的关系。在抽象类中定义的一般是共性功能</span><br><span class="line"></span><br><span class="line">接口：被实现体现的是：”like a”的关系。在接口中定义的一般是扩展功能</span><br><span class="line"></span><br><span class="line">A:成员区别</span><br><span class="line"></span><br><span class="line">B:关系区别</span><br><span class="line"></span><br><span class="line">C:设计理念区别</span><br><span class="line"></span><br><span class="line">抽象类：父抽象类，里面定义的是共性内容。</span><br><span class="line"></span><br><span class="line">接口：父接口，里面定义的是扩展内容。</span><br></pre></td></tr></table></figure><h3 id="DAY010"><a href="#DAY010" class="headerlink" title="DAY010"></a>DAY010</h3><p>1：形式参数和返回值问题(掌握)<br>    (1)形式参数：<br>        基本类型：需要的是对应的值<br>        引用类型：<br>            类：该类的对象<br>            抽象类：该类的子类对象<br>            接口：该接口的实现类对象<br>    (2)返回值问题：<br>        基本类型：返回的是对应的值<br>        引用类型：<br>            类：该类的对象<br>            抽象类：该类的子类对象<br>            接口：该接口的实现类对象<br>    (3)链式编程<br>        new A().b().c().d();</p><p>2：包(理解)<br>    (1)其实就是文件夹<br>    (2)对类进行分类管理<br>    (3)格式：<br>        package 包名;<br>    (4)注意事项<br>        A:package是程序中的第一条可执行语句<br>        B:在类中package是唯一的<br>        C:没有package，默认是无包名<br>    (5)带包的类的编译和运行</p><p>3：导包(理解)<br>    (1)为了方便使用不同包下的类，需要导包<br>    (2)格式：<br>        import 包名.报名…类名;</p><pre><code>    注意：可以导入到*,但是不建议(3)package，import，class在类中有没有顺序关系呢?    有。    package --&gt; import --&gt; class</code></pre><p>4：修饰符(理解)<br>    (1)4种权限修饰符<br>                本类    同一个包下    不同包下的子类    不同包下的其他类<br>        private        Y<br>        默认        Y    Y<br>        protected    Y    Y        Y<br>        public        Y    Y        Y        Y<br>    (2)常见的修饰<br>        A:类    public<br>        B:成员变量    private<br>        C:构造方法    public<br>        D:成员方法    public</p><p>5：内部类(理解)<br>    (1)把类A定义在类B内部，类A就被称为内部类<br>    (2)访问特点：<br>        A:内部类可以直接访问外部类的成员，包括私有<br>        B:外部类要想访问内部类的成员，必须创建对象<br>    (3)内部类的分类：<br>        A:成员内部类<br>        B:局部内部类<br>    (4)成员内部类<br>        A:private<br>        B:static</p><pre><code>    面试题：        num        this.num        Outer.this.num(5)局部内部类    A:面试题        局部内部类访问局部变量，必须加final修饰(6)匿名内部类(掌握)    A:没有名字的内部类    B:前提        存在一个类或者接口    C:格式        new 类名或者接口名() {            重写方法();        };        本质：是一个匿名子类对象(7)开发中如何使用    不用在定义一个新的类了。直接通过匿名内部类的格式就可以搞定    interface Person {        public abstract void show();    }    class PersonDemo {        public void method(Person p) {            p.show();        }    }    PersonDemo pd = new PersonDemo();    pd.method(new Person(){        public void show(){...}    });(8)面试题    补齐代码，在控制台输出HelloWorld    interface Inter {        public abstract void show();    }    class Outer {        //补齐代码        public static Inter method() {            return new Inter(){                public void show() {                    System.out.println(&quot;helloworld&quot;);                }            };        }    }    class OuterDemo {        public static void main(String[] args) {            Outer.method().show();        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0158.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;27天学完Java&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://m.iskei.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://m.iskei.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>前端CDNJS国内加速服务</title>
    <link href="http://m.iskei.cn/blog/40397.html"/>
    <id>http://m.iskei.cn/blog/40397.html</id>
    <published>2018-03-17T12:30:36.000Z</published>
    <updated>2018-05-18T07:15:20.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0155.jpg" alt="image"></p><p>前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务<br><a id="more"></a></p><p>由于某些众所周知的原因，好多开源的 JS 库采用的国外 CDN 托管方式在国内访问速度不如人意。所以我们特意制作了这个公益项目，托管了 CDNJS 的所有开源 JS 库以及反代了 Google Fonts、Ajax 和 Gravatar，并且全部支持 http 和 https</p><h2 id="1、CDNJS-开源-JS-库"><a href="#1、CDNJS-开源-JS-库" class="headerlink" title="1、CDNJS 开源 JS 库"></a>1、CDNJS 开源 JS 库</h2><p>我们采用的方法是每天定时同步 CDNJS 的 <a href="https://github.com/cdnjs/cdnjs" target="_blank" rel="noopener">Github</a></p><p>所有的 JS/CSS 库可以在这儿找到您需要的链接</p><p><a href="https://cdnjs.loli.net/ajax/libs/" target="_blank" rel="noopener">https://cdnjs.loli.net/ajax/libs/</a></p><p>如果您使用 <a href="https://cdnjs.com/" target="_blank" rel="noopener">cdnjs.com</a> 只需要替换 <code>cdnjs.cloudflare.com</code> 为 <code>cdnjs.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdnjs.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>CDNJS 的 API 开发文档请摸<a href="https://cdnjs.com/api" target="_blank" rel="noopener">这里</a></p><h2 id="2、Google-Fonts"><a href="#2、Google-Fonts" class="headerlink" title="2、Google Fonts"></a>2、Google Fonts</h2><p>我们采用的方法是万能的 Nginx 反代 + 关键词替换</p><p>使用的时候，您只需要替换 <code>fonts.googleapis.com</code> 为 <code>fonts.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.googleapis.com/css?family=Open+Sans&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.loli.net/css?family=Open+Sans&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>如果需要 <a href="https://material.io/icons/" target="_blank" rel="noopener">Material icons</a> ，把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.googleapis.com/icon?family=Material+Icons&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;https://fonts.loli.net/icon?family=Material+Icons&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure><p>如果需要 <a href="https://fonts.google.com/earlyaccess" target="_blank" rel="noopener">Early Access</a>，把</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import url(https://fonts.googleapis.com/earlyaccess/notosanskannada.css);</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import url(https://fonts.loli.net/earlyaccess/notosanskannada.css);</span><br></pre></td></tr></table></figure><p>如果需要下载单个字体，您只需要把 <code>fonts.gstatic.com</code> 替换成 <code>gstatic.loli.net</code> 或 <code>themes.googleusercontent.com</code> 替换成 <code>themes.loli.net</code> 即可</p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fonts.gstatic.com/s/opensans/v14/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gstatic.loli.net/s/opensans/v14/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://themes.googleusercontent.com/static/fonts/anonymouspro/v3/Zhfjj_gat3waL4JSju74E-V_5zh5b-_HiooIRUBwn1A.ttf</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://themes.loli.net/static/fonts/anonymouspro/v3/Zhfjj_gat3waL4JSju74E-V_5zh5b-_HiooIRUBwn1A.ttf</span><br></pre></td></tr></table></figure><p>Google Fonts 的 API 文档请摸<a href="https://developers.google.com/fonts/docs/getting_started" target="_blank" rel="noopener">这里</a></p><h2 id="3、Google-前端公共库"><a href="#3、Google-前端公共库" class="headerlink" title="3、Google 前端公共库"></a>3、Google 前端公共库</h2><p>方法同上，直接替换 <code>ajax.googleapis.com</code> 为 <code>ajax.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&apos;text/javascript&apos; src=&apos;https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&apos;text/javascript&apos; src=&apos;https://ajax.loli.net/ajax/libs/jquery/3.2.1/jquery.min.js&apos;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Google 前端库 API 开发文档摸<a href="https://developers.google.com/speed/libraries/" target="_blank" rel="noopener">这儿</a></p><h2 id="4、Gravatar-头像"><a href="#4、Gravatar-头像" class="headerlink" title="4、Gravatar 头像"></a>4、Gravatar 头像</h2><p>方法还是同上，直接替换 <code>*.gravatar.com</code> 为 <code>gravatar.loli.net</code> 即可，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://secure.gravatar.com/avatar/8406d089bc81b664a2610b8d214c1428</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gravatar.loli.net/avatar/8406d089bc81b664a2610b8d214c1428</span><br></pre></td></tr></table></figure><h2 id="5、赞助商"><a href="#5、赞助商" class="headerlink" title="5、赞助商"></a>5、赞助商</h2><p>国内外 CDN， GeoDNS、域名等基础服务均由 <a href="https://xtom.com/" target="_blank" rel="noopener">xTom</a>赞助 SSL 证书由 <a href="https://ssl.do/" target="_blank" rel="noopener">SSL.DO</a>赞助</p><h2 id="6、旧域名替换"><a href="#6、旧域名替换" class="headerlink" title="6、旧域名替换"></a>6、旧域名替换</h2><p>由于更换了赞助商，并且因为最新的国内域名备案政策，旧的域名均采用 301 跳转形式</p><p><code>cdn.css.net</code> 跳转到本文</p><p><code>cdn.css.net/libs/</code> 和 <code>cdnjs.cat.net/ajax/libs/</code> 跳转到 <code>cdnjs.loli.net/ajax/libs/</code></p><p><code>cdn.css.net/fonts/</code> 和 <code>fonts.cat.net</code> 和 <code>fonts.css.network</code> 跳转到 <code>fonts.loli.net</code></p><p><code>cdn.css.net/ajax/</code> 和 <code>ajax.cat.net</code> 和 <code>ajax.css.network</code> 跳转到 <code>ajax.loli.net</code></p><p><code>cdn.css.net/avatar/</code> 和 <code>gravatar.cat.net</code> 和 <code>gravatar.css.network</code> 跳转到 <code>gravatar.loli.net</code></p><p>另外由于 <a href="https://github.com/jsdelivr/jsdelivr" target="_blank" rel="noopener">jsdelivr</a> 已不再提供 Github 同步，并且这货自己也有网宿的国内 CDN ，所以</p><p><code>cdn.css.net/files/</code> 跳转到 <code>cdn.jsdelivr.net</code> 并且不再提供 jsdelivr 的国内加速服务</p><p>所有国内加速服务的域名列表如下，您只需要修改程序里的原域名即可</p><table><thead><tr><th>原域名</th><th>加速域名</th><th>制作方法</th></tr></thead><tbody><tr><td>cdnjs.cloudflare.com</td><td>cdnjs.loli.net</td><td>每日同步 Github</td></tr><tr><td>ajax.googleapis.com</td><td>ajax.loli.net</td><td>Nginx 反代</td></tr><tr><td>fonts.googleapis.com</td><td>fonts.loli.net</td><td>Nginx 反代</td></tr><tr><td>fonts.gstatic.com</td><td>gstatic.loli.net</td><td>Nginx 反代</td></tr><tr><td>themes.googleusercontent.com</td><td>themes.loli.net</td><td>Nginx 反代</td></tr><tr><td>secure.gravatar.com</td><td>gravatar.loli.net</td><td>Nginx 反代</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0155.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;前端 CDNJS 库及 Google Fonts、Ajax 和 Gravatar 国内加速服务&lt;br&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://m.iskei.cn/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://m.iskei.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Github搜索技巧</title>
    <link href="http://m.iskei.cn/blog/6321.html"/>
    <id>http://m.iskei.cn/blog/6321.html</id>
    <published>2018-03-16T08:44:36.000Z</published>
    <updated>2018-05-18T07:15:20.482Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0154.jpg" alt="image"></p><p> github搜索技巧<br><a id="more"></a></p><h3 id="1-Search"><a href="#1-Search" class="headerlink" title="1. Search"></a>1. Search</h3><ul><li>如何查看一门语言的 Repository 排行榜（按 stars 数量排）？<br>如图所示，以 Objective-C 为例，直接在输入框中输入  language:Objective-C stars:&gt;0， 然后再在右侧排名选项中选择 Most stars。</li></ul><p>按 stars 数量排名(以 Objective-C 为例).png</p><ul><li>为什么有些数据模糊搜索不到？<br>比如，输入搜索关键字 “collectionView”，然后在左侧边栏 Languages 中选择 Objective-C ，发现搜索结果中没有 “PSTCollectionView” 这个Repository，实际上，如果搜索的是 “PSTCollectionView” 的话，确实是能搜索到的。<br>从搜索结果中来看，“collectionView” 是被作为一个单词整体来进行搜索的，所以搜到的结果都是 Repository name 或者 description 中出现以 “collectionView” 开头或者包含 “-collectionView” 的单词的 Repository。<br>所以为了能搜索到更多想要的结果，我们最好以单词为单位，用 OR 将各个关键字拼接起来进行搜索，例如，搜 “CollectionView OR UICollectionView OR collection” 而不是 “collectionView”。<br>下面是两种搜索词的结果对比。</li></ul><ul><li>Github 有高级搜索吗？<br>在上图中，我们可以看到左侧边栏的下方有两个可点击的选项 <a href="https://link.jianshu.com?t=https://github.com/search/advanced" target="_blank" rel="noopener">Advanced search</a> 和 <a href="https://link.jianshu.com?t=https://github.com/search?utf8=%E2%9C%93&amp;q=&amp;type=Repositories&amp;ref=advsearch&amp;l=&amp;l=" target="_blank" rel="noopener">Cheat sheet</a>，点击 <a href="https://link.jianshu.com?t=https://github.com/search/advanced" target="_blank" rel="noopener">Advanced search</a>  即可进行自定义条件的高级搜索了，点击 <a href="https://link.jianshu.com?t=https://github.com/search?utf8=%E2%9C%93&amp;q=&amp;type=Repositories&amp;ref=advsearch&amp;l=&amp;l=" target="_blank" rel="noopener">Cheat sheet</a> 则可以查看一些有关搜索的帮助信息。哪里不会点哪里，妈妈再也不用担心我的学习了！</li></ul><h3 id="2-Trending"><a href="#2-Trending" class="headerlink" title="2.Trending"></a>2.Trending</h3><p>作为一枚程序猿，除了有目的的搜索之外，我们有时也需要去“瞎逛逛”，开阔一下眼界。如果你有空，不妨去 Github 的 <a href="https://link.jianshu.com?t=https://github.com/trending" target="_blank" rel="noopener">Trending</a> 看看最近发生了什么。<em>See what the GitHub community is most excited about today! </em> 在这里你可以看到各种不同开发语言的每天/周/月的最热门的 Repositories 和 Developers。比如前一段时间走红的 <a href="https://link.jianshu.com?t=https://github.com/ibireme/YYKit" target="_blank" rel="noopener">YYKit</a>，苹果最近开源的 <a href="https://link.jianshu.com?t=https://github.com/carekit-apple/CareKit" target="_blank" rel="noopener">CareKit</a>，等等。</p><h3 id="3-制定搜索方式："><a href="#3-制定搜索方式：" class="headerlink" title="3.制定搜索方式："></a>3.制定搜索方式：</h3><p>我默认检索的关键词都是android</p><p>按照文件搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android in:file</span><br></pre></td></tr></table></figure><p>按照路径检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">andrioid in:path</span><br></pre></td></tr></table></figure><p>按照语言检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android language:java</span><br></pre></td></tr></table></figure><p>按照文件大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android size:&gt;100</span><br></pre></td></tr></table></figure><p>按照后缀名检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android extention:css</span><br></pre></td></tr></table></figure><p>按照是否被fork过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android fork:true</span><br></pre></td></tr></table></figure><p>按照地域检索（这个猎头和hr应该用得着）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android location:beijing</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0154.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt; github搜索技巧&lt;br&gt;
    
    </summary>
    
      <category term="Github" scheme="http://m.iskei.cn/categories/Github/"/>
    
    
      <category term="Github" scheme="http://m.iskei.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Java对象复制Clone技术</title>
    <link href="http://m.iskei.cn/blog/38422.html"/>
    <id>http://m.iskei.cn/blog/38422.html</id>
    <published>2018-03-15T08:44:36.000Z</published>
    <updated>2018-05-18T07:15:20.490Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0153.jpg" alt="image"></p><p>在编码过程经常会碰到将一个对象传递给另一个对象，java中对于基本型变量采用的是值传递，而对于对象比如bean传递时采用的是引用传递也就是地址传递，而很多时候对于对象传递我们也希望能够象值传递一样，使得传递之前和之后有不同的内存地址，在这种情况下就可以clone一个新的对象来用.<br><a id="more"></a></p><h3 id="什么时候使用克隆对象技术"><a href="#什么时候使用克隆对象技术" class="headerlink" title="什么时候使用克隆对象技术"></a>什么时候使用克隆对象技术</h3><p>如：有一个对象A，在某一时刻A中已经包含了一些有效值，A是用来保存从数据库得到很多数据的一个对象。此时可能会需要一个和A完全相同新对象B，B用来修改A里面的某一个属性的值，仅仅是用来负责显示一下，不需要使得A.也受到影响。并且此函数的返回类型是A类型的。并且此后对B任何改动都不会影响到A中的值，也就是说，A与B是两个独立的对象，但B的初始值是由A对象确定的。在Java语言中，用简单的赋值语句是不能满足这种需求的。实现clone（）方法是不错的选择。</p><p>Java的所有类都默认继承java.lang.Object类，在java.lang.Object类中有一个方法clone()。该方法将返回Object对象的一个拷贝。要说明的有两点：</p><ul><li>一是拷贝对象返回的是一个新对象，而不是一个引用。</li><li>二是拷贝对象与用  new 操作符返回的新对象的区别就是这个拷贝已经包含了一些原来对象的信息，而不是对象的初始信息。</li></ul><p>怎样应用clone()方法？</p><h4 id="实现clone方法的步骤（）"><a href="#实现clone方法的步骤（）" class="headerlink" title="实现clone方法的步骤（）"></a>实现clone方法的步骤（）</h4><ol><li><p>实现Cloneable接口</p></li><li><p>重载Object类中的clone()方法，重载时需定义为public</p></li><li><p>在重载方法中，调用<code>super.clone()</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneClass</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> aInt;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CloneClass o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (CloneClass)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h3 id="浅克隆与深克隆（影子克隆）"><a href="#浅克隆与深克隆（影子克隆）" class="headerlink" title="浅克隆与深克隆（影子克隆）"></a>浅克隆与深克隆（影子克隆）</h3><p>​       克隆(默认就是浅克隆)就是复制一个对象的复本.若只需要复制对象的字段值（对于基本数据类型,如:int,long,float等，则复制值；对于复合数据类型仅复制该字段值，如数组变量则复制地址，对于对象变量则复制对象的reference。</p><p>下面的例子包含三个类UnCloneA，CloneB，CloneMain。</p><p>CloneB类包含了一个UnCloneA的实例和一个int类型变量，并且重载clone()方法。</p><p>CloneMain类初始化CloneB 类的一个实例b1，然后调用clone()方法生成了一个b1的拷贝b2。最后考察一下b1和b2的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> clone;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnCloneA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnCloneA</span><span class="params">(<span class="keyword">int</span> ii)</span> </span>&#123; </span><br><span class="line">        i = ii; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doubleValue</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        i *= <span class="number">2</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneB</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> aInt;</span><br><span class="line">    <span class="keyword">public</span> UnCloneA unCA = <span class="keyword">new</span> UnCloneA(<span class="number">111</span>);</span><br><span class="line">    <span class="function">publicCloneB <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CloneB o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (CloneB)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        CloneB b1 = <span class="keyword">new</span> CloneB();</span><br><span class="line">        b1.aInt = <span class="number">11</span>;</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        CloneB b2 = (CloneB)b1.clone();</span><br><span class="line">        b2.aInt = <span class="number">22</span>;</span><br><span class="line">        b2.unCA.doubleValue();</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.aInt = "</span>+ b2.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.unCA = "</span>+ b2.unCA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ RUN RESULT:</span><br><span class="line">before clone,b1.aInt = <span class="number">11</span></span><br><span class="line">before clone,b1.unCA = <span class="number">111</span></span><br><span class="line">after clone,b1.aInt = <span class="number">11</span></span><br><span class="line">after clone,b1.unCA = <span class="number">222</span></span><br><span class="line">after clone,b2.aInt = <span class="number">22</span></span><br><span class="line">after clone,b2.unCA = <span class="number">222</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>输出的结果说明int类型的变量aInt和UnCloneA的实例对象unCA的clone结果不一致，</p><p>int类型是真正的被clone了，因为改变了b2中的aInt变量，对b1的aInt没有产生影响，</p><p>也就是说，b2.aInt与b1.aInt已经占据了不同的内存空间，b2.aInt是b1.aInt的一个真正拷贝。</p><p>相反，对b2.unCA的改变同时改变了b1.unCA，很明显，b2.unCA和b1.unCA是仅仅指向同一个对象的不同引用！（也就是对对象中的对象克隆失败）</p><p>从中可以看出，调用Object类中clone()方法产生的效果是：先在内存中开辟一块和原始对象一样的空间，然后原样拷贝原始对象中的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Channel <span class="title">copy</span><span class="params">(Integer cid,String solution, String mobileSolution, Integer siteId,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, String&gt; pathMap)</span></span>&#123;</span><br><span class="line">Channel c=findById(cid);<span class="comment">//旧</span></span><br><span class="line">Channel channel=<span class="keyword">new</span> Channel();<span class="comment">//新</span></span><br><span class="line"><span class="keyword">if</span>(c!=<span class="keyword">null</span>)&#123;</span><br><span class="line">ChannelExt ext=<span class="keyword">new</span> ChannelExt();</span><br><span class="line">ChannelTxt channelTxt=<span class="keyword">new</span> ChannelTxt();</span><br><span class="line">channel=(Channel) c.clone();</span><br><span class="line">ext=(ChannelExt) c.getChannelExt().clone();</span><br><span class="line"><span class="keyword">if</span>(c.getChannelTxt()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">channelTxt=(ChannelTxt) c.getChannelTxt().clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对基本数据类型，这样的操作是没有问题的，但对非基本类型变量，我们知道它们保存的仅仅是对象的引用，这也导致clone后的非基本类型变量和原始对象中相应的变量指向的是同一个对象。也就没有达到克隆的效果。</p><p>大多时候，这种clone的结果往往不是我们所希望的结果，这种clone也被称为”影子clone”。要想让b2.unCA指向与b2.unCA不同的对象，而且b2.unCA中还要包含b1.unCA中的信息作为初始信息，就要实现深度clone。</p><h3 id="怎么进行深度clone？"><a href="#怎么进行深度clone？" class="headerlink" title="怎么进行深度clone？"></a>怎么进行深度clone？</h3><p>深克隆与浅克隆的区别在于对复合数据类型的复制。若对象中的某个字段为复合类型，在克隆对象的时候，需要为该字段重新创建一个对象。</p><p>把上面的例子改成深度clone很简单，需要两个改变：一是让UnCloneA类也实现和CloneB类一样的clone功能（实现Cloneable接口，重载clone()方法）。二是在CloneB的clone()方法中加入一句<code>o.unCA = (UnCloneA)unCA.clone()</code></p><p>程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnCloneA</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnCloneA</span><span class="params">(<span class="keyword">int</span> ii)</span> </span>&#123; i = ii; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doubleValue</span><span class="params">()</span> </span>&#123; i *= <span class="number">2</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UnCloneA o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (UnCloneA)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneB</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> aInt;</span><br><span class="line">    <span class="keyword">public</span> UnCloneA unCA = <span class="keyword">new</span> UnCloneA(<span class="number">111</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CloneB o = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            o = (CloneB)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        o.unCA = (UnCloneA)unCA.clone();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] a)</span></span>&#123;</span><br><span class="line">        CloneB b1 = <span class="keyword">new</span> CloneB();</span><br><span class="line">        b1.aInt = <span class="number">11</span>;</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"before clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        CloneB b2 = (CloneB)b1.clone();</span><br><span class="line">        b2.aInt = <span class="number">22</span>;</span><br><span class="line">        b2.unCA.doubleValue();</span><br><span class="line">        System.out.println(<span class="string">"========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.aInt = "</span>+ b1.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b1.unCA = "</span>+ b1.unCA);</span><br><span class="line">        System.out.println(<span class="string">"========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.aInt = "</span>+ b2.aInt);</span><br><span class="line">        System.out.println(<span class="string">"after clone,b2.unCA = "</span>+ b2.unCA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ RUN RESULT:</span><br><span class="line">before clone,b1.aInt = <span class="number">11</span></span><br><span class="line">before clone,b1.unCA = <span class="number">111</span></span><br><span class="line">after clone,b1.aInt = <span class="number">11</span></span><br><span class="line">after clone,b1.unCA = <span class="number">111</span></span><br><span class="line">after clone,b2.aInt = <span class="number">22</span></span><br><span class="line">after clone,b2.unCA = <span class="number">222</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>可以看出，现在b2.unCA的改变对b1.unCA没有产生影响。此时b1.unCA与b2.unCA指向了两个不同的UnCloneA实例，而且在CloneB b2 = (CloneB)b1.clone();调用的那一刻b1和b2拥有相同的值，在这里，b1.i = b2.i = 11。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不是所有的类都能实现深度clone的。例如，如果把上面的CloneB类中的UnCloneA类型变量改成StringBuffer类型，看一下JDK API中关于StringBuffer的说明，StringBuffer没有重载clone()方法，更为严重的是StringBuffer还是一个final类，这也是说我们也不能用继承的办法间接实现StringBuffer的clone。如果一个类中包含有StringBuffer类型对象或和StringBuffer相似类的对象，我们有两种选择：要么只能实现影子clone，要么就在类的clone()方法中加一句（假设是SringBuffer对象，而且变量名仍是unCA）：</p><p> <code>o.unCA = new StringBuffer(unCA.toString()); //原来的是：o.unCA = (UnCloneA)unCA.clone();</code></p><p>还要知道的是除了基本数据类型能自动实现深度clone以外，String对象是一个例外，它clone后的表现好象也实现了深度clone，虽然这只是一个假象，但却大大方便了我们的编程。<br>通过以上我们可以看出在某些情况下，我们可以利用clone方法来实现对象只见的复制，但对于比较复杂的对象（比如对象中包含其他对象，其他对象又包含别的对象…..）这样我们必须进行层层深度clone，每个对象需要实现cloneable接口。</p><h3 id="Java集合的深克隆"><a href="#Java集合的深克隆" class="headerlink" title="Java集合的深克隆"></a>Java集合的深克隆</h3><p>下面例子有一个<code>Employee</code>集合，Employee是可变对象，成员变量<code>name</code>和<code>designation</code>。它们存储在<code>HashSet</code>中。使用<code>java.util.Collection</code>接口的<code>addAll()</code>方法创建集合拷贝。然后修改存储在原始集合每个<code>Employee</code>对象的<code>designation</code>值。理想情况下这个改变不会影响克隆集合，因为克隆集合和原始集合应该相互独立，但是克隆集合也被改变了。修正这个问题的方法是对存储在<code>Collection</code>类中的元素深克隆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection; </span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger; </span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Java program to demonstrate copy constructor of Collection provides shallow </span></span><br><span class="line"><span class="comment">* copy and techniques to deep clone Collection by iterating over them. </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> http://javarevisited.blogspot.com </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionCloningTest</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CollectionCloningclass); </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123; </span><br><span class="line">        <span class="comment">// deep cloning Collection in Java </span></span><br><span class="line">        Collection&lt;Employee&gt; org = <span class="keyword">new</span> HashSet&lt;&gt;(); </span><br><span class="line">        org.add(<span class="keyword">new</span> Employee(<span class="string">"Joe"</span>, <span class="string">"Manager"</span>)); </span><br><span class="line">        org.add(<span class="keyword">new</span> Employee(<span class="string">"Tim"</span>, <span class="string">"Developer"</span>)); </span><br><span class="line">        org.add(<span class="keyword">new</span> Employee(<span class="string">"Frank"</span>, <span class="string">"Developer"</span>)); </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// creating copy of Collection using copy constructor </span></span><br><span class="line">        Collection&lt;Employee&gt; copy = <span class="keyword">new</span> HashSet&lt;&gt;(org);</span><br><span class="line"> </span><br><span class="line">        logger.debug(<span class="string">"Original Collection &#123;&#125;"</span>, org); </span><br><span class="line">        logger.debug(<span class="string">"Copy of Collection &#123;&#125;"</span>, copy );</span><br><span class="line">         </span><br><span class="line">        Iterator&lt;Employee&gt; itr = org.iterator(); </span><br><span class="line">        <span class="keyword">while</span>(itr.hasNext())&#123; </span><br><span class="line">            itr.next().setDesignation(<span class="string">"staff"</span>); </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line">        logger.debug(<span class="string">"Original Collection after modification &#123;&#125;"</span>, org); </span><br><span class="line">        logger.debug(<span class="string">"Copy of Collection without modification &#123;&#125;"</span>, copy ); </span><br><span class="line"> </span><br><span class="line">        <span class="comment">// deep Cloning List in Java </span></span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> String designation; </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String designation)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">        <span class="keyword">this</span>.designation = designation; </span><br><span class="line">    &#125; </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesignation</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> designation; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesignation</span><span class="params">(String designation)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.designation = designation; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> name; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.name = name; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s: %s"</span>, name, designation ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Original Collection [Joe: Manager, Frank: Developer, Tim: Developer] </span><br><span class="line">- Copy of Collection [Joe: Manager, Frank: Developer, Tim: Developer] </span><br><span class="line">- Original Collection after modification [Joe: staff, Frank: staff, Tim: staff] </span><br><span class="line">- Copy of Collection without modification [Joe: staff, Frank: staff, Tim: staff]</span><br></pre></td></tr></table></figure><p>可以看到改变原始<code>Collection</code>中<code>Employee</code>对象(改变designation为”<code>staff</code>“)在克隆集合中也有所反映，因为克隆是浅拷贝，指向堆中相同的<code>Employee</code>对象。为了修正这个问题，需要遍历集合，深克隆<code>Employee</code>对象，在这之前，要重写<code>Employee</code>对象的clone方法。</p><ol><li><p><code>Employee</code>实现<code>Cloneable</code>接口</p></li><li><p>为<code>Employee</code>类增加下面的<code>clone()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Employee <span class="title">clone</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Employee clone = <span class="keyword">null</span>; </span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            clone = (Employee) <span class="keyword">super</span>.clone(); </span><br><span class="line"> </span><br><span class="line">        &#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e); <span class="comment">// won't happen </span></span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">return</span> clone; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>不使用拷贝构造函数，使用下面的代码来深拷贝集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Employee&gt; copy = <span class="keyword">new</span> HashSet&lt;Employee&gt;(org.size()); </span><br><span class="line"> </span><br><span class="line">Iterator&lt;Employee&gt; iterator = org.iterator(); </span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123; </span><br><span class="line">    copy.add(iterator.next().clone()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行相同的代码更改原始集合，克隆集合不会也被更改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>可以看到克隆集合和原始集合相互独立，它们指向不同的对象。<br><a href="http://www.importnew.com/?attachment_id=10852" target="_blank" rel="noopener"><img src="http://incdn1.b0.upaiyun.com/2014/04/8de7420211451f17a303eda3a5cb6710.png" alt="Shallow vs Deep Clone Java"></a></p><p>这就是<strong>Java中如何克隆集合</strong>的内容。现在我们知道拷贝构造函数或者<code>List</code>或<code>Set</code>等各种集合类的<code>addAll()</code>方法仅仅创建了<em>集合的浅拷贝</em>，而且原始集合和克隆集合指向相同的对象。为避免这个问题，应该深克隆集合，遍历集合克隆每个元素。尽管这要求集合中的对象必须支持深克隆操作。</p><p>后面这些话是比较重要的：(易于理解)</p><p>各个集合类提供的拷贝构造函数作为克隆<code>List</code>，<code>Set</code>，<code>ArrayList</code>，<code>HashSet</code>或者其他集合实现的方法。需要记住的是，Java集合的拷贝构造函数只提供浅拷贝而不是深拷贝，这意味着存储在原始List和克隆List中的对象是相同的，指向Java堆内存中相同的位置。</p><h3 id="简单注意"><a href="#简单注意" class="headerlink" title="简单注意"></a>简单注意</h3><ol><li>在克隆java对象的时候不会调用构造器</li><li>java提供一种叫浅拷贝（shallow copy）的默认方式实现clone，创建好对象的副本后然后通过赋值拷贝内容，意味着如果你的类包含引用类型，那么原始对象和克隆都将指向相同的引用内容，这是很危险的，因为发生在可变的字段上任何改变将反应到他们所引用的共同内容上。为了避免这种情况，需要对引用的内容进行深度克隆。</li><li>克隆方法用于创建对象的拷贝，为了使用clone方法，类必须实现<code>java.lang.Cloneable</code>接口<code>重写protected方法clone</code>，如果没有实现Clonebale接口会抛出<code>CloneNotSupportedException.</code></li></ol><h3 id="Hibernate异常Found-shared-references的解决办法"><a href="#Hibernate异常Found-shared-references的解决办法" class="headerlink" title="Hibernate异常Found shared references的解决办法"></a>Hibernate异常Found shared references的解决办法</h3><ul><li><p>在项目中的续签模块中，由于在谈判成功后要新建一份合同，并要将原合同中的站点信息设置到新合同中去，在合同的Entity中有一个list&lt;站点&gt;来关联的，一份合同可以有多少站点！ </p></li><li><p>在新增合同的代码如下： </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RenewalItem item = renewalItemDao.findById(id);  </span><br><span class="line">PropertyContract pc = item.getPropertyContract();<span class="comment">//旧合同  </span></span><br><span class="line">PropertyContract newPc = <span class="keyword">new</span> PropertyContract();<span class="comment">//新合同  </span></span><br><span class="line">List&lt;BSProperty&gt; bsList = pc.getBsProperty();           </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=bsList &amp;&amp; !bsList.isEmpty())&#123;  </span><br><span class="line">newPc.setBsProperty(bsList);<span class="comment">//将旧合同中的关联站点设置到新合同中去。  </span></span><br><span class="line">&#125;  </span><br><span class="line">....  </span><br><span class="line">renewalItemDao.merge(item);</span><br></pre></td></tr></table></figure><p>此时会报：<code>org.hibernate.HibernateException: Found shared references to a collection</code>，这样的异常信息，意思是指发现共享引用集合，经过上网GOOGLE,有一帖子说： </p><p>解决方法：  </p><ol><li><strong>在拷贝后，新建一个集合，将原来的集合元素添加进去，并赋值给新拷贝的实体</strong> </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RenewalItem item = renewalItemDao.findById(id);  </span><br><span class="line">PropertyContract pc = item.getPropertyContract();<span class="comment">//旧合同  </span></span><br><span class="line">PropertyContract newPc = <span class="keyword">new</span> PropertyContract();<span class="comment">//新合同  </span></span><br><span class="line">List&lt;BSProperty&gt; bsList = pc.getBsProperty();           </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=bsList &amp;&amp; !bsList.isEmpty())&#123;  </span><br><span class="line">List&lt;BSProperty&gt; newBsList = <span class="keyword">new</span> ArrayList&lt;BSProperty&gt;(bsList.size());  </span><br><span class="line"><span class="keyword">for</span>(BSProperty bs : bsList)&#123;  </span><br><span class="line">  newBsList.add(bs);  </span><br><span class="line">&#125;  </span><br><span class="line">newPc.setBsProperty(newBsList);<span class="comment">//将旧合同中的关联站点设置到新合同中去。  </span></span><br><span class="line">&#125;  </span><br><span class="line">....  </span><br><span class="line">renewalItemDao.merge(item);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0153.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;在编码过程经常会碰到将一个对象传递给另一个对象，java中对于基本型变量采用的是值传递，而对于对象比如bean传递时采用的是引用传递也就是地址传递，而很多时候对于对象传递我们也希望能够象值传递一样，使得传递之前和之后有不同的内存地址，在这种情况下就可以clone一个新的对象来用.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://m.iskei.cn/categories/Java/"/>
    
    
      <category term="Java" scheme="http://m.iskei.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>代码生成Tools</title>
    <link href="http://m.iskei.cn/blog/50510.html"/>
    <id>http://m.iskei.cn/blog/50510.html</id>
    <published>2018-03-14T08:44:36.000Z</published>
    <updated>2018-05-18T07:15:20.506Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0152.jpg" alt="image"></p><p>技术点：采用SpringMVC3+Spring3+Hibernate3+Freemarker主流技术架构<br><a id="more"></a></p><h3 id="生成入口方法"><a href="#生成入口方法" class="headerlink" title="生成入口方法"></a>生成入口方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeecms.cms.template;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsModuleGenerator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String packName = <span class="string">"com.jeecms.cms.template"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String fileName = <span class="string">"jeecms.properties"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> ModuleGenerator(packName, fileName).generate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成方法"><a href="#生成方法" class="headerlink" title="生成方法"></a>生成方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeecms.cms.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模块生成器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用于生成JEE模块。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 包括JAVA类：action,dao,dao.impl,manager,manager.impl；</span></span><br><span class="line"><span class="comment"> * 配置文件：action配置,spring配置；ftl页面：list.html,add.html,edit.html。</span></span><br><span class="line"><span class="comment"> * 数据验证文件：Act-Com_save</span></span><br><span class="line"><span class="comment"> * -validation.xml,Act-Com_edit-validation.xml,Act-Com_update-validation.xml</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 可设置的参数有：模块实体类名、java类包地址、配置文件地址、ftl页面地址。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleGenerator</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory</span><br><span class="line">.getLogger(ModuleGenerator.class);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPT = File.separator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCODING = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String packName;</span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"><span class="keyword">private</span> File daoImplFile;</span><br><span class="line"><span class="keyword">private</span> File daoFile;</span><br><span class="line"><span class="keyword">private</span> File managerFile;</span><br><span class="line"><span class="keyword">private</span> File managerImplFile;</span><br><span class="line"><span class="keyword">private</span> File actionFile;</span><br><span class="line"><span class="keyword">private</span> File pageListFile;</span><br><span class="line"><span class="keyword">private</span> File pageEditFile;</span><br><span class="line"><span class="keyword">private</span> File pageAddFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> File daoImplTpl;</span><br><span class="line"><span class="keyword">private</span> File daoTpl;</span><br><span class="line"><span class="keyword">private</span> File managerTpl;</span><br><span class="line"><span class="keyword">private</span> File managerImplTpl;</span><br><span class="line"><span class="keyword">private</span> File actionTpl;</span><br><span class="line"><span class="keyword">private</span> File pageListTpl;</span><br><span class="line"><span class="keyword">private</span> File pageEditTpl;</span><br><span class="line"><span class="keyword">private</span> File pageAddTpl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ModuleGenerator</span><span class="params">(String packName, String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.packName = packName;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">log.debug(<span class="string">"packName="</span> + packName);</span><br><span class="line">log.debug(<span class="string">"fileName="</span> + fileName);</span><br><span class="line">FileInputStream fileInput = <span class="keyword">new</span> FileInputStream(getFilePath(</span><br><span class="line">packName, fileName));</span><br><span class="line">prop.load(fileInput);</span><br><span class="line">String entityUp = prop.getProperty(<span class="string">"Entity"</span>);</span><br><span class="line">log.debug(<span class="string">"entityUp:"</span> + entityUp);</span><br><span class="line"><span class="keyword">if</span> (entityUp == <span class="keyword">null</span> || entityUp.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">log.warn(<span class="string">"Entity not specified, exit!"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">String entityLow = entityUp.substring(<span class="number">0</span>, <span class="number">1</span>).toLowerCase()</span><br><span class="line">+ entityUp.substring(<span class="number">1</span>);</span><br><span class="line">log.debug(<span class="string">"entityLow:"</span> + entityLow);</span><br><span class="line">prop.put(<span class="string">"entity"</span>, entityLow);</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">Set ps = prop.keySet();</span><br><span class="line"><span class="keyword">for</span> (Object o : ps) &#123;</span><br><span class="line">log.debug(o + <span class="string">"="</span> + prop.get(o));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String daoImplFilePath = getFilePath(prop.getProperty(<span class="string">"dao_impl_p"</span>),</span><br><span class="line">prop.getProperty(<span class="string">"Entity"</span>) + <span class="string">"DaoImpl.java"</span>);</span><br><span class="line">daoImplFile = <span class="keyword">new</span> File(daoImplFilePath);</span><br><span class="line">log.debug(<span class="string">"daoImplFile:"</span> + daoImplFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String daoFilePath = getFilePath(prop.getProperty(<span class="string">"dao_p"</span>), prop</span><br><span class="line">.getProperty(<span class="string">"Entity"</span>)</span><br><span class="line">+ <span class="string">"Dao.java"</span>);</span><br><span class="line">daoFile = <span class="keyword">new</span> File(daoFilePath);</span><br><span class="line">log.debug(<span class="string">"daoFile:"</span> + daoFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String managerFilePath = getFilePath(prop.getProperty(<span class="string">"manager_p"</span>),</span><br><span class="line">prop.getProperty(<span class="string">"Entity"</span>) + <span class="string">"Mng.java"</span>);</span><br><span class="line">managerFile = <span class="keyword">new</span> File(managerFilePath);</span><br><span class="line">log.debug(<span class="string">"managerFile:"</span> + managerFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String managerImplFilePath = getFilePath(prop</span><br><span class="line">.getProperty(<span class="string">"manager_impl_p"</span>), prop.getProperty(<span class="string">"Entity"</span>)</span><br><span class="line">+ <span class="string">"MngImpl.java"</span>);</span><br><span class="line">managerImplFile = <span class="keyword">new</span> File(managerImplFilePath);</span><br><span class="line">log.debug(<span class="string">"managerImplFile:"</span> + managerImplFile.getAbsolutePath());</span><br><span class="line">String actionFilePath = getFilePath(prop.getProperty(<span class="string">"action_p"</span>), prop</span><br><span class="line">.getProperty(<span class="string">"Entity"</span>)</span><br><span class="line">+ <span class="string">"Act.java"</span>);</span><br><span class="line">actionFile = <span class="keyword">new</span> File(actionFilePath);</span><br><span class="line">log.debug(<span class="string">"actionFile:"</span> + actionFile.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">String pagePath = <span class="string">"WebContent/WEB-INF/"</span></span><br><span class="line">+ prop.getProperty(<span class="string">"config_sys"</span>) + <span class="string">"/"</span></span><br><span class="line">+ prop.getProperty(<span class="string">"config_entity"</span>) + <span class="string">"/"</span>;</span><br><span class="line">pageListFile = <span class="keyword">new</span> File(pagePath + <span class="string">"list.html"</span>);</span><br><span class="line">log.debug(<span class="string">"pageListFile:"</span> + pageListFile.getAbsolutePath());</span><br><span class="line">pageEditFile = <span class="keyword">new</span> File(pagePath + <span class="string">"edit.html"</span>);</span><br><span class="line">log.debug(<span class="string">"pageEditFile:"</span> + pageEditFile.getAbsolutePath());</span><br><span class="line">pageAddFile = <span class="keyword">new</span> File(pagePath + <span class="string">"add.html"</span>);</span><br><span class="line">log.debug(<span class="string">"pageAddFile:"</span> + pageAddFile.getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String tplPack = prop.getProperty(<span class="string">"template_dir"</span>);</span><br><span class="line">log.debug(<span class="string">"tplPack:"</span> + tplPack);</span><br><span class="line">daoImplTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"dao_impl.txt"</span>));</span><br><span class="line">daoTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"dao.txt"</span>));</span><br><span class="line">managerImplTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"manager_impl.txt"</span>));</span><br><span class="line">managerTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"manager.txt"</span>));</span><br><span class="line">actionTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"action.txt"</span>));</span><br><span class="line">pageListTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"page_list.txt"</span>));</span><br><span class="line">pageAddTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"page_add.txt"</span>));</span><br><span class="line">pageEditTpl = <span class="keyword">new</span> File(getFilePath(tplPack, <span class="string">"page_edit.txt"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stringToFile</span><span class="params">(File file, String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileUtils.writeStringToFile(file, s, ENCODING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_dao"</span>))) &#123;</span><br><span class="line">stringToFile(daoImplFile, readTpl(daoImplTpl));</span><br><span class="line">stringToFile(daoFile, readTpl(daoTpl));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_manager"</span>))) &#123;</span><br><span class="line">stringToFile(managerImplFile, readTpl(managerImplTpl));</span><br><span class="line">stringToFile(managerFile, readTpl(managerTpl));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_action"</span>))) &#123;</span><br><span class="line">stringToFile(actionFile, readTpl(actionTpl));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"true"</span>.equals(prop.getProperty(<span class="string">"is_page"</span>))) &#123;</span><br><span class="line">stringToFile(pageListFile, readTpl(pageListTpl));</span><br><span class="line">stringToFile(pageAddFile, readTpl(pageAddTpl));</span><br><span class="line">stringToFile(pageEditFile, readTpl(pageEditTpl));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">log.warn(<span class="string">"write file faild! "</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readTpl</span><span class="params">(File tpl)</span> </span>&#123;</span><br><span class="line">String content = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">content = FileUtils.readFileToString(tpl, ENCODING);</span><br><span class="line">Set&lt;Object&gt; ps = prop.keySet();</span><br><span class="line"><span class="keyword">for</span> (Object o : ps) &#123;</span><br><span class="line">String key = (String) o;</span><br><span class="line">String value = prop.getProperty(key);</span><br><span class="line">content = content.replaceAll(<span class="string">"\\#\\&#123;"</span> + key + <span class="string">"\\&#125;"</span>, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">log.warn(<span class="string">"read file faild. "</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> content;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFilePath</span><span class="params">(String packageName, String name)</span> </span>&#123;</span><br><span class="line">log.debug(<span class="string">"replace:"</span> + packageName);</span><br><span class="line">String path = packageName.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>);</span><br><span class="line">log.debug(<span class="string">"after relpace:"</span> + path);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"src/"</span> + path + <span class="string">"/"</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">loadProperties();</span><br><span class="line">prepareFile();</span><br><span class="line">prepareTemplate();</span><br><span class="line">writeFile();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String packName = <span class="string">"com.jeecms.common.developer.template"</span>;</span><br><span class="line">String fileName = <span class="string">"template.properties"</span>;</span><br><span class="line"><span class="keyword">new</span> ModuleGenerator(packName, fileName).generate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Entity模板"><a href="#Entity模板" class="headerlink" title="Entity模板"></a>Entity模板</h3><pre><code>使用hibernateMapping插件生成</code></pre><h3 id="Dao模板"><a href="#Dao模板" class="headerlink" title="Dao模板"></a>Dao模板</h3><p>​    dao.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;dao_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.hibernate4.Updater;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> #</span>&#123;Entity&#125;Dao &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; findById(Integer id);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; updateByUpdater(Updater&lt;#&#123;Entity&#125;&gt; updater);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DaoImpl模板"><a href="#DaoImpl模板" class="headerlink" title="DaoImpl模板"></a>DaoImpl模板</h3><p>​    dao_impl.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;dao_impl_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Criteria;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.hibernate4.HibernateBaseDao;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;dao_p&#125;.#&#123;Entity&#125;Dao;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line">public class #&#123;Entity&#125;DaoImpl extends HibernateBaseDao&lt;#&#123;Entity&#125;, Integer&gt; implements #&#123;Entity&#125;Dao &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">Criteria crit = createCriteria();</span><br><span class="line">Pagination page = findByCriteria(crit, pageNo, pageSize);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; findById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; entity = get(id);</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean) &#123;</span><br><span class="line">getSession().save(bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; entity = super.get(id);</span><br><span class="line"><span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</span><br><span class="line">getSession().delete(entity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">protected Class&lt;#&#123;Entity&#125;&gt; getEntityClass() &#123;</span><br><span class="line">return #&#123;Entity&#125;.class;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Manager模板"><a href="#Manager模板" class="headerlink" title="Manager模板"></a>Manager模板</h3><p>​    manager.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;manager_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> #</span>&#123;Entity&#125;Mng &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; findById(Integer id);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; update(#&#123;Entity&#125; bean);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id);</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125;[] deleteByIds(Integer[] ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ManagerImpl模板"><a href="#ManagerImpl模板" class="headerlink" title="ManagerImpl模板"></a>ManagerImpl模板</h3><p>​    manager_impl.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;manager_impl_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.hibernate4.Updater;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line">import #&#123;dao_p&#125;.#&#123;Entity&#125;Dao;</span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line">import #&#123;manager_p&#125;.#&#123;Entity&#125;Mng;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">public class #&#123;Entity&#125;MngImpl implements #&#123;Entity&#125;Mng &#123;</span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Pagination <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">Pagination page = dao.getPage(pageNo, pageSize);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line">public #&#123;Entity&#125; findById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; entity = dao.findById(id);</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; save(#&#123;Entity&#125; bean) &#123;</span><br><span class="line">dao.save(bean);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; update(#&#123;Entity&#125; bean) &#123;</span><br><span class="line">Updater&lt;#&#123;Entity&#125;&gt; updater = new Updater&lt;#&#123;Entity&#125;&gt;(bean);</span><br><span class="line">bean = dao.updateByUpdater(updater);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125; deleteById(Integer id) &#123;</span><br><span class="line">#&#123;Entity&#125; bean = dao.deleteById(id);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public #&#123;Entity&#125;[] deleteByIds(Integer[] ids) &#123;</span><br><span class="line">#&#123;Entity&#125;[] beans = new #&#123;Entity&#125;[ids.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,len = ids.length; i &lt; len; i++) &#123;</span><br><span class="line">beans[i] = deleteById(ids[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private #&#123;Entity&#125;Dao dao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(#&#123;Entity&#125;Dao dao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dao = dao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Action模板"><a href="#Action模板" class="headerlink" title="Action模板"></a>Action模板</h3><p>​    action.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">package #&#123;action_p&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.jeecms.common.page.SimplePage.cpn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.annotation.RequiresPermissions;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import #&#123;entity_p&#125;.#&#123;Entity&#125;;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.core.entity.CmsSite;</span><br><span class="line">import #&#123;manager_p&#125;.#&#123;Entity&#125;Mng;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.core.web.util.CmsUtils;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.core.web.WebErrors;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.page.Pagination;</span><br><span class="line"><span class="keyword">import</span> com.jeecms.common.web.CookieUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> #</span>&#123;Entity&#125;Act &#123;</span><br><span class="line">private static final Logger log = LoggerFactory.getLogger(#&#123;Entity&#125;Act.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:v_list"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/v_list.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Integer pageNo, HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class="line">Pagination pagination = manager.getPage(cpn(pageNo), CookieUtils</span><br><span class="line">.getPageSize(request));</span><br><span class="line">model.addAttribute(<span class="string">"pagination"</span>,pagination);</span><br><span class="line">model.addAttribute(<span class="string">"pageNo"</span>,pagination.getPageNo());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"#&#123;config_entity&#125;/list"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:v_add"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/v_add.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"#&#123;config_entity&#125;/add"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:v_edit"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/v_edit.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Integer id, Integer pageNo, HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateEdit(id, request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">model.addAttribute(<span class="string">"#&#123;entity&#125;"</span>, manager.findById(id));</span><br><span class="line">model.addAttribute(<span class="string">"pageNo"</span>,pageNo);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"#&#123;config_entity&#125;/edit"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:o_save"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/o_save.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(#&#123;Entity&#125; bean, HttpServletRequest request, ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateSave(bean, request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">bean = manager.save(bean);</span><br><span class="line">log.info(<span class="string">"save #&#123;Entity&#125; id=&#123;&#125;"</span>, bean.getId());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:v_list.do"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:o_update"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/o_update.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(#&#123;Entity&#125; bean, Integer pageNo, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateUpdate(bean.getId(), request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">bean = manager.update(bean);</span><br><span class="line">log.info(<span class="string">"update #&#123;Entity&#125; id=&#123;&#125;."</span>, bean.getId());</span><br><span class="line"><span class="keyword">return</span> list(pageNo, request, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"#&#123;config_entity&#125;:o_delete"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/#&#123;config_entity&#125;/o_delete.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer[] ids, Integer pageNo, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelMap model)</span> </span>&#123;</span><br><span class="line">WebErrors errors = validateDelete(ids, request);</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.showErrorPage(model);</span><br><span class="line">&#125;</span><br><span class="line">#&#123;Entity&#125;[] beans = manager.deleteByIds(ids);</span><br><span class="line">for (#&#123;Entity&#125; bean : beans) &#123;</span><br><span class="line">log.info(<span class="string">"delete #&#123;Entity&#125; id=&#123;&#125;"</span>, bean.getId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list(pageNo, request, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateSave</span><span class="params">(#&#123;Entity&#125; bean, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line">bean.setSite(site);</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateEdit</span><span class="params">(Integer id, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line"><span class="keyword">if</span> (vldExist(id, site.getId(), errors)) &#123;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateUpdate</span><span class="params">(Integer id, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line"><span class="keyword">if</span> (vldExist(id, site.getId(), errors)) &#123;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebErrors <span class="title">validateDelete</span><span class="params">(Integer[] ids, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">WebErrors errors = WebErrors.create(request);</span><br><span class="line">CmsSite site = CmsUtils.getSite(request);</span><br><span class="line"><span class="keyword">if</span> (errors.ifEmpty(ids, <span class="string">"ids"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Integer id : ids) &#123;</span><br><span class="line">vldExist(id, site.getId(), errors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> errors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">vldExist</span><span class="params">(Integer id, Integer siteId, WebErrors errors)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (errors.ifNull(id, <span class="string">"id"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">#&#123;Entity&#125; entity = manager.findById(id);</span><br><span class="line">if(errors.ifNotExist(entity, #&#123;Entity&#125;.class, id)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!entity.getSite().getId().equals(siteId)) &#123;</span><br><span class="line">errors.notInSite(#&#123;Entity&#125;.class, id);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">private #&#123;Entity&#125;Mng manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面增加模板"><a href="#页面增加模板" class="headerlink" title="页面增加模板"></a>页面增加模板</h3><p>​    page_add.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/#&#123;<span class="attr">config_sys</span>&#125;/<span class="attr">head.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#jvForm"</span>).validate();</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-positon"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rpos"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.position</span>"/&gt;</span>: <span class="tag">&lt;<span class="name">@s.m</span> "#&#123;<span class="attr">entity</span>&#125;<span class="attr">.function</span>"/&gt;</span> - <span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.add</span>"/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ropt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"return-button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.backToList</span>"/&gt;</span>" onclick="this.form.action='v_list.do';"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.form</span> <span class="attr">id</span>=<span class="string">"jvForm"</span> <span class="attr">action</span>=<span class="string">"o_save.do"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.text</span> <span class="attr">label</span>=<span class="string">"#&#123;entity&#125;.name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"required"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.td</span>&gt;</span><span class="tag">&lt;<span class="name">@p.submit</span> <span class="attr">code</span>=<span class="string">"global.submit"</span>/&gt;</span> &amp;nbsp; <span class="tag">&lt;<span class="name">@p.reset</span> <span class="attr">code</span>=<span class="string">"global.reset"</span>/&gt;</span><span class="tag">&lt;/<span class="name">@p.td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面修改模板"><a href="#页面修改模板" class="headerlink" title="页面修改模板"></a>页面修改模板</h3><p>​    page_edit.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/#&#123;<span class="attr">config_sys</span>&#125;/<span class="attr">head.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#jvForm"</span>).validate();</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-positon"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rpos"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.position</span>"/&gt;</span>:  <span class="tag">&lt;<span class="name">@s.m</span> "#&#123;<span class="attr">entity</span>&#125;<span class="attr">.function</span>"/&gt;</span> - <span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.edit</span>"/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ropt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"return-button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.backToList</span>"/&gt;</span>" onclick="this.form.action='v_list.do';"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.form</span> <span class="attr">id</span>=<span class="string">"jvForm"</span> <span class="attr">action</span>=<span class="string">"o_update.do"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.text</span> <span class="attr">label</span>=<span class="string">"#&#123;entity&#125;.name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">#&#123;entity&#125;.name</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"required"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.td</span>&gt;</span><span class="tag">&lt;<span class="name">@p.hidden</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">#&#123;entity&#125;.id/</span>&gt;</span><span class="tag">&lt;<span class="name">@p.submit</span> <span class="attr">code</span>=<span class="string">"global.submit"</span>/&gt;</span> &amp;nbsp; <span class="tag">&lt;<span class="name">@p.reset</span> <span class="attr">code</span>=<span class="string">"global.reset"</span>/&gt;</span><span class="tag">&lt;/<span class="name">@p.td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页面列表模板"><a href="#页面列表模板" class="headerlink" title="页面列表模板"></a>页面列表模板</h3><p>​    page_list.txt</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/#&#123;<span class="attr">config_sys</span>&#125;/<span class="attr">head.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getTableForm</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">'tableForm'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">optDelete</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(Pn.checkedCount(<span class="string">'ids'</span>)&lt;=<span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">$.alert(<span class="string">"&lt;@s.m 'global.prompt'/&gt;"</span>,<span class="string">"&lt;@s.m 'error.checkRecord'/&gt;"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">$.confirm(doDelete,<span class="string">"&lt;@s.m 'global.confirm'/&gt;"</span>,<span class="string">"&lt;@s.m 'global.confirm.delete'/&gt;"</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">doDelete</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> f = getTableForm();</span></span><br><span class="line"><span class="javascript">f.action=<span class="string">"o_delete.do"</span>;</span></span><br><span class="line"><span class="undefined">f.submit();</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-positon"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rpos"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.position</span>"/&gt;</span>: <span class="tag">&lt;<span class="name">@s.m</span> "#&#123;<span class="attr">entity</span>&#125;<span class="attr">.function</span>"/&gt;</span> - <span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.list</span>"/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ropt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"add"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.add</span>"/&gt;</span>" onclick="this.form.action='v_add.do';"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body-box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"tableForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pageNo"</span> <span class="attr">value</span>=<span class="string">"$&#123;pageNo!&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.table</span> <span class="attr">value</span>=<span class="string">pagination;#&#123;entity&#125;,i,has_next</span>&gt;</span><span class="tag">&lt;<span class="name">#rt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">title</span>=<span class="string">"&lt;input type='checkbox' onclick='Pn.checkbox(\"</span><span class="attr">ids</span>\",<span class="attr">this.checked</span>)'/&gt;</span>" width="20"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'checkbox'</span> <span class="attr">name</span>=<span class="string">'ids'</span> <span class="attr">value</span>=<span class="string">'$&#123;#&#123;entity&#125;.id&#125;'</span>/&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">title</span>=<span class="string">"ID"</span>&gt;</span>$&#123;#&#123;entity&#125;.id&#125;<span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">code</span>=<span class="string">"#&#123;entity&#125;.name"</span>&gt;</span>$&#123;#&#123;entity&#125;.name&#125;<span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@p.column</span> <span class="attr">code</span>=<span class="string">"global.operate"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"v_edit.do?id=$&#123;#&#123;entity&#125;.id&#125;&amp;pageNo=$&#123;pageNo!&#125;"</span> <span class="attr">class</span>=<span class="string">"pn-opt"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.edit</span>"/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">#rt</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"o_delete.do?ids=$&#123;#&#123;entity&#125;.id&#125;&amp;pageNo=$&#123;pageNo!&#125;"</span> <span class="attr">onclick</span>=<span class="string">"if(!$.confirmToUrl(this.href)) &#123;return false;&#125;"</span> <span class="attr">class</span>=<span class="string">"pn-opt"</span>&gt;</span><span class="tag">&lt;<span class="name">@s.m</span> "<span class="attr">global.delete</span>"/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.column</span>&gt;</span><span class="tag">&lt;<span class="name">#t</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">@p.table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"del-button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"&lt;@s.m "</span><span class="attr">global.delete</span>"/&gt;</span>" onclick="optDelete();"/&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/<span class="attr">common</span>/<span class="attr">alert_message.html</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>com.jeecms.cms.template.CmsModuleGenerator.java</code>打开后<code>Run As—java application</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0152.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;技术点：采用SpringMVC3+Spring3+Hibernate3+Freemarker主流技术架构&lt;br&gt;
    
    </summary>
    
      <category term="CMS" scheme="http://m.iskei.cn/categories/CMS/"/>
    
    
      <category term="CMS" scheme="http://m.iskei.cn/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>Logback日志组件的使用</title>
    <link href="http://m.iskei.cn/blog/17154.html"/>
    <id>http://m.iskei.cn/blog/17154.html</id>
    <published>2018-03-11T08:44:36.000Z</published>
    <updated>2018-05-18T07:15:20.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0151.jpg" alt="image"></p><p>Logback是由log4j创始人设计的又一个开源日志组件。<br><a id="more"></a></p><h2 id="一-logback的介绍"><a href="#一-logback的介绍" class="headerlink" title="一. logback的介绍"></a>一. logback的介绍</h2><p>​     logback当前分成三个模块：logback-core,logback- classic和logback-access。logback-core是其它两个模块的基础模块。logback-classic是log4j的一个 改良版本。此外logback-classic完整实现<a href="http://www.oschina.net/p/slf4j" target="_blank" rel="noopener">SLF4J API</a>使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging。logback-access访问模块与Servlet容器集成提供通过Http来访问日志的功能。 Logback是要与SLF4J结合起来用两个组件的官方网站如下：</p><ol><li><p>​    logback的官方网站： <a href="http://logback.qos.ch/download.html" target="_blank" rel="noopener">http://logback.qos.ch</a></p></li><li><p>​    SLF4J的官方网站：<a href="http://www.slf4j.org/download.html" target="_blank" rel="noopener">http://www.slf4j.org</a></p></li></ol><p>​    本文章用到的组件如下：请自行到官方网站下载！</p><p>​    <code>logback-access-1.0.0.jar</code></p><p><code>​    logback-classic-1.0.0.jar</code></p><p>​<code>logback-core-1.0.0.jar</code></p><p>​<code>slf4j-api-1.6.0.jar</code></p><h2 id="二-logback取代-log4j的理由："><a href="#二-logback取代-log4j的理由：" class="headerlink" title="二. logback取代 log4j的理由："></a>二. logback取代 log4j的理由：</h2><p>​    Logback和log4j是非常相似的，如果你对log4j很熟悉，那对logback很快就会得心应手。下面列了logback相对于log4j的一些优点：</p><p>​    1. 更快的实现  Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了。</p><p>​    2. 非常充分的测试  Logback经过了几年，数不清小时的测试。Logback的测试完全不同级别的。在作者的观点，这是简单重要的原因选择logback而不是log4j。</p><p>​    3. Logback-classic非常自然实现了SLF4j    Logback-classic实现了 SLF4j。在使用SLF4j中，你都感觉不到logback-classic。而且因为logback-classic非常自然地实现了SLF4J，  所 以切换到log4j或者其他，非常容易，只需要提供成另一个jar包就OK，根本不需要去动那些通过SLF4JAPI实现的代码。</p><p>​    4. 非常充分的文档  官方网站有两百多页的文档。</p><p>​    5. 自动重新加载配置文件  当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程。这个技术充分保证了应用程序能跑得很欢在JEE环境里面。</p><p>​    6. Lilith   Lilith是log事件的观察者，和log4j的chainsaw类似。而lilith还能处理大数量的log数据 。</p><p>​    7. 谨慎的模式和非常友好的恢复  在谨慎模式下，多个FileAppender实例跑在多个JVM下，能 够安全地写道同一个日志文件。RollingFileAppender会有些限制。Logback的FileAppender和它的子类包括 RollingFileAppender能够非常友好地从I/O异常中恢复。</p><p>​    8. 配置文件可以处理不同的情况   开发人员经常需要判断不同的Logback配置文件在不同的环境下（开发，测试，生产）。而这些配置文件仅仅只有一些很小的不同，可以通过,和来实现，这样一个配置文件就可以适应多个环境。</p><p>​    9. Filters（过滤器）  有些时候，需要诊断一个问题，需要打出日志。在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续 保持那个日志级别而除掉某种特殊情况，如alice这个用户登录，她的日志将打在DEBUG级别而其他用户可以继续打在WARN级别。要实现这个功能只需 加4行XML配置。可以参考MDCFIlter 。</p><ol start="10"><li><p>SiftingAppender（一个非常多功能的Appender）  它可以用来分割日志文件根据任何一个给定的运行参数。如，SiftingAppender能够区别日志事件跟进用户的Session，然后每个用户会有一个日志文件。</p></li><li><p>自动压缩已经打出来的log  RollingFileAppender在产生新文件的时候，会自动压缩已经打出来的日志文件。压缩是个异步过程，所以甚至对于大的日志文件，在压缩过程中应用不会受任何影响。</p></li><li><p>堆栈树带有包版本  Logback在打出堆栈树日志时，会带上包的数据。</p></li><li><p>自动去除旧的日志文件  通过设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量。如果设置maxHistory 12，那那些log文件超过12个月的都会被自动移除。</p></li></ol><p>​    总之，logback比log4j太优秀了，让我们的应用全部建立logback上吧 ！</p><h2 id="三-Logback的配置介绍"><a href="#三-Logback的配置介绍" class="headerlink" title="三. Logback的配置介绍"></a>三. Logback的配置介绍</h2><p>​    1.  Logger. appender及layout</p><p>​       Logger作为日志的记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型. 级别。</p><p>​    Appender主要用于指定日志输出的目的地，目的地可以是控制台. 文件. 远程套接字服务器.  MySQL. PostreSQL.  Oracle和其他数据库.  JMS和远程UNIX Syslog守护进程等。 </p><p>​    Layout 负责把事件转换成字符串，格式化的日志信息的输出。</p><p>​     2. logger context</p><p>​       各个logger 都被关联到一个 LoggerContext，LoggerContext负责制造logger，也负责以树结构排列各logger。其他所有logger也通过org.slf4j.LoggerFactory 类的静态方法getLogger取得。 getLogger方法以 logger 名称为参数。用同一名字调用LoggerFactory.getLogger 方法所得到的永远都是同一个logger对象的引用。</p><ol start="3"><li>有效级别及级别的继承</li></ol><p>​      Logger 可以被分配级别。级别包括：TRACE. DEBUG. INFO. WARN 和 ERROR，定义于ch.qos.logback.classic.Level类。如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。</p><ol start="4"><li>打印方法与基本的选择规则</li></ol><p>​    打印方法决定记录请求的级别。例如，如果 L 是一个 logger 实例，那么，语句 L.info(“..”)是一条级别为 INFO 的记录语句。记录请求的级别在高于或等于其 logger 的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其 logger的有效级别为 q，只有则当 p&gt;=q时，该请求才会被执行。</p><p>​    该规则是 logback 的核心。级别排序为： TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR。 </p><h2 id="四-Logback的默认配置"><a href="#四-Logback的默认配置" class="headerlink" title="四. Logback的默认配置"></a>四. Logback的默认配置</h2><p>​      如果配置文件 logback-test.xml 和 logback.xml 都不存在，那么 logback 默认地会调用BasicConfigurator ，创建一个最小化配置。最小化配置由一个关联到根 logger 的ConsoleAppender 组成。输出用模式为<code>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 的PatternLayoutEncoder</code> 进行格式化。root logger 默认级别是 DEBUG。</p><p>​     1. Logback的配置文件</p><p>​      Logback 配置文件的语法非常灵活。正因为灵活，所以无法用 DTD 或 XML schema 进行定义。尽管如此，可以这样描述配置文件的基本结构：<code>以&lt;configuration&gt;开头，后面有零个或多个&lt;appender&gt;元素，有零个或多个&lt;logger&gt;元素，有最多一个&lt;root&gt;元素。</code></p><p>​     2. Logback默认配置的步骤</p><p>​     (1). 尝试在 classpath 下查找文件 logback-test.xml；</p><p>​     (2). 如果文件不存在，则查找文件 logback.xml；</p><p>​     (3). 如果两个文件都不存在，logback 用 Bas icConfigurator 自动对自己进行配置，这会导致记录输出到控制台。</p><p>​    3. Logback.xml 文件     </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"c:/log"</span> /&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 日志输出编码 --&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">Encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">Encoding</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>   </span><br><span class="line">             <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n   </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!-- 按照每天生成日志文件 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span>  <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">Encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">Encoding</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/myApp.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span>   </span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n   </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </span><br><span class="line">       <span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> </span><br><span class="line">   <span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span>  <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicExtractor"</span>  <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.QueryParameters"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.query.HQLQueryPlan"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!--日志异步到数据库 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DB"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.db.DBAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志异步到数据库 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.db.DriverManagerConnectionSource"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--连接池 --&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">driverClass</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClass</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/databaseName<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> --&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五-在程序用引用Logback"><a href="#五-在程序用引用Logback" class="headerlink" title="五. 在程序用引用Logback"></a>五. 在程序用引用Logback</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.stu.system.action; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogAction</span></span>&#123;</span><br><span class="line">     <span class="comment">//定义一个全局的记录器，通过LoggerFactory获取</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(BlogAction.class); </span><br><span class="line">     /</span><br><span class="line">     * <span class="meta">@param</span> args</span><br><span class="line">     */</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"logback 成功了"</span>);</span><br><span class="line">        logger.error(<span class="string">"logback 成功了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="http://dl.iteye.com/topics/download/60fe3971-ae5f-3528-9b48-cc4ff89aab30" target="_blank" rel="noopener">Logback手册.pdf</a> (3.6 MB)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0151.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Logback是由log4j创始人设计的又一个开源日志组件。&lt;br&gt;
    
    </summary>
    
      <category term="Log" scheme="http://m.iskei.cn/categories/Log/"/>
    
    
      <category term="Log" scheme="http://m.iskei.cn/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>库内新增对象的流程及其他技巧</title>
    <link href="http://m.iskei.cn/blog/38066.html"/>
    <id>http://m.iskei.cn/blog/38066.html</id>
    <published>2018-03-10T08:44:36.000Z</published>
    <updated>2018-05-18T07:15:20.506Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0150.jpg" alt="image"></p><p>cms开发 ———— 库内新增对象Products的流程说明及其他技巧<br><a id="more"></a></p><h3 id="第一步：Entity"><a href="#第一步：Entity" class="headerlink" title="第一步：Entity"></a>第一步：Entity</h3><ol><li><code>com.jeecms.cms.entity.assist.base</code>下建立模型基础类<code>BaseCmsProducts.java</code></li><li><code>com.jeecms.cms.entity.assist</code>  下建立对象类继承继承模型CmsProducts.java</li><li><code>com.jeecms.cms.entity.assist.hbm</code> 配置hibernate对象映射CmsProducts.hbm.xml</li><li><code>src .ehcache-hibernate.xml</code> 缓存对象配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.jeecms.cms.entity.assist.CmsProducts"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsInMemory</span>=<span class="string">"100"</span> <span class="attr">eternal</span>=<span class="string">"false"</span> <span class="attr">timeToIdleSeconds</span>=<span class="string">"600"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"7200"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步：Dao"><a href="#第二步：Dao" class="headerlink" title="第二步：Dao"></a>第二步：Dao</h3><ol><li><code>com.jeecms.cms.dao.assist</code>数据库交互持久层DAO接口和实现<code>ProductsDao.java</code> <code>ProductsDaoImpl.java</code> </li><li>配置<code>WebRoot/WEB-INF/config/jeecms-context.xml</code>文件:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cmsproductsDao"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.dao.assist.impl.CmsProductsDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第三步：Service"><a href="#第三步：Service" class="headerlink" title="第三步：Service"></a>第三步：Service</h3><ol><li><code>com.jeecms.cms.manager.assist</code>业务层接口和实现，<code>ProductsMng.java , ProductsMngImpl.java</code></li><li>配置<code>WebRoot/WEB-INF/config/jeecms-context.xml</code>文件:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cmsProductsMng"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.manager.assist.impl.CmsProductsMngImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四步：Action"><a href="#第四步：Action" class="headerlink" title="第四步：Action"></a>第四步：Action</h3><ol><li><code>com.jeecms.cms.action.front</code> 写Action与前台对接，<code>ProductsAct.java</code></li><li>XML配置：<code>jeecms-servlet-front-action.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"productsAct"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.action.front.ProductsAct"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>com.jeecms.cms.action.admin.assist</code> （加、删、改）写Action与后台对接<code>CmsProductsAct.java</code> </li><li>XML配置：<code>jeecms-servlet-admin-action.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cmsProductsAct"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.action.admin.assist.CmsProductsAct"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第五步：Directive"><a href="#第五步：Directive" class="headerlink" title="第五步：Directive"></a>第五步：Directive</h3><ol><li><code>com.jeecms.cms.action.directive</code> (设置并返回标签对象<code>[@cms_products_page]</code>)</li><li>配置<code>WebRoot/WEB-INF/config/jeecms-context.xml</code>文件:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cms_products_page"</span> </span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"com.jeecms.cms.action.directive.CmsProductsDirective"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"staticPageSvc"</span> <span class="attr">class</span>=<span class="string">"com.jeecms.cms.staticpage.StaticPageSvcImpl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tplMessageSource"</span> <span class="attr">ref</span>=<span class="string">"tplMessageSource"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freeMarkerConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freemarkerVariables"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>此处添加标签的配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"cms_products_page"</span> <span class="attr">value-ref</span>=<span class="string">"cms_products_page"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>WebRoot/WEB-INF/config/ Jeecms-servlet-front.xml</code>文件:</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freemarkerConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freemarkerVariables"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>此处添加标签的配置信息： </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"cms_products_page"</span> <span class="attr">value-ref</span>=<span class="string">"cms_products_page"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="特别注意点："><a href="#特别注意点：" class="headerlink" title="特别注意点："></a>特别注意点：</h3><ol><li>对象模板位置控制：<code>com.jeecms.cms.action.front.ProductsAct.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案路径site.getSolutionPath()=”/WEB-INF/t/cms/www/default”</span></span><br><span class="line"><span class="comment">// TPLDIR_SPECIAL="special" 模板位置</span></span><br><span class="line"><span class="comment">// PRODUCTS_INDEX= "tpl.productsIndex"; 模板名称</span></span><br><span class="line"><span class="keyword">return</span> FrontUtils.getTplPath(request, site.getSolutionPath(),TPLDIR_SPECIAL, PRODUCTS_INDEX);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>PRODUCTS_INDEX</code>对象需要在国际化处进行设置：<code>WebRoot/WEB-INF/languages/jeecms_tpl/messages_zh_CN.properties</code> ：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tpl.productsIndex=products_index</span><br></pre></td></tr></table></figure><h3 id="国际化文件说明："><a href="#国际化文件说明：" class="headerlink" title="国际化文件说明："></a>国际化文件说明：</h3><ol><li><code>WEB-INF/languages/fck</code>  友情提示</li><li><p><code>WEB-INF/languages/jeecms_admin</code>  (后台)功能页面，如：首页》内容统计 <code>statistic.function.content=内容统计</code></p></li><li><p><code>WEB-INF/languages/jeecms_front</code>  (前台)友情提示，如：验证码错误。</p></li><li><p><code>WEB-INF/languages/jeecms_tpl</code>    (前台)功能页面，如：投票内容页， <code>tpl.tagDetail=voteIndex</code></p></li><li><p><code>WEB-INF/languages/jeecore_admin</code> 功能按钮、提示信息，如：<code>global.submit=提交，global.confirm.logout=您确定退出吗？</code></p></li></ol><h3 id="修改后台访问地址"><a href="#修改后台访问地址" class="headerlink" title="修改后台访问地址"></a>修改后台访问地址</h3><p>将<code>jeeadmin/jeecms/index.do</code> 改为<code>admin/index.do</code>为例</p><ol><li>修改<code>WebContent\WEB-INF\web.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsAdmin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jeeadmin/jeecms/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>JeeCmsAdmin<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/admin/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改<code>WebContent\WEB-INF\config\jeecms-servlet-admin.xml</code> </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"appBase"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"appBase"</span> <span class="attr">value</span>=<span class="string">"/admin"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>WebContent\WEB-INF\config\shiro-context.xml</code> </li></ol><p>把 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*.jspx = anon </span><br><span class="line">*.jhtml = anon </span><br><span class="line">/member/forgot_password.jspx = anon </span><br><span class="line">/member/password_reset.jspx = anon </span><br><span class="line">/login.jspx = authc </span><br><span class="line">/logout.jspx = logout </span><br><span class="line">/member/** = user </span><br><span class="line">/jeeadmin/jeecms/login.do = authc </span><br><span class="line">/jeeadmin/jeecms/logout.do = logout </span><br><span class="line">/jeeadmin/jeecms/** =user</span><br></pre></td></tr></table></figure><p>改为              </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*.jspx = anon </span><br><span class="line">  *.jhtml = anon </span><br><span class="line">  /member/forgot_password.jspx = anon </span><br><span class="line">  /member/password_reset.jspx = anon </span><br><span class="line">  /login.jspx = authc </span><br><span class="line">  /logout.jspx = logout </span><br><span class="line">  /member/** = user </span><br><span class="line">  /admin/login.do = authc </span><br><span class="line">  /admin/logout.do = logout </span><br><span class="line">  /admin/** =user</span><br></pre></td></tr></table></figure><p>把 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminLogin"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms/login.do"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminPrefix"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminLogin"</span> <span class="attr">value</span>=<span class="string">"/admin/login.do"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminPrefix"</span> <span class="attr">value</span>=<span class="string">"/admin/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>把 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminIndex"</span> <span class="attr">value</span>=<span class="string">"/jeeadmin/jeecms/index.do"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adminIndex"</span> <span class="attr">value</span>=<span class="string">"/admin/index.do"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>\src\com\jeecms\cms\web\AdminContextInterceptor.java</code> </li></ol><p>把</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getURI</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123; </span><br><span class="line">        UrlPathHelper helper = <span class="keyword">new</span> UrlPathHelper(); </span><br><span class="line">        String uri = helper.getOriginatingRequestUri(request); </span><br><span class="line">        String ctxPath = helper.getOriginatingContextPath(request); </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, i = <span class="number">0</span>, count = <span class="number">2</span> </span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(ctxPath)) &#123; </span><br><span class="line">            count++; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span> (i &lt; count &amp;&amp; start != -<span class="number">1</span>) &#123; </span><br><span class="line">            start = uri.indexOf(<span class="string">'/'</span>, start + <span class="number">1</span>); </span><br><span class="line">            i++; </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">if</span> (start &lt;= <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"admin access path not like '/jeeadmin/jeecms/...' pattern: "</span> + uri); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> uri.substring(start); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getURI</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123; </span><br><span class="line">        UrlPathHelper helper = <span class="keyword">new</span> UrlPathHelper(); </span><br><span class="line">        String uri = helper.getOriginatingRequestUri(request); </span><br><span class="line">        String ctxPath = helper.getOriginatingContextPath(request); </span><br><span class="line">        <span class="comment">// int start = 0, i = 0, count = 2;修改 </span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, i = <span class="number">0</span>, count = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isBlank(ctxPath)) &#123; </span><br><span class="line">            count++; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">while</span> (i &lt; count &amp;&amp; start != -<span class="number">1</span>) &#123; </span><br><span class="line">            start = uri.indexOf(<span class="string">'/'</span>, start + <span class="number">1</span>); </span><br><span class="line">            i++; </span><br><span class="line">        &#125;   </span><br><span class="line">    <span class="keyword">if</span> (start &lt;= <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"admin access path not like '/admin/...' pattern: "</span> + uri); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> uri.substring(start); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过数据库修改密码"><a href="#通过数据库修改密码" class="headerlink" title="通过数据库修改密码"></a>通过数据库修改密码</h3><ol><li>通过数据库修改admin密码</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> core_user;</span><br><span class="line">|       1 | admin      | jobar     | 0230504dd5de96d2f6784d45d1bc7633 |</span><br></pre></td></tr></table></figure><p>密码已经是被加密过的了。</p><ol start="2"><li><p>密码加密类：<code>com.ponyjava.common.util.Md5PwdEncoder</code></p><p>例如我想将密码设为“zhaozh”,就先用这个类加密，然后更新数据库就ok了。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Md5PwdEncoder encoder = <span class="keyword">new</span> Md5PwdEncoder();</span><br><span class="line">System.out.println(encoder.encodePassword(<span class="string">"zhaozh"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：<code>f06238ff925a61f9c62de7d64c64bad3</code></p><p>mysql&gt;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> core_user <span class="keyword">set</span> <span class="keyword">password</span>=<span class="string">'f06238ff925a61f9c62de7d64c64bad3'</span> <span class="keyword">where</span> user_id=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>再次登录就ok了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0150.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;cms开发 ———— 库内新增对象Products的流程说明及其他技巧&lt;br&gt;
    
    </summary>
    
      <category term="cms" scheme="http://m.iskei.cn/categories/cms/"/>
    
    
      <category term="cms" scheme="http://m.iskei.cn/tags/cms/"/>
    
  </entry>
  
  <entry>
    <title>API开发规范</title>
    <link href="http://m.iskei.cn/blog/51267.html"/>
    <id>http://m.iskei.cn/blog/51267.html</id>
    <published>2018-02-28T08:44:36.000Z</published>
    <updated>2018-05-18T07:15:20.482Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0148.jpg" alt="image"></p><p>API开发规范<br><a id="more"></a></p><h6 id="整体规范建议采用RESTful-方式来实施。"><a href="#整体规范建议采用RESTful-方式来实施。" class="headerlink" title="整体规范建议采用RESTful 方式来实施。"></a>整体规范建议采用RESTful 方式来实施。</h6><h1 id="1-协议"><a href="#1-协议" class="headerlink" title="1. 协议"></a>1. 协议</h1><p>API与用户的通信协议，总是使用HTTPs协议，确保交互数据的传输安全。</p><h1 id="2-域名"><a href="#2-域名" class="headerlink" title="2. 域名"></a>2. 域名</h1><p>应该尽量将API部署在专用域名之下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com</span><br></pre></td></tr></table></figure><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.org/api/</span><br></pre></td></tr></table></figure><h1 id="3-api版本控制"><a href="#3-api版本控制" class="headerlink" title="3. api版本控制"></a>3. api版本控制</h1><p>应该将API的版本号放入URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v&#123;n&#125;/</span><br></pre></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><p>采用多版本并存，增量发布的方式</p><p>v{n} n代表版本号,分为整形和浮点型</p><p>整形的版本号: 大功能版本发布形式；具有当前版本状态下的所有API接口 ,例如：v1,v2</p><p>浮点型：为小版本号，只具备补充api的功能，其他api都默认调用对应大版本号的api 例如：v1.1 v2.2</p><h1 id="4-API-路径规则"><a href="#4-API-路径规则" class="headerlink" title="4. API 路径规则"></a>4. API 路径规则</h1><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/products</span><br><span class="line"></span><br><span class="line">https://api.example.com/v1/users</span><br><span class="line"></span><br><span class="line">https://api.example.com/v1/employees</span><br></pre></td></tr></table></figure><h1 id="5-HTTP请求方式"><a href="#5-HTTP请求方式" class="headerlink" title="5. HTTP请求方式"></a>5. HTTP请求方式</h1><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面四个（括号里是对应的SQL命令）。</p><p>GET（SELECT）：从服务器取出资源（一项或多项）。</p><p>POST（CREATE）：在服务器新建一个资源。</p><p>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</p><p>DELETE（DELETE）：从服务器删除资源。</p><p>下面是一些例子。</p><p>GET /product：列出所有商品</p><p>POST /product：新建一个商品</p><p>GET /product/ID：获取某个指定商品的信息</p><p>PUT /product/ID：更新某个指定商品的信息</p><p>DELETE /product/ID：删除某个商品</p><p>GET /product/ID/purchase ：列出某个指定商品的所有投资者</p><p>get /product/ID/purchase/ID：获取某个指定商品的指定投资者信息</p><h1 id="6-过滤信息"><a href="#6-过滤信息" class="headerlink" title="6. 过滤信息"></a>6. 过滤信息</h1><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><p>?limit=10：指定返回记录的数量</p><p>?offset=10：指定返回记录的开始位置。</p><p>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</p><p>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</p><p>?producy_type=1：指定筛选条件</p><h1 id="7-API-传入参数"><a href="#7-API-传入参数" class="headerlink" title="7. API 传入参数"></a>7. API 传入参数</h1><p>传入参数分为4种类型：</p><p>地址栏参数</p><p>* restful 地址栏参数 /api/v1/product/122 122为产品编号，获取产品为122的信息</p><p>* get方式的查询字串 见过滤信息小节</p><p>请求body数据</p><p>cookie</p><p>request header</p><p>cookie和header 一般都是用于OAuth认证的2种途径</p><h1 id="8-返回数据"><a href="#8-返回数据" class="headerlink" title="8. 返回数据"></a>8. 返回数据</h1><p>只要api接口成功接到请求，就不能返回200以外的HTTP状态。</p><p>为了保障前后端的数据交互的顺畅，建议规范数据的返回，并采用固定的数据格式封装。</p><p>接口返回模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    status:0,</span><br><span class="line"></span><br><span class="line">    data:&#123;&#125;||[],</span><br><span class="line"></span><br><span class="line">    msg:’’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>status: 接口的执行的状态</p><p>=0表示成功</p><p>&lt;0 表示有异常=””</p><p>Data 接口的主数据</p><p>可以根据实际返回数组或JSON对象</p><p>Msg 信息</p><p>当status!=0 都应该有错误信息</p><h1 id="9-非Restful-Api的需求"><a href="#9-非Restful-Api的需求" class="headerlink" title="9. 非Restful Api的需求"></a>9. 非Restful Api的需求</h1><p>由于实际业务开展过程中，可能会出现各种的api不是简单的restful 规范能实现的，因此，需要有一些api突破restful规范原则。特别是移动互联网的api设计，更需要有一些特定的api来优化数据请求的交互。</p><h2 id="9-1-页面级的api"><a href="#9-1-页面级的api" class="headerlink" title="9.1 页面级的api"></a>9.1 页面级的api</h2><p>把当前页面中需要用到的所有数据通过一个接口一次性返回全部数据</p><p>举例</p><p>api/v1/get-home-data 返回首页用到的所有数据</p><p>这类API有一个非常不好的地址，只要业务需求变动，这个api就需要跟着变更。</p><h2 id="9-2-自定义组合api"><a href="#9-2-自定义组合api" class="headerlink" title="9.2 自定义组合api"></a>9.2 自定义组合api</h2><p>把当前用户需要在第一时间内容加载的多个接口合并成一个请求发送到服务端，服务端根据请求内容，一次性把所有数据合并返回,相比于页面级api，具备更高的灵活性，同时又能很容易的实现页面级的api功能。</p><p>规范</p><p>地址：api/v1/batApi</p><p>传入参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data:[</span><br><span class="line">    &#123;url:&apos;api1&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;url:&apos;api2&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;url:&apos;api3&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;,</span><br><span class="line"></span><br><span class="line">    &#123;url:&apos;api4&apos;,type:&apos;get&apos;,data:&#123;...&#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>返回数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    status:0,</span><br><span class="line">    msg:&apos;&apos;,</span><br><span class="line">    data:[</span><br><span class="line">        &#123;status:0,msg:&apos;&apos;,data:[]&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;status:-1,msg:&apos;&apos;,data:&#123;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;status:1,msg:&apos;&apos;,data:&#123;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">        &#123;status:0,msg:&apos;&apos;,data:[]&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-Api共建平台"><a href="#10-Api共建平台" class="headerlink" title="10. Api共建平台"></a>10. Api共建平台</h1><p>RAP是一个GUI的WEB接口管理工具。在RAP中，您可定义接口的URL、请求&amp;响应细节格式等等。通过分析这些数据，RAP提供MOCK服务、测试服务等自动化工具。RAP同时提供大量企业级功能，帮助企业和团队高效的工作。</p><h2 id="10-1-什么是RAP"><a href="#10-1-什么是RAP" class="headerlink" title="10.1 什么是RAP?"></a>10.1 什么是RAP?</h2><p>在前后端分离的开发模式下，我们通常需要定义一份接口文档来规范接口的具体信息。如一个请求的地址、有几个参数、参数名称及类型含义等等。RAP 首先方便团队录入、查看和管理这些接口文档，并通过分析结构化的文档数据，重复利用并生成自测数据、提供自测控制台等等… 大幅度提升开发效率。</p><h2 id="10-2-RAP的特色"><a href="#10-2-RAP的特色" class="headerlink" title="10.2 RAP的特色"></a>10.2 RAP的特色</h2><p>强大的GUI工具 给力的用户体验，你将会爱上使用RAP来管理您的API文档。</p><p>完善的MOCK服务 文档定义好的瞬间，所有接口已经准备就绪。有了MockJS，无论您的业务模型有多复杂，它都能很好的满足。</p><p>庞大的用户群 RAP在阿里巴巴有200多个大型项目在使用，也有许多著名的公司、开源人士在使用。RAP跟随这些业务的成行而成长，专注细节，把握质量，经得住考验。</p><p>免费 + 专业的技术支持 RAP是免费的，而且你的技术咨询都将在24小时内得到答复。大多数情况，在1小时内会得到答复。</p><p>RAP是一个可视化接口管理工具 通过分析接口结构，动态生成模拟数据，校验真实接口正确性， 围绕接口定义，通过一系列自动化工具提升我们的协作效率。我们的口号：提高效率，回家吃晚饭！</p><h1 id="11-RESTful接口规范"><a href="#11-RESTful接口规范" class="headerlink" title="11. RESTful接口规范"></a>11. RESTful接口规范</h1><h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><h3 id="URI规范"><a href="#URI规范" class="headerlink" title="URI规范"></a>URI规范</h3><ol><li><p>不用大写；</p></li><li><p>用中杠 - 不用下杠 _ ；</p></li><li><p>参数列表要encode；</p></li><li><p>URI中的名词表示资源集合，使用复数形式。</p></li><li><p>在RESTful<a href="http://lib.csdn.net/base/architecture" target="_blank" rel="noopener">架构</a>中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词（特殊情况可以使用动词），而且所用的名词往往与<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>的表格名对应。</p></li></ol><p>资源集合 vs单个资源</p><p>URI表示资源的两种方式：资源集合、单个资源。</p><p>资源集合：</p><pre><code>/zoos //所有动物园/zoos/1/animals //id为1的动物园中的所有动物</code></pre><p>单个资源：</p><pre><code>/zoos/1//id为1的动物园/zoos/1;2;3//id为1，2，3的动物园</code></pre><p>避免层级过深的URI</p><p>在url中表达层级，用于 按实体关联关系进行对象导航 ，一般根据id导航。</p><p>过深的导航容易导致url膨胀，不易维护，如 GET /zoos/1/areas/3/animals/4 ，尽量使用查询参数代替路径中的实体导航，如 GET/animals?zoo=1&amp;area=3 ；</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>应该将API的版本号放入到URI中</p><p>​           <a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>HTTP方法</p><p>通过标准HTTP方法对资源CRUD：</p><ol><li>GET：查询（从服务器取出资源一项或多项）</li></ol><p>GET /zoos</p><p>GET /zoos/1</p><p>GET/zoos/1/employees</p><p>POST：创建单个新资源。 POST一般向“资源集合”型uri发起</p><p>POST/animals  //新增动物</p><p>POST/zoos/1/employees //为id为1的动物园雇佣员工</p><ol start="2"><li>PUT：更新单个资源（全量），客户端提供完整的更新后的资源。与之对应的是 PATCH，PATCH负责部分更新，客户端提供要更新的那些字段。 PUT/PATCH一般向“单个资源”型uri发起</li></ol><p>PUT/animals/1</p><p>PUT /zoos/1</p><ol start="3"><li>DELETE：删除</li></ol><p>DELETE/zoos/1/employees/2</p><p>DELETE/zoos/1/employees/2;4;5</p><p>DELETE/zoos/1/animals  //删除id为1的动物园内的所有动物</p><p>HEAD / OPTION/ PATCH用的不多，就不多解释了。</p><ol start="4"><li>HEAD：获取资源的元数据</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的</li><li>PATCH：在服务器更新资源（客户端提供改变的属性）</li></ol><p>安全性和幂等性</p><ol><li><p>安全性 ：不会改变资源状态，可以理解为只读的；</p></li><li><p>幂等性 ：执行1次和执行N次，对资源状态改变的效果是等价的。</p></li></ol><table><thead><tr><th>.</th><th>安全性</th><th>幂等性</th></tr></thead><tbody><tr><td>GET</td><td>√</td><td>√</td></tr><tr><td>POST</td><td>×</td><td>×</td></tr><tr><td>PUT</td><td>×</td><td>√</td></tr><tr><td>DELETE</td><td>×</td><td>√</td></tr></tbody></table><p>安全性和幂等性均不保证反复请求能拿到相同的response。以 DELETE为例，第一次DELETE返回200表示删除成功，第二次返回404提示资源不存在，这是允许的。</p><p>复杂查询</p><p>查询可以捎带以下参数：</p><table><thead><tr><th>.</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>过滤条件</td><td>?type=1&amp;age=16</td><td>允许一定的uri冗余，如 /zoos/1 与 /zoos?id=1</td></tr><tr><td>排序</td><td>?sort=age&amp;order=asc</td><td>指定返回结果按照哪个属性排序，以及排序顺序</td></tr><tr><td>投影</td><td>?whitelist=id,name,email</td><td></td></tr><tr><td>分页</td><td>? page=2&amp;per_page=100</td><td>指定第几页，以及每页的记录数</td></tr></tbody></table><p>Bookmarker</p><p>经常使用的、复杂的查询标签化，降低维护成本。</p><p>如：GET /trades?status=closed&amp;sort=created,desc</p><p>快捷方式：GET /trades#recently-closed或者GET /trades/recently-closed</p><p>状态码</p><pre><code>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</code></pre><p>§200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</p><p>§201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</p><p>§202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</p><p>§204 NO CONTENT - [DELETE]：用户删除数据成功。</p><p>§400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</p><p>§401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</p><p>§403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</p><p>§404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</p><p>§406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</p><p>§410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</p><p>§422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</p><p>§500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a></p><p>URI失效</p><p>随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301重定向。</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><ol><li>不要包装：</li></ol><p>response的 body 直接就是数据，不要做多余的包装。错误示例：</p><p>{</p><p>   “success”:true,</p><p>   “data”:{“id”:1,”name”:”xiaotuan”},</p><p>}</p><ol start="2"><li>各HTTP方法成功处理后的数据格式：</li></ol><table><thead><tr><th>·</th><th>response 格式</th></tr></thead><tbody><tr><td>GET</td><td>单个对象、集合</td></tr><tr><td>POST</td><td>新增成功的对象</td></tr><tr><td>PUT/PATCH</td><td>更新成功的对象</td></tr><tr><td>DELETE</td><td>空</td></tr></tbody></table><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ol><li><p>不要发生了错误但给2xx响应，客户端可能会缓存成功的http请求；</p></li><li><p>正确设置http状态码，不要自定义；</p></li><li><p>Response body提供</p></li></ol><p>即:返回的信息中将error作为键名，出错信息作为键值即可</p><p>1)错误的代码（日志/问题追查）；</p><p>2)错误的描述文本（展示给用户）。</p><p>对第三点的实现稍微多说一点：</p><p>Java服务器端一般用异常表示 RESTful API的错误。API 可能抛出两类异常：业务异常和非业务异常。 业务异常 由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。 非业务类异常 表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。</p><p>业务类异常必须提供2种信息：</p><ol><li><p>如果抛出该类异常，HTTP响应状态码应该设成什么；</p></li><li><p>异常的文本描述；</p></li></ol><p>在Controller层使用统一的异常拦截器：</p><ol><li><p>设置 HTTP响应状态码：对业务类异常，用它指定的 HTTPcode；对非业务类异常，统一500；</p></li><li><p>Response Body的错误码：异常类名</p></li><li><p>Response Body的错误描述：对业务类异常，用它指定的错误文本；对非业务类异常，线上可以统一文案如“服务器端错误，请稍后再试”，开发或测试环境中用异常的 stacktrace，服务器端提供该行为的开关。</p></li></ol><p>常用的http状态码及使用场景：</p><table><thead><tr><th>状态码</th><th>使用场景</th></tr></thead><tbody><tr><td>400 bad request</td><td>常用在参数校验</td></tr><tr><td>401 unauthorized</td><td>未经验证的用户，常见于未登录。如果经过验证后依然没权限，应该 403（即 authentication和 authorization的区别）。</td></tr><tr><td>403 forbidden</td><td>无权限</td></tr><tr><td>404 not found</td><td>资源不存在</td></tr><tr><td>500 internal server error</td><td>非业务类异常</td></tr><tr><td>503 service unavaliable</td><td>由容器抛出，自己的代码不要抛这个异常</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>（1）API的身份认证应该使用OAuth2.0框架</p><p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML</p><p>（3）比较复杂的接口不能确定是使用POST还是PUT时，要看具体的业务层代码，看看接口产生的结果是否幂等，如果幂等用PUT，相反用POST</p><p>​      如：接口接收到一资源，资源存在更新，不存在插入新数据，这个接口就要用PUT</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ovi3ob9p4.bkt.clouddn.com/TIETU/CT0148.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;API开发规范&lt;br&gt;
    
    </summary>
    
      <category term="API" scheme="http://m.iskei.cn/categories/API/"/>
    
    
      <category term="API" scheme="http://m.iskei.cn/tags/API/"/>
    
  </entry>
  
</feed>
